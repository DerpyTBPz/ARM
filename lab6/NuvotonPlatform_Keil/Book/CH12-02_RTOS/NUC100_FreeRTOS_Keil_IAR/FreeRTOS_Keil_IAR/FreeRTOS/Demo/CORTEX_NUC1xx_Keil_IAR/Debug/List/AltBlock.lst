###############################################################################
#                                                                             #
#                                                       06/Jul/2010  14:34:50 #
# IAR ANSI C/C++ Compiler V5.50.0.21878/W32 EVALUATION for ARM                #
# Copyright (C) 1999-2010 IAR Systems AB.                                     #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\Common\Minimal\AltBlo #
#                    ck.c                                                     #
#    Command line =  E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\Common\Minimal\AltBlo #
#                    ck.c -D IAR_ARM_CM0 -lCN E:\FreeRTOS_Keil_IAR\FreeRTOS\D #
#                    emo\CORTEX_NUC1xx_Keil_IAR\Debug\List\ --diag_suppress   #
#                    Pe550,Pa082,Pa039 -o E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\ #
#                    CORTEX_NUC1xx_Keil_IAR\Debug\Obj\ --no_cse --no_unroll   #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M0  #
#                    -e --fpu=None --dlib_config "D:\Program                  #
#                    Files\ARM\INC\DLib_Config_Full.h" -I                     #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\..\common\include\ -I E:\FreeRTOS_Keil_IAR\FreeRTOS\De #
#                    mo\CORTEX_NUC1xx_Keil_IAR\..\..\source\include\ -I       #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\ -I E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_K #
#                    eil_IAR\NUC1xxBSP\NuvotonPlatform_Keil\Include\ -I       #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\NUC1xxBSP\NuvotonPlatform_Keil\Include\Driver\ -I      #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\NUC1xxBSP\CMSIS\CM0\ -I E:\FreeRTOS_Keil_IAR\FreeRTOS\ #
#                    Demo\CORTEX_NUC1xx_Keil_IAR\User_Demo\include\ -I        #
#                    "D:\Program Files\ARM\INC\" -Ol                          #
#    List file    =  E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\Debug\List\AltBlock.lst                                #
#    Object file  =  E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\Debug\Obj\AltBlock.o                                   #
#                                                                             #
#                                                                             #
###############################################################################

E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\Common\Minimal\AltBlock.c
      1          /*
      2              FreeRTOS V6.0.5 - Copyright (C) 2010 Real Time Engineers Ltd.
      3          
      4              ***************************************************************************
      5              *                                                                         *
      6              * If you are:                                                             *
      7              *                                                                         *
      8              *    + New to FreeRTOS,                                                   *
      9              *    + Wanting to learn FreeRTOS or multitasking in general quickly       *
     10              *    + Looking for basic training,                                        *
     11              *    + Wanting to improve your FreeRTOS skills and productivity           *
     12              *                                                                         *
     13              * then take a look at the FreeRTOS eBook                                  *
     14              *                                                                         *
     15              *        "Using the FreeRTOS Real Time Kernel - a Practical Guide"        *
     16              *                  http://www.FreeRTOS.org/Documentation                  *
     17              *                                                                         *
     18              * A pdf reference manual is also available.  Both are usually delivered   *
     19              * to your inbox within 20 minutes to two hours when purchased between 8am *
     20              * and 8pm GMT (although please allow up to 24 hours in case of            *
     21              * exceptional circumstances).  Thank you for your support!                *
     22              *                                                                         *
     23              ***************************************************************************
     24          
     25              This file is part of the FreeRTOS distribution.
     26          
     27              FreeRTOS is free software; you can redistribute it and/or modify it under
     28              the terms of the GNU General Public License (version 2) as published by the
     29              Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
     30              ***NOTE*** The exception to the GPL is included to allow you to distribute
     31              a combined work that includes FreeRTOS without being obliged to provide the
     32              source code for proprietary components outside of the FreeRTOS kernel.
     33              FreeRTOS is distributed in the hope that it will be useful, but WITHOUT
     34              ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
     35              FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
     36              more details. You should have received a copy of the GNU General Public 
     37              License and the FreeRTOS license exception along with FreeRTOS; if not it 
     38              can be viewed here: http://www.freertos.org/a00114.html and also obtained 
     39              by writing to Richard Barry, contact details for whom are available on the
     40              FreeRTOS WEB site.
     41          
     42              1 tab == 4 spaces!
     43          
     44              http://www.FreeRTOS.org - Documentation, latest information, license and
     45              contact details.
     46          
     47              http://www.SafeRTOS.com - A version that is certified for use in safety
     48              critical systems.
     49          
     50              http://www.OpenRTOS.com - Commercial support, development, porting,
     51              licensing and training services.
     52          */
     53          
     54          /*
     55           * This is a version of BlockTim.c that uses the light weight API.
     56           *
     57           * This file contains some test scenarios that ensure tasks do not exit queue
     58           * send or receive functions prematurely.  A description of the tests is
     59           * included within the code.
     60           */
     61          
     62          /* Kernel includes. */
     63          #include "FreeRTOS.h"
     64          #include "task.h"
     65          #include "queue.h"
     66          
     67          /* Demo includes. */
     68          #include "AltBlock.h"
     69          
     70          /* Task priorities. */
     71          #define bktPRIMARY_PRIORITY			( 3 )
     72          #define bktSECONDARY_PRIORITY		( 2 )
     73          
     74          /* Task behaviour. */
     75          #define bktQUEUE_LENGTH				( 5 )
     76          #define bktSHORT_WAIT				( ( ( portTickType ) 20 ) / portTICK_RATE_MS )
     77          #define bktPRIMARY_BLOCK_TIME		( 10 )
     78          #define bktALLOWABLE_MARGIN			( 12 )
     79          #define bktTIME_TO_BLOCK			( 175 )
     80          #define bktDONT_BLOCK				( ( portTickType ) 0 )
     81          #define bktRUN_INDICATOR			( ( unsigned portBASE_TYPE ) 0x55 )
     82          
     83          /* The queue on which the tasks block. */

   \                                 In section .bss, align 4
     84          static xQueueHandle xTestQueue;
   \                     xTestQueue:
   \   00000000                      DS8 4
     85          
     86          /* Handle to the secondary task is required by the primary task for calls
     87          to vTaskSuspend/Resume(). */

   \                                 In section .bss, align 4
     88          static xTaskHandle xSecondary;
   \                     xSecondary:
   \   00000000                      DS8 4
     89          
     90          /* Used to ensure that tasks are still executing without error. */

   \                                 In section .bss, align 4
     91          static portBASE_TYPE xPrimaryCycles = 0, xSecondaryCycles = 0;
   \                     xPrimaryCycles:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     xSecondaryCycles:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     92          static portBASE_TYPE xErrorOccurred = pdFALSE;
   \                     xErrorOccurred:
   \   00000000                      DS8 4
     93          
     94          /* Provides a simple mechanism for the primary task to know when the
     95          secondary task has executed. */

   \                                 In section .bss, align 4
     96          static volatile unsigned portBASE_TYPE xRunIndicator;
   \                     xRunIndicator:
   \   00000000                      DS8 4
     97          
     98          /* The two test tasks.  Their behaviour is commented within the files. */
     99          static void vPrimaryBlockTimeTestTask( void *pvParameters );
    100          static void vSecondaryBlockTimeTestTask( void *pvParameters );
    101          
    102          /*-----------------------------------------------------------*/
    103          

   \                                 In section .text, align 2, keep-with-next
    104          void vCreateAltBlockTimeTasks( void )
    105          {
   \                     vCreateAltBlockTimeTasks:
   \   00000000   00B5               PUSH     {LR}
   \   00000002   85B0               SUB      SP,SP,#+20
    106          	/* Create the queue on which the two tasks block. */
    107              xTestQueue = xQueueCreate( bktQUEUE_LENGTH, sizeof( portBASE_TYPE ) );
   \   00000004   0421               MOVS     R1,#+4
   \   00000006   0520               MOVS     R0,#+5
   \   00000008   ........           BL       xQueueCreate
   \   0000000C   ....               LDR      R1,??DataTable1
   \   0000000E   0860               STR      R0,[R1, #+0]
    108          
    109          	/* vQueueAddToRegistry() adds the queue to the queue registry, if one is
    110          	in use.  The queue registry is provided as a means for kernel aware 
    111          	debuggers to locate queues and has no purpose if a kernel aware debugger
    112          	is not being used.  The call to vQueueAddToRegistry() will be removed
    113          	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is 
    114          	defined to be less than 1. */
    115          	vQueueAddToRegistry( xTestQueue, ( signed portCHAR * ) "AltBlockQueue" );
    116          
    117          
    118          	/* Create the two test tasks. */
    119          	xTaskCreate( vPrimaryBlockTimeTestTask, ( signed portCHAR * )"FBTest1", configMINIMAL_STACK_SIZE, NULL, bktPRIMARY_PRIORITY, NULL );
   \   00000010   0020               MOVS     R0,#+0
   \   00000012   0390               STR      R0,[SP, #+12]
   \   00000014   0020               MOVS     R0,#+0
   \   00000016   0290               STR      R0,[SP, #+8]
   \   00000018   0020               MOVS     R0,#+0
   \   0000001A   0190               STR      R0,[SP, #+4]
   \   0000001C   0320               MOVS     R0,#+3
   \   0000001E   0090               STR      R0,[SP, #+0]
   \   00000020   0023               MOVS     R3,#+0
   \   00000022   8022               MOVS     R2,#+128
   \   00000024   ....               LDR      R1,??DataTable1_1
   \   00000026   ....               LDR      R0,??DataTable1_2
   \   00000028   ........           BL       xTaskGenericCreate
    120          	xTaskCreate( vSecondaryBlockTimeTestTask, ( signed portCHAR * )"FBTest2", configMINIMAL_STACK_SIZE, NULL, bktSECONDARY_PRIORITY, &xSecondary );
   \   0000002C   0020               MOVS     R0,#+0
   \   0000002E   0390               STR      R0,[SP, #+12]
   \   00000030   0020               MOVS     R0,#+0
   \   00000032   0290               STR      R0,[SP, #+8]
   \   00000034   ....               LDR      R0,??DataTable1_3
   \   00000036   0190               STR      R0,[SP, #+4]
   \   00000038   0220               MOVS     R0,#+2
   \   0000003A   0090               STR      R0,[SP, #+0]
   \   0000003C   0023               MOVS     R3,#+0
   \   0000003E   8022               MOVS     R2,#+128
   \   00000040   ....               LDR      R1,??DataTable1_4
   \   00000042   ....               LDR      R0,??DataTable1_5
   \   00000044   ........           BL       xTaskGenericCreate
    121          }
   \   00000048   05B0               ADD      SP,SP,#+20
   \   0000004A   00BD               POP      {PC}             ;; return
    122          /*-----------------------------------------------------------*/
    123          

   \                                 In section .text, align 2, keep-with-next
    124          static void vPrimaryBlockTimeTestTask( void *pvParameters )
    125          {
   \                     vPrimaryBlockTimeTestTask:
   \   00000000   30B5               PUSH     {R4,R5,LR}
   \   00000002   83B0               SUB      SP,SP,#+12
    126          portBASE_TYPE xItem, xData;
    127          portTickType xTimeWhenBlocking;
    128          portTickType xTimeToBlock, xBlockedTime;
    129          
    130          	#ifdef USE_STDIO
    131          	void vPrintDisplayMessage( const portCHAR * const * ppcMessageToSend );
    132          	
    133          		const portCHAR * const pcTaskStartMsg = "Alt primary block time test started.\r\n";
    134          
    135          		/* Queue a message for printing to say the task has started. */
    136          		vPrintDisplayMessage( &pcTaskStartMsg );
    137          	#endif
    138          
    139          	( void ) pvParameters;
   \   00000004   07E0               B        ??vPrimaryBlockTimeTestTask_0
    140          
    141          	for( ;; )
    142          	{
    143          		/*********************************************************************
    144                  Test 1
    145          
    146                  Simple block time wakeup test on queue receives. */
    147          		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
    148          		{
    149          			/* The queue is empty. Attempt to read from the queue using a block
    150          			time.  When we wake, ensure the delta in time is as expected. */
    151          			xTimeToBlock = bktPRIMARY_BLOCK_TIME << xItem;
    152          
    153          			/* A critical section is used to minimise the jitter in the time
    154          			measurements. */
    155          			//portENTER_CRITICAL();
    156          			{
    157          				xTimeWhenBlocking = xTaskGetTickCount();
    158          				
    159          				/* We should unblock after xTimeToBlock having not received
    160          				anything on the queue. */
    161          				if( xQueueAltReceive( xTestQueue, &xData, xTimeToBlock ) != errQUEUE_EMPTY )
    162          				{
    163          					xErrorOccurred = pdTRUE;
    164          				}
    165          
    166          				/* How long were we blocked for? */
    167          				xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
    168          			}
    169          			//portEXIT_CRITICAL();
    170          
    171          			if( xBlockedTime < xTimeToBlock )
    172          			{
    173          				/* Should not have blocked for less than we requested. */
    174          				xErrorOccurred = pdTRUE;
    175          			}
    176          
    177          			if( xBlockedTime > ( xTimeToBlock + bktALLOWABLE_MARGIN ) )
    178          			{
    179          				/* Should not have blocked for longer than we requested,
    180          				although we would not necessarily run as soon as we were
    181          				unblocked so a margin is allowed. */
    182          				xErrorOccurred = pdTRUE;
    183          			}
    184          		}
    185          
    186          
    187          		#if configUSE_PREEMPTION == 0
    188          			taskYIELD();
    189          		#endif
    190          
    191          
    192          		/*********************************************************************
    193                  Test 2
    194          
    195                  Simple block time wakeup test on queue sends.
    196          
    197          		First fill the queue.  It should be empty so all sends should pass. */
    198          		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
    199          		{
    200          			if( xQueueAltSendToBack( xTestQueue, &xItem, bktDONT_BLOCK ) != pdPASS )
    201          			{
    202          				xErrorOccurred = pdTRUE;
    203          			}
    204          		}
    205          
    206          		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
    207          		{
    208          			/* The queue is full. Attempt to write to the queue using a block
    209          			time.  When we wake, ensure the delta in time is as expected. */
    210          			xTimeToBlock = bktPRIMARY_BLOCK_TIME << xItem;
    211          
    212          			//portENTER_CRITICAL();
    213          			{
    214          				xTimeWhenBlocking = xTaskGetTickCount();
    215          				
    216          				/* We should unblock after xTimeToBlock having not received
    217          				anything on the queue. */
    218          				if( xQueueAltSendToBack( xTestQueue, &xItem, xTimeToBlock ) != errQUEUE_FULL )
    219          				{
    220          					xErrorOccurred = pdTRUE;
    221          				}
    222          
    223          				/* How long were we blocked for? */
    224          				xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
    225          			}
    226          			//portEXIT_CRITICAL();
    227          
    228          			if( xBlockedTime < xTimeToBlock )
    229          			{
    230          				/* Should not have blocked for less than we requested. */
    231          				xErrorOccurred = pdTRUE;
    232          			}
    233          
    234          			if( xBlockedTime > ( xTimeToBlock + bktALLOWABLE_MARGIN ) )
    235          			{
    236          				/* Should not have blocked for longer than we requested,
    237          				although we would not necessarily run as soon as we were
    238          				unblocked so a margin is allowed. */
    239          				xErrorOccurred = pdTRUE;
    240          			}
    241          		}
    242          
    243          		#if configUSE_PREEMPTION == 0
    244          			taskYIELD();
    245          		#endif
    246          
    247          		
    248          		/*********************************************************************
    249                  Test 3
    250          
    251          		Wake the other task, it will block attempting to post to the queue.
    252          		When we read from the queue the other task will wake, but before it
    253          		can run we will post to the queue again.  When the other task runs it
    254          		will find the queue still full, even though it was woken.  It should
    255          		recognise that its block time has not expired and return to block for
    256          		the remains of its block time.
    257          
    258          		Wake the other task so it blocks attempting to post to the already
    259          		full queue. */
    260          		xRunIndicator = 0;
    261          		vTaskResume( xSecondary );
    262          
    263          		/* We need to wait a little to ensure the other task executes. */
    264          		while( xRunIndicator != bktRUN_INDICATOR )
    265          		{
    266          			/* The other task has not yet executed. */
    267          			vTaskDelay( bktSHORT_WAIT );
    268          		}
    269          		/* Make sure the other task is blocked on the queue. */
    270          		vTaskDelay( bktSHORT_WAIT );
    271          		xRunIndicator = 0;
    272          
    273          		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
    274          		{
    275          			/* Now when we make space on the queue the other task should wake
    276          			but not execute as this task has higher priority. */				
    277          			if( xQueueAltReceive( xTestQueue, &xData, bktDONT_BLOCK ) != pdPASS )
    278          			{
    279          				xErrorOccurred = pdTRUE;
    280          			}
    281          
    282          			/* Now fill the queue again before the other task gets a chance to
    283          			execute.  If the other task had executed we would find the queue
    284          			full ourselves, and the other task have set xRunIndicator. */
    285          			if( xQueueAltSendToBack( xTestQueue, &xItem, bktDONT_BLOCK ) != pdPASS )
    286          			{
    287          				xErrorOccurred = pdTRUE;
    288          			}
    289          
    290          			if( xRunIndicator == bktRUN_INDICATOR )
    291          			{
    292          				/* The other task should not have executed. */
    293          				xErrorOccurred = pdTRUE;
    294          			}
    295          
    296          			/* Raise the priority of the other task so it executes and blocks
    297          			on the queue again. */
    298          			vTaskPrioritySet( xSecondary, bktPRIMARY_PRIORITY + 2 );
    299          
    300          			/* The other task should now have re-blocked without exiting the
    301          			queue function. */
    302          			if( xRunIndicator == bktRUN_INDICATOR )
    303          			{
    304          				/* The other task should not have executed outside of the
    305          				queue function. */
    306          				xErrorOccurred = pdTRUE;
    307          			}
    308          
    309          			/* Set the priority back down. */
    310          			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );			
    311          		}
    312          
    313          		/* Let the other task timeout.  When it unblockes it will check that it
    314          		unblocked at the correct time, then suspend itself. */
    315          		while( xRunIndicator != bktRUN_INDICATOR )
    316          		{
    317          			vTaskDelay( bktSHORT_WAIT );
    318          		}
    319          		vTaskDelay( bktSHORT_WAIT );
    320          		xRunIndicator = 0;
    321          
    322          		#if configUSE_PREEMPTION == 0
    323          			taskYIELD();
    324          		#endif
    325          
    326          		/*********************************************************************
    327                  Test 4
    328          
    329          		As per test 3 - but with the send and receive the other way around.
    330          		The other task blocks attempting to read from the queue.
    331          
    332          		Empty the queue.  We should find that it is full. */
    333          		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
    334          		{
    335          			if( xQueueAltReceive( xTestQueue, &xData, bktDONT_BLOCK ) != pdPASS )
    336          			{
    337          				xErrorOccurred = pdTRUE;
    338          			}
    339          		}
    340          		
    341          		/* Wake the other task so it blocks attempting to read from  the
    342          		already	empty queue. */
    343          		vTaskResume( xSecondary );
    344          
    345          		/* We need to wait a little to ensure the other task executes. */
    346          		while( xRunIndicator != bktRUN_INDICATOR )
    347          		{
    348          			vTaskDelay( bktSHORT_WAIT );
    349          		}
    350          		vTaskDelay( bktSHORT_WAIT );
    351          		xRunIndicator = 0;
    352          
    353          		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
    354          		{
    355          			/* Now when we place an item on the queue the other task should
    356          			wake but not execute as this task has higher priority. */				
    357          			if( xQueueAltSendToBack( xTestQueue, &xItem, bktDONT_BLOCK ) != pdPASS )
    358          			{
    359          				xErrorOccurred = pdTRUE;
    360          			}
    361          
    362          			/* Now empty the queue again before the other task gets a chance to
    363          			execute.  If the other task had executed we would find the queue
    364          			empty ourselves, and the other task would be suspended. */
    365          			if( xQueueAltReceive( xTestQueue, &xData, bktDONT_BLOCK ) != pdPASS )
    366          			{
    367          				xErrorOccurred = pdTRUE;
    368          			}
    369          
    370          			if( xRunIndicator == bktRUN_INDICATOR )
    371          			{
    372          				/* The other task should not have executed. */
    373          				xErrorOccurred = pdTRUE;
    374          			}
    375          
    376          			/* Raise the priority of the other task so it executes and blocks
    377          			on the queue again. */
    378          			vTaskPrioritySet( xSecondary, bktPRIMARY_PRIORITY + 2 );
    379          
    380          			/* The other task should now have re-blocked without exiting the
    381          			queue function. */
    382          			if( xRunIndicator == bktRUN_INDICATOR )
    383          			{
    384          				/* The other task should not have executed outside of the
    385          				queue function. */
    386          				xErrorOccurred = pdTRUE;
    387          			}
    388          			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );			
    389          		}
    390          
    391          		/* Let the other task timeout.  When it unblockes it will check that it
    392          		unblocked at the correct time, then suspend itself. */
    393          		while( xRunIndicator != bktRUN_INDICATOR )
    394          		{
    395          			vTaskDelay( bktSHORT_WAIT );
    396          		}
    397          		vTaskDelay( bktSHORT_WAIT );
   \                     ??vPrimaryBlockTimeTestTask_1:
   \   00000006   1420               MOVS     R0,#+20
   \   00000008   ........           BL       vTaskDelay
    398          
    399          		xPrimaryCycles++;
   \   0000000C   ....               LDR      R0,??DataTable1_6
   \   0000000E   0068               LDR      R0,[R0, #+0]
   \   00000010   401C               ADDS     R0,R0,#+1
   \   00000012   ....               LDR      R1,??DataTable1_6
   \   00000014   0860               STR      R0,[R1, #+0]
   \                     ??vPrimaryBlockTimeTestTask_0:
   \   00000016   0020               MOVS     R0,#+0
   \   00000018   0090               STR      R0,[SP, #+0]
   \   0000001A   22E0               B        ??vPrimaryBlockTimeTestTask_2
   \                     ??vPrimaryBlockTimeTestTask_3:
   \   0000001C   0A24               MOVS     R4,#+10
   \   0000001E   0098               LDR      R0,[SP, #+0]
   \   00000020   8440               LSLS     R4,R4,R0
   \   00000022   ........           BL       xTaskGetTickCount
   \   00000026   0500               MOVS     R5,R0
   \   00000028   0023               MOVS     R3,#+0
   \   0000002A   2200               MOVS     R2,R4
   \   0000002C   01A9               ADD      R1,SP,#+4
   \   0000002E   ....               LDR      R0,??DataTable1
   \   00000030   0068               LDR      R0,[R0, #+0]
   \   00000032   ........           BL       xQueueAltGenericReceive
   \   00000036   0028               CMP      R0,#+0
   \   00000038   02D0               BEQ      ??vPrimaryBlockTimeTestTask_4
   \   0000003A   ....               LDR      R0,??DataTable2
   \   0000003C   0121               MOVS     R1,#+1
   \   0000003E   0160               STR      R1,[R0, #+0]
   \                     ??vPrimaryBlockTimeTestTask_4:
   \   00000040   ........           BL       xTaskGetTickCount
   \   00000044   401B               SUBS     R0,R0,R5
   \   00000046   A042               CMP      R0,R4
   \   00000048   02D2               BCS      ??vPrimaryBlockTimeTestTask_5
   \   0000004A   ....               LDR      R1,??DataTable2
   \   0000004C   0122               MOVS     R2,#+1
   \   0000004E   0A60               STR      R2,[R1, #+0]
   \                     ??vPrimaryBlockTimeTestTask_5:
   \   00000050   0C34               ADDS     R4,R4,#+12
   \   00000052   8442               CMP      R4,R0
   \   00000054   02D2               BCS      ??vPrimaryBlockTimeTestTask_6
   \   00000056   ....               LDR      R0,??DataTable2
   \   00000058   0121               MOVS     R1,#+1
   \   0000005A   0160               STR      R1,[R0, #+0]
   \                     ??vPrimaryBlockTimeTestTask_6:
   \   0000005C   0098               LDR      R0,[SP, #+0]
   \   0000005E   401C               ADDS     R0,R0,#+1
   \   00000060   0090               STR      R0,[SP, #+0]
   \                     ??vPrimaryBlockTimeTestTask_2:
   \   00000062   0098               LDR      R0,[SP, #+0]
   \   00000064   0528               CMP      R0,#+5
   \   00000066   D9DB               BLT      ??vPrimaryBlockTimeTestTask_3
   \   00000068   0020               MOVS     R0,#+0
   \   0000006A   0090               STR      R0,[SP, #+0]
   \   0000006C   0EE0               B        ??vPrimaryBlockTimeTestTask_7
   \                     ??vPrimaryBlockTimeTestTask_8:
   \   0000006E   0023               MOVS     R3,#+0
   \   00000070   0022               MOVS     R2,#+0
   \   00000072   6946               MOV      R1,SP
   \   00000074   ....               LDR      R0,??DataTable1
   \   00000076   0068               LDR      R0,[R0, #+0]
   \   00000078   ........           BL       xQueueAltGenericSend
   \   0000007C   0128               CMP      R0,#+1
   \   0000007E   02D0               BEQ      ??vPrimaryBlockTimeTestTask_9
   \   00000080   ....               LDR      R0,??DataTable2
   \   00000082   0121               MOVS     R1,#+1
   \   00000084   0160               STR      R1,[R0, #+0]
   \                     ??vPrimaryBlockTimeTestTask_9:
   \   00000086   0098               LDR      R0,[SP, #+0]
   \   00000088   401C               ADDS     R0,R0,#+1
   \   0000008A   0090               STR      R0,[SP, #+0]
   \                     ??vPrimaryBlockTimeTestTask_7:
   \   0000008C   0098               LDR      R0,[SP, #+0]
   \   0000008E   0528               CMP      R0,#+5
   \   00000090   EDDB               BLT      ??vPrimaryBlockTimeTestTask_8
   \   00000092   0020               MOVS     R0,#+0
   \   00000094   0090               STR      R0,[SP, #+0]
   \   00000096   22E0               B        ??vPrimaryBlockTimeTestTask_10
   \                     ??vPrimaryBlockTimeTestTask_11:
   \   00000098   0A24               MOVS     R4,#+10
   \   0000009A   0098               LDR      R0,[SP, #+0]
   \   0000009C   8440               LSLS     R4,R4,R0
   \   0000009E   ........           BL       xTaskGetTickCount
   \   000000A2   0500               MOVS     R5,R0
   \   000000A4   0023               MOVS     R3,#+0
   \   000000A6   2200               MOVS     R2,R4
   \   000000A8   6946               MOV      R1,SP
   \   000000AA   ....               LDR      R0,??DataTable1
   \   000000AC   0068               LDR      R0,[R0, #+0]
   \   000000AE   ........           BL       xQueueAltGenericSend
   \   000000B2   0028               CMP      R0,#+0
   \   000000B4   02D0               BEQ      ??vPrimaryBlockTimeTestTask_12
   \   000000B6   ....               LDR      R0,??DataTable2
   \   000000B8   0121               MOVS     R1,#+1
   \   000000BA   0160               STR      R1,[R0, #+0]
   \                     ??vPrimaryBlockTimeTestTask_12:
   \   000000BC   ........           BL       xTaskGetTickCount
   \   000000C0   401B               SUBS     R0,R0,R5
   \   000000C2   A042               CMP      R0,R4
   \   000000C4   02D2               BCS      ??vPrimaryBlockTimeTestTask_13
   \   000000C6   ....               LDR      R1,??DataTable2
   \   000000C8   0122               MOVS     R2,#+1
   \   000000CA   0A60               STR      R2,[R1, #+0]
   \                     ??vPrimaryBlockTimeTestTask_13:
   \   000000CC   0C34               ADDS     R4,R4,#+12
   \   000000CE   8442               CMP      R4,R0
   \   000000D0   02D2               BCS      ??vPrimaryBlockTimeTestTask_14
   \   000000D2   ....               LDR      R0,??DataTable2
   \   000000D4   0121               MOVS     R1,#+1
   \   000000D6   0160               STR      R1,[R0, #+0]
   \                     ??vPrimaryBlockTimeTestTask_14:
   \   000000D8   0098               LDR      R0,[SP, #+0]
   \   000000DA   401C               ADDS     R0,R0,#+1
   \   000000DC   0090               STR      R0,[SP, #+0]
   \                     ??vPrimaryBlockTimeTestTask_10:
   \   000000DE   0098               LDR      R0,[SP, #+0]
   \   000000E0   0528               CMP      R0,#+5
   \   000000E2   D9DB               BLT      ??vPrimaryBlockTimeTestTask_11
   \   000000E4   ....               LDR      R0,??DataTable3
   \   000000E6   0021               MOVS     R1,#+0
   \   000000E8   0160               STR      R1,[R0, #+0]
   \   000000EA   ....               LDR      R0,??DataTable1_3
   \   000000EC   0068               LDR      R0,[R0, #+0]
   \   000000EE   ........           BL       vTaskResume
   \   000000F2   02E0               B        ??vPrimaryBlockTimeTestTask_15
   \                     ??vPrimaryBlockTimeTestTask_16:
   \   000000F4   1420               MOVS     R0,#+20
   \   000000F6   ........           BL       vTaskDelay
   \                     ??vPrimaryBlockTimeTestTask_15:
   \   000000FA   ....               LDR      R0,??DataTable3
   \   000000FC   0068               LDR      R0,[R0, #+0]
   \   000000FE   5528               CMP      R0,#+85
   \   00000100   F8D1               BNE      ??vPrimaryBlockTimeTestTask_16
   \   00000102   1420               MOVS     R0,#+20
   \   00000104   ........           BL       vTaskDelay
   \   00000108   ....               LDR      R0,??DataTable3
   \   0000010A   0021               MOVS     R1,#+0
   \   0000010C   0160               STR      R1,[R0, #+0]
   \   0000010E   0020               MOVS     R0,#+0
   \   00000110   0090               STR      R0,[SP, #+0]
   \   00000112   32E0               B        ??vPrimaryBlockTimeTestTask_17
   \                     ??vPrimaryBlockTimeTestTask_18:
   \   00000114   0023               MOVS     R3,#+0
   \   00000116   0022               MOVS     R2,#+0
   \   00000118   01A9               ADD      R1,SP,#+4
   \   0000011A   ....               LDR      R0,??DataTable1
   \   0000011C   0068               LDR      R0,[R0, #+0]
   \   0000011E   ........           BL       xQueueAltGenericReceive
   \   00000122   0128               CMP      R0,#+1
   \   00000124   02D0               BEQ      ??vPrimaryBlockTimeTestTask_19
   \   00000126   ....               LDR      R0,??DataTable2
   \   00000128   0121               MOVS     R1,#+1
   \   0000012A   0160               STR      R1,[R0, #+0]
   \                     ??vPrimaryBlockTimeTestTask_19:
   \   0000012C   0023               MOVS     R3,#+0
   \   0000012E   0022               MOVS     R2,#+0
   \   00000130   6946               MOV      R1,SP
   \   00000132   ....               LDR      R0,??DataTable1
   \   00000134   0068               LDR      R0,[R0, #+0]
   \   00000136   ........           BL       xQueueAltGenericSend
   \   0000013A   0128               CMP      R0,#+1
   \   0000013C   02D0               BEQ      ??vPrimaryBlockTimeTestTask_20
   \   0000013E   ....               LDR      R0,??DataTable2
   \   00000140   0121               MOVS     R1,#+1
   \   00000142   0160               STR      R1,[R0, #+0]
   \                     ??vPrimaryBlockTimeTestTask_20:
   \   00000144   ....               LDR      R0,??DataTable3
   \   00000146   0068               LDR      R0,[R0, #+0]
   \   00000148   5528               CMP      R0,#+85
   \   0000014A   02D1               BNE      ??vPrimaryBlockTimeTestTask_21
   \   0000014C   ....               LDR      R0,??DataTable2
   \   0000014E   0121               MOVS     R1,#+1
   \   00000150   0160               STR      R1,[R0, #+0]
   \                     ??vPrimaryBlockTimeTestTask_21:
   \   00000152   0521               MOVS     R1,#+5
   \   00000154   ....               LDR      R0,??DataTable1_3
   \   00000156   0068               LDR      R0,[R0, #+0]
   \   00000158   ........           BL       vTaskPrioritySet
   \   0000015C   ....               LDR      R0,??DataTable3
   \   0000015E   0068               LDR      R0,[R0, #+0]
   \   00000160   5528               CMP      R0,#+85
   \   00000162   02D1               BNE      ??vPrimaryBlockTimeTestTask_22
   \   00000164   ....               LDR      R0,??DataTable2
   \   00000166   0121               MOVS     R1,#+1
   \   00000168   0160               STR      R1,[R0, #+0]
   \                     ??vPrimaryBlockTimeTestTask_22:
   \   0000016A   0221               MOVS     R1,#+2
   \   0000016C   ....               LDR      R0,??DataTable1_3
   \   0000016E   0068               LDR      R0,[R0, #+0]
   \   00000170   ........           BL       vTaskPrioritySet
   \   00000174   0098               LDR      R0,[SP, #+0]
   \   00000176   401C               ADDS     R0,R0,#+1
   \   00000178   0090               STR      R0,[SP, #+0]
   \                     ??vPrimaryBlockTimeTestTask_17:
   \   0000017A   0098               LDR      R0,[SP, #+0]
   \   0000017C   0528               CMP      R0,#+5
   \   0000017E   C9DB               BLT      ??vPrimaryBlockTimeTestTask_18
   \                     ??vPrimaryBlockTimeTestTask_23:
   \   00000180   ....               LDR      R0,??DataTable3
   \   00000182   0068               LDR      R0,[R0, #+0]
   \   00000184   5528               CMP      R0,#+85
   \   00000186   03D0               BEQ      ??vPrimaryBlockTimeTestTask_24
   \   00000188   1420               MOVS     R0,#+20
   \   0000018A   ........           BL       vTaskDelay
   \   0000018E   F7E7               B        ??vPrimaryBlockTimeTestTask_23
   \                     ??vPrimaryBlockTimeTestTask_24:
   \   00000190   1420               MOVS     R0,#+20
   \   00000192   ........           BL       vTaskDelay
   \   00000196   ....               LDR      R0,??DataTable3
   \   00000198   0021               MOVS     R1,#+0
   \   0000019A   0160               STR      R1,[R0, #+0]
   \   0000019C   0020               MOVS     R0,#+0
   \   0000019E   0090               STR      R0,[SP, #+0]
   \   000001A0   0EE0               B        ??vPrimaryBlockTimeTestTask_25
   \                     ??vPrimaryBlockTimeTestTask_26:
   \   000001A2   0023               MOVS     R3,#+0
   \   000001A4   0022               MOVS     R2,#+0
   \   000001A6   01A9               ADD      R1,SP,#+4
   \   000001A8   ....               LDR      R0,??DataTable1
   \   000001AA   0068               LDR      R0,[R0, #+0]
   \   000001AC   ........           BL       xQueueAltGenericReceive
   \   000001B0   0128               CMP      R0,#+1
   \   000001B2   02D0               BEQ      ??vPrimaryBlockTimeTestTask_27
   \   000001B4   ....               LDR      R0,??DataTable2
   \   000001B6   0121               MOVS     R1,#+1
   \   000001B8   0160               STR      R1,[R0, #+0]
   \                     ??vPrimaryBlockTimeTestTask_27:
   \   000001BA   0098               LDR      R0,[SP, #+0]
   \   000001BC   401C               ADDS     R0,R0,#+1
   \   000001BE   0090               STR      R0,[SP, #+0]
   \                     ??vPrimaryBlockTimeTestTask_25:
   \   000001C0   0098               LDR      R0,[SP, #+0]
   \   000001C2   0528               CMP      R0,#+5
   \   000001C4   EDDB               BLT      ??vPrimaryBlockTimeTestTask_26
   \   000001C6   ....               LDR      R0,??DataTable1_3
   \   000001C8   0068               LDR      R0,[R0, #+0]
   \   000001CA   ........           BL       vTaskResume
   \   000001CE   02E0               B        ??vPrimaryBlockTimeTestTask_28
   \                     ??vPrimaryBlockTimeTestTask_29:
   \   000001D0   1420               MOVS     R0,#+20
   \   000001D2   ........           BL       vTaskDelay
   \                     ??vPrimaryBlockTimeTestTask_28:
   \   000001D6   ....               LDR      R0,??DataTable3
   \   000001D8   0068               LDR      R0,[R0, #+0]
   \   000001DA   5528               CMP      R0,#+85
   \   000001DC   F8D1               BNE      ??vPrimaryBlockTimeTestTask_29
   \   000001DE   1420               MOVS     R0,#+20
   \   000001E0   ........           BL       vTaskDelay
   \   000001E4   ....               LDR      R0,??DataTable3
   \   000001E6   0021               MOVS     R1,#+0
   \   000001E8   0160               STR      R1,[R0, #+0]
   \   000001EA   0020               MOVS     R0,#+0
   \   000001EC   0090               STR      R0,[SP, #+0]
   \   000001EE   32E0               B        ??vPrimaryBlockTimeTestTask_30
   \                     ??vPrimaryBlockTimeTestTask_31:
   \   000001F0   0023               MOVS     R3,#+0
   \   000001F2   0022               MOVS     R2,#+0
   \   000001F4   6946               MOV      R1,SP
   \   000001F6   ....               LDR      R0,??DataTable1
   \   000001F8   0068               LDR      R0,[R0, #+0]
   \   000001FA   ........           BL       xQueueAltGenericSend
   \   000001FE   0128               CMP      R0,#+1
   \   00000200   02D0               BEQ      ??vPrimaryBlockTimeTestTask_32
   \   00000202   ....               LDR      R0,??DataTable2
   \   00000204   0121               MOVS     R1,#+1
   \   00000206   0160               STR      R1,[R0, #+0]
   \                     ??vPrimaryBlockTimeTestTask_32:
   \   00000208   0023               MOVS     R3,#+0
   \   0000020A   0022               MOVS     R2,#+0
   \   0000020C   01A9               ADD      R1,SP,#+4
   \   0000020E   ....               LDR      R0,??DataTable1
   \   00000210   0068               LDR      R0,[R0, #+0]
   \   00000212   ........           BL       xQueueAltGenericReceive
   \   00000216   0128               CMP      R0,#+1
   \   00000218   02D0               BEQ      ??vPrimaryBlockTimeTestTask_33
   \   0000021A   ....               LDR      R0,??DataTable2
   \   0000021C   0121               MOVS     R1,#+1
   \   0000021E   0160               STR      R1,[R0, #+0]
   \                     ??vPrimaryBlockTimeTestTask_33:
   \   00000220   ....               LDR      R0,??DataTable3
   \   00000222   0068               LDR      R0,[R0, #+0]
   \   00000224   5528               CMP      R0,#+85
   \   00000226   02D1               BNE      ??vPrimaryBlockTimeTestTask_34
   \   00000228   ....               LDR      R0,??DataTable2
   \   0000022A   0121               MOVS     R1,#+1
   \   0000022C   0160               STR      R1,[R0, #+0]
   \                     ??vPrimaryBlockTimeTestTask_34:
   \   0000022E   0521               MOVS     R1,#+5
   \   00000230   ....               LDR      R0,??DataTable1_3
   \   00000232   0068               LDR      R0,[R0, #+0]
   \   00000234   ........           BL       vTaskPrioritySet
   \   00000238   ....               LDR      R0,??DataTable3
   \   0000023A   0068               LDR      R0,[R0, #+0]
   \   0000023C   5528               CMP      R0,#+85
   \   0000023E   02D1               BNE      ??vPrimaryBlockTimeTestTask_35
   \   00000240   ....               LDR      R0,??DataTable2
   \   00000242   0121               MOVS     R1,#+1
   \   00000244   0160               STR      R1,[R0, #+0]
   \                     ??vPrimaryBlockTimeTestTask_35:
   \   00000246   0221               MOVS     R1,#+2
   \   00000248   ....               LDR      R0,??DataTable1_3
   \   0000024A   0068               LDR      R0,[R0, #+0]
   \   0000024C   ........           BL       vTaskPrioritySet
   \   00000250   0098               LDR      R0,[SP, #+0]
   \   00000252   401C               ADDS     R0,R0,#+1
   \   00000254   0090               STR      R0,[SP, #+0]
   \                     ??vPrimaryBlockTimeTestTask_30:
   \   00000256   0098               LDR      R0,[SP, #+0]
   \   00000258   0528               CMP      R0,#+5
   \   0000025A   C9DB               BLT      ??vPrimaryBlockTimeTestTask_31
   \                     ??vPrimaryBlockTimeTestTask_36:
   \   0000025C   ....               LDR      R0,??DataTable3
   \   0000025E   0068               LDR      R0,[R0, #+0]
   \   00000260   5528               CMP      R0,#+85
   \   00000262   00D1               BNE      .+4
   \   00000264   CFE6               B        ??vPrimaryBlockTimeTestTask_1
   \   00000266   1420               MOVS     R0,#+20
   \   00000268   ........           BL       vTaskDelay
   \   0000026C   F6E7               B        ??vPrimaryBlockTimeTestTask_36
    400          	}
    401          }
    402          /*-----------------------------------------------------------*/
    403          

   \                                 In section .text, align 2, keep-with-next
    404          static void vSecondaryBlockTimeTestTask( void *pvParameters )
    405          {
   \                     vSecondaryBlockTimeTestTask:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   82B0               SUB      SP,SP,#+8
    406          portTickType xTimeWhenBlocking, xBlockedTime;
    407          portBASE_TYPE xData;
    408          
    409          	#ifdef USE_STDIO
    410          	void vPrintDisplayMessage( const portCHAR * const * ppcMessageToSend );
    411          	
    412          		const portCHAR * const pcTaskStartMsg = "Alt secondary block time test started.\r\n";
    413          
    414          		/* Queue a message for printing to say the task has started. */
    415          		vPrintDisplayMessage( &pcTaskStartMsg );
    416          	#endif
    417          
    418          	( void ) pvParameters;
    419          
    420          	for( ;; )
    421          	{
    422          		/*********************************************************************
    423                  Test 1 and 2
    424          
    425          		This task does does not participate in these tests. */
    426          		vTaskSuspend( NULL );
   \                     ??vSecondaryBlockTimeTestTask_0:
   \   00000004   0020               MOVS     R0,#+0
   \   00000006   ........           BL       vTaskSuspend
    427          
    428          		/*********************************************************************
    429                  Test 3
    430          
    431          		The first thing we do is attempt to read from the queue.  It should be
    432          		full so we block.  Note the time before we block so we can check the
    433          		wake time is as per that expected. */
    434          		//portENTER_CRITICAL();
    435          		{
    436          			xTimeWhenBlocking = xTaskGetTickCount();
   \   0000000A   ........           BL       xTaskGetTickCount
   \   0000000E   0400               MOVS     R4,R0
    437          			
    438          			/* We should unblock after bktTIME_TO_BLOCK having not received
    439          			anything on the queue. */
    440          			xData = 0;
   \   00000010   0020               MOVS     R0,#+0
   \   00000012   0090               STR      R0,[SP, #+0]
    441          			xRunIndicator = bktRUN_INDICATOR;
   \   00000014   ....               LDR      R0,??DataTable3
   \   00000016   5521               MOVS     R1,#+85
   \   00000018   0160               STR      R1,[R0, #+0]
    442          			if( xQueueAltSendToBack( xTestQueue, &xData, bktTIME_TO_BLOCK ) != errQUEUE_FULL )
   \   0000001A   0023               MOVS     R3,#+0
   \   0000001C   AF22               MOVS     R2,#+175
   \   0000001E   6946               MOV      R1,SP
   \   00000020   ....               LDR      R0,??DataTable3_1
   \   00000022   0068               LDR      R0,[R0, #+0]
   \   00000024   ........           BL       xQueueAltGenericSend
   \   00000028   0028               CMP      R0,#+0
   \   0000002A   02D0               BEQ      ??vSecondaryBlockTimeTestTask_1
    443          			{
    444          				xErrorOccurred = pdTRUE;
   \   0000002C   ....               LDR      R0,??DataTable2
   \   0000002E   0121               MOVS     R1,#+1
   \   00000030   0160               STR      R1,[R0, #+0]
    445          			}
    446          
    447          			/* How long were we inside the send function? */
    448          			xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
   \                     ??vSecondaryBlockTimeTestTask_1:
   \   00000032   ........           BL       xTaskGetTickCount
   \   00000036   001B               SUBS     R0,R0,R4
    449          		}
    450          		//portEXIT_CRITICAL();
    451          
    452          		/* We should not have blocked for less time than bktTIME_TO_BLOCK. */
    453          		if( xBlockedTime < bktTIME_TO_BLOCK )
   \   00000038   AF28               CMP      R0,#+175
   \   0000003A   02D2               BCS      ??vSecondaryBlockTimeTestTask_2
    454          		{
    455          			xErrorOccurred = pdTRUE;
   \   0000003C   ....               LDR      R1,??DataTable2
   \   0000003E   0122               MOVS     R2,#+1
   \   00000040   0A60               STR      R2,[R1, #+0]
    456          		}
    457          
    458          		/* We should of not blocked for much longer than bktALLOWABLE_MARGIN
    459          		either.  A margin is permitted as we would not necessarily run as
    460          		soon as we unblocked. */
    461          		if( xBlockedTime > ( bktTIME_TO_BLOCK + bktALLOWABLE_MARGIN ) )
   \                     ??vSecondaryBlockTimeTestTask_2:
   \   00000042   BC28               CMP      R0,#+188
   \   00000044   02D3               BCC      ??vSecondaryBlockTimeTestTask_3
    462          		{
    463          			xErrorOccurred = pdTRUE;
   \   00000046   ....               LDR      R0,??DataTable2
   \   00000048   0121               MOVS     R1,#+1
   \   0000004A   0160               STR      R1,[R0, #+0]
    464          		}
    465          
    466          		/* Suspend ready for test 3. */
    467          		xRunIndicator = bktRUN_INDICATOR;
   \                     ??vSecondaryBlockTimeTestTask_3:
   \   0000004C   ....               LDR      R0,??DataTable3
   \   0000004E   5521               MOVS     R1,#+85
   \   00000050   0160               STR      R1,[R0, #+0]
    468          		vTaskSuspend( NULL );
   \   00000052   0020               MOVS     R0,#+0
   \   00000054   ........           BL       vTaskSuspend
    469          
    470          		/*********************************************************************
    471                  Test 4
    472          
    473          		As per test three, but with the send and receive reversed. */
    474          		//portENTER_CRITICAL();
    475          		{
    476          			xTimeWhenBlocking = xTaskGetTickCount();
   \   00000058   ........           BL       xTaskGetTickCount
   \   0000005C   0400               MOVS     R4,R0
    477          			
    478          			/* We should unblock after bktTIME_TO_BLOCK having not received
    479          			anything on the queue. */
    480          			xRunIndicator = bktRUN_INDICATOR;
   \   0000005E   ....               LDR      R0,??DataTable3
   \   00000060   5521               MOVS     R1,#+85
   \   00000062   0160               STR      R1,[R0, #+0]
    481          			if( xQueueAltReceive( xTestQueue, &xData, bktTIME_TO_BLOCK ) != errQUEUE_EMPTY )
   \   00000064   0023               MOVS     R3,#+0
   \   00000066   AF22               MOVS     R2,#+175
   \   00000068   6946               MOV      R1,SP
   \   0000006A   ....               LDR      R0,??DataTable3_1
   \   0000006C   0068               LDR      R0,[R0, #+0]
   \   0000006E   ........           BL       xQueueAltGenericReceive
   \   00000072   0028               CMP      R0,#+0
   \   00000074   02D0               BEQ      ??vSecondaryBlockTimeTestTask_4
    482          			{
    483          				xErrorOccurred = pdTRUE;
   \   00000076   ....               LDR      R0,??DataTable2
   \   00000078   0121               MOVS     R1,#+1
   \   0000007A   0160               STR      R1,[R0, #+0]
    484          			}
    485          
    486          			xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
   \                     ??vSecondaryBlockTimeTestTask_4:
   \   0000007C   ........           BL       xTaskGetTickCount
   \   00000080   001B               SUBS     R0,R0,R4
    487          		}
    488          		//portEXIT_CRITICAL();
    489          
    490          		/* We should not have blocked for less time than bktTIME_TO_BLOCK. */
    491          		if( xBlockedTime < bktTIME_TO_BLOCK )
   \   00000082   AF28               CMP      R0,#+175
   \   00000084   02D2               BCS      ??vSecondaryBlockTimeTestTask_5
    492          		{
    493          			xErrorOccurred = pdTRUE;
   \   00000086   ....               LDR      R1,??DataTable2
   \   00000088   0122               MOVS     R2,#+1
   \   0000008A   0A60               STR      R2,[R1, #+0]
    494          		}
    495          
    496          		/* We should of not blocked for much longer than bktALLOWABLE_MARGIN
    497          		either.  A margin is permitted as we would not necessarily run as soon
    498          		as we unblocked. */
    499          		if( xBlockedTime > ( bktTIME_TO_BLOCK + bktALLOWABLE_MARGIN ) )
   \                     ??vSecondaryBlockTimeTestTask_5:
   \   0000008C   BC28               CMP      R0,#+188
   \   0000008E   02D3               BCC      ??vSecondaryBlockTimeTestTask_6
    500          		{
    501          			xErrorOccurred = pdTRUE;
   \   00000090   ....               LDR      R0,??DataTable2
   \   00000092   0121               MOVS     R1,#+1
   \   00000094   0160               STR      R1,[R0, #+0]
    502          		}
    503          
    504          		xRunIndicator = bktRUN_INDICATOR;
   \                     ??vSecondaryBlockTimeTestTask_6:
   \   00000096   ....               LDR      R0,??DataTable3
   \   00000098   5521               MOVS     R1,#+85
   \   0000009A   0160               STR      R1,[R0, #+0]
    505          
    506          		xSecondaryCycles++;
   \   0000009C   ....               LDR      R0,??DataTable3_2
   \   0000009E   0068               LDR      R0,[R0, #+0]
   \   000000A0   401C               ADDS     R0,R0,#+1
   \   000000A2   ....               LDR      R1,??DataTable3_2
   \   000000A4   0860               STR      R0,[R1, #+0]
   \   000000A6   ADE7               B        ??vSecondaryBlockTimeTestTask_0
    507          	}
    508          }
    509          /*-----------------------------------------------------------*/
    510          

   \                                 In section .text, align 2, keep-with-next
    511          portBASE_TYPE xAreAltBlockTimeTestTasksStillRunning( void )
    512          {
   \                     xAreAltBlockTimeTestTasksStillRunning:
   \   00000000   00B5               PUSH     {LR}
    513          static portBASE_TYPE xLastPrimaryCycleCount = 0, xLastSecondaryCycleCount = 0;
    514          portBASE_TYPE xReturn = pdPASS;
   \   00000002   0120               MOVS     R0,#+1
    515          
    516          	/* Have both tasks performed at least one cycle since this function was
    517          	last called? */
    518          	if( xPrimaryCycles == xLastPrimaryCycleCount )
   \   00000004   ....               LDR      R1,??DataTable3_3
   \   00000006   0968               LDR      R1,[R1, #+0]
   \   00000008   ....               LDR      R2,??DataTable3_4
   \   0000000A   1268               LDR      R2,[R2, #+0]
   \   0000000C   9142               CMP      R1,R2
   \   0000000E   00D1               BNE      ??xAreAltBlockTimeTestTasksStillRunning_0
    519          	{
    520          		xReturn = pdFAIL;
   \   00000010   0020               MOVS     R0,#+0
    521          	}
    522          
    523          	if( xSecondaryCycles == xLastSecondaryCycleCount )
   \                     ??xAreAltBlockTimeTestTasksStillRunning_0:
   \   00000012   ....               LDR      R1,??DataTable3_2
   \   00000014   0968               LDR      R1,[R1, #+0]
   \   00000016   ....               LDR      R2,??DataTable3_5
   \   00000018   1268               LDR      R2,[R2, #+0]
   \   0000001A   9142               CMP      R1,R2
   \   0000001C   00D1               BNE      ??xAreAltBlockTimeTestTasksStillRunning_1
    524          	{
    525          		xReturn = pdFAIL;
   \   0000001E   0020               MOVS     R0,#+0
    526          	}
    527          
    528          	if( xErrorOccurred == pdTRUE )
   \                     ??xAreAltBlockTimeTestTasksStillRunning_1:
   \   00000020   ....               LDR      R1,??DataTable3_6
   \   00000022   0968               LDR      R1,[R1, #+0]
   \   00000024   0129               CMP      R1,#+1
   \   00000026   00D1               BNE      ??xAreAltBlockTimeTestTasksStillRunning_2
    529          	{
    530          		xReturn = pdFAIL;
   \   00000028   0020               MOVS     R0,#+0
    531          	}
    532          
    533          	xLastSecondaryCycleCount = xSecondaryCycles;
   \                     ??xAreAltBlockTimeTestTasksStillRunning_2:
   \   0000002A   ....               LDR      R1,??DataTable3_5
   \   0000002C   ....               LDR      R2,??DataTable3_2
   \   0000002E   1268               LDR      R2,[R2, #+0]
   \   00000030   0A60               STR      R2,[R1, #+0]
    534          	xLastPrimaryCycleCount = xPrimaryCycles;
   \   00000032   ....               LDR      R1,??DataTable3_4
   \   00000034   ....               LDR      R2,??DataTable3_3
   \   00000036   1268               LDR      R2,[R2, #+0]
   \   00000038   0A60               STR      R2,[R1, #+0]
    535          
    536          	return xReturn;
   \   0000003A   00BD               POP      {PC}             ;; return
    537          }

   \                                 In section .bss, align 4
   \                     ??xLastPrimaryCycleCount:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??xLastSecondaryCycleCount:
   \   00000000                      DS8 4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     xTestQueue

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   ........           DC32     `?<Constant "FBTest1">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   ........           DC32     vPrimaryBlockTimeTestTask

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   ........           DC32     xSecondary

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   ........           DC32     `?<Constant "FBTest2">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   ........           DC32     vSecondaryBlockTimeTestTask

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   ........           DC32     xPrimaryCycles

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     xErrorOccurred

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     xRunIndicator

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   ........           DC32     xTestQueue

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   ........           DC32     xSecondaryCycles

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   ........           DC32     xPrimaryCycles

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   ........           DC32     ??xLastPrimaryCycleCount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   ........           DC32     ??xLastSecondaryCycleCount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   ........           DC32     xErrorOccurred

   \                                 In section .rodata, align 4
   \                     `?<Constant "FBTest1">`:
   \   00000000   464254657374       DC8 "FBTest1"
   \              3100        

   \                                 In section .rodata, align 4
   \                     `?<Constant "FBTest2">`:
   \   00000000   464254657374       DC8 "FBTest2"
   \              3200        

   Maximum stack usage in bytes:

     Function                       .cstack
     --------                       -------
     vCreateAltBlockTimeTasks           24
     vPrimaryBlockTimeTestTask          24
     vSecondaryBlockTimeTestTask        16
     xAreAltBlockTimeTestTasksStillRunning
                                         4


   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     xTestQueue                        4
     xSecondary                        4
     xPrimaryCycles                    4
     xSecondaryCycles                  4
     xErrorOccurred                    4
     xRunIndicator                     4
     vCreateAltBlockTimeTasks         76
     vPrimaryBlockTimeTestTask       622
     vSecondaryBlockTimeTestTask     168
     xAreAltBlockTimeTestTasksStillRunning
                                      60
     xLastPrimaryCycleCount            4
     xLastSecondaryCycleCount          4
     ??DataTable1                      4
     ??DataTable1_1                    4
     ??DataTable1_2                    4
     ??DataTable1_3                    4
     ??DataTable1_4                    4
     ??DataTable1_5                    4
     ??DataTable1_6                    4
     ??DataTable2                      4
     ??DataTable3                      4
     ??DataTable3_1                    4
     ??DataTable3_2                    4
     ??DataTable3_3                    4
     ??DataTable3_4                    4
     ??DataTable3_5                    4
     ??DataTable3_6                    4
     ?<Constant "FBTest1">             8
     ?<Constant "FBTest2">             8

 
  32 bytes in section .bss
  16 bytes in section .rodata
 986 bytes in section .text
 
 986 bytes of CODE  memory
  16 bytes of CONST memory
  32 bytes of DATA  memory

Errors: none
Warnings: none
