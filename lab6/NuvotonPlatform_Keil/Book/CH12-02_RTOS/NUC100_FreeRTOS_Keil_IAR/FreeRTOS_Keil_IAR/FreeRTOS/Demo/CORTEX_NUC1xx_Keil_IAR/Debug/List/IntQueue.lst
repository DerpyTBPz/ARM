###############################################################################
#                                                                             #
#                                                       06/Jul/2010  14:34:51 #
# IAR ANSI C/C++ Compiler V5.50.0.21878/W32 EVALUATION for ARM                #
# Copyright (C) 1999-2010 IAR Systems AB.                                     #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\Common\Minimal\IntQue #
#                    ue.c                                                     #
#    Command line =  E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\Common\Minimal\IntQue #
#                    ue.c -D IAR_ARM_CM0 -lCN E:\FreeRTOS_Keil_IAR\FreeRTOS\D #
#                    emo\CORTEX_NUC1xx_Keil_IAR\Debug\List\ --diag_suppress   #
#                    Pe550,Pa082,Pa039 -o E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\ #
#                    CORTEX_NUC1xx_Keil_IAR\Debug\Obj\ --no_cse --no_unroll   #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M0  #
#                    -e --fpu=None --dlib_config "D:\Program                  #
#                    Files\ARM\INC\DLib_Config_Full.h" -I                     #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\..\common\include\ -I E:\FreeRTOS_Keil_IAR\FreeRTOS\De #
#                    mo\CORTEX_NUC1xx_Keil_IAR\..\..\source\include\ -I       #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\ -I E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_K #
#                    eil_IAR\NUC1xxBSP\NuvotonPlatform_Keil\Include\ -I       #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\NUC1xxBSP\NuvotonPlatform_Keil\Include\Driver\ -I      #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\NUC1xxBSP\CMSIS\CM0\ -I E:\FreeRTOS_Keil_IAR\FreeRTOS\ #
#                    Demo\CORTEX_NUC1xx_Keil_IAR\User_Demo\include\ -I        #
#                    "D:\Program Files\ARM\INC\" -Ol                          #
#    List file    =  E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\Debug\List\IntQueue.lst                                #
#    Object file  =  E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\Debug\Obj\IntQueue.o                                   #
#                                                                             #
#                                                                             #
###############################################################################

E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\Common\Minimal\IntQueue.c
      1          /*
      2              FreeRTOS V6.0.5 - Copyright (C) 2010 Real Time Engineers Ltd.
      3          
      4              ***************************************************************************
      5              *                                                                         *
      6              * If you are:                                                             *
      7              *                                                                         *
      8              *    + New to FreeRTOS,                                                   *
      9              *    + Wanting to learn FreeRTOS or multitasking in general quickly       *
     10              *    + Looking for basic training,                                        *
     11              *    + Wanting to improve your FreeRTOS skills and productivity           *
     12              *                                                                         *
     13              * then take a look at the FreeRTOS eBook                                  *
     14              *                                                                         *
     15              *        "Using the FreeRTOS Real Time Kernel - a Practical Guide"        *
     16              *                  http://www.FreeRTOS.org/Documentation                  *
     17              *                                                                         *
     18              * A pdf reference manual is also available.  Both are usually delivered   *
     19              * to your inbox within 20 minutes to two hours when purchased between 8am *
     20              * and 8pm GMT (although please allow up to 24 hours in case of            *
     21              * exceptional circumstances).  Thank you for your support!                *
     22              *                                                                         *
     23              ***************************************************************************
     24          
     25              This file is part of the FreeRTOS distribution.
     26          
     27              FreeRTOS is free software; you can redistribute it and/or modify it under
     28              the terms of the GNU General Public License (version 2) as published by the
     29              Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
     30              ***NOTE*** The exception to the GPL is included to allow you to distribute
     31              a combined work that includes FreeRTOS without being obliged to provide the
     32              source code for proprietary components outside of the FreeRTOS kernel.
     33              FreeRTOS is distributed in the hope that it will be useful, but WITHOUT
     34              ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
     35              FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
     36              more details. You should have received a copy of the GNU General Public 
     37              License and the FreeRTOS license exception along with FreeRTOS; if not it 
     38              can be viewed here: http://www.freertos.org/a00114.html and also obtained 
     39              by writing to Richard Barry, contact details for whom are available on the
     40              FreeRTOS WEB site.
     41          
     42              1 tab == 4 spaces!
     43          
     44              http://www.FreeRTOS.org - Documentation, latest information, license and
     45              contact details.
     46          
     47              http://www.SafeRTOS.com - A version that is certified for use in safety
     48              critical systems.
     49          
     50              http://www.OpenRTOS.com - Commercial support, development, porting,
     51              licensing and training services.
     52          */
     53          
     54          /*
     55           * This file defines one of the more complex set of demo/test tasks.  They are
     56           * designed to stress test the queue implementation though pseudo simultaneous
     57           * multiple reads and multiple writes from both tasks of varying priority and
     58           * interrupts.  The interrupts are prioritised such to ensure that nesting
     59           * occurs (for those ports that support it).
     60           *
     61           * The test ensures that, while being accessed from three tasks and two
     62           * interrupts, all the data sent to the queues is also received from
     63           * the same queue, and that no duplicate items are either sent or received.
     64           * The tests also ensure that a low priority task is never able to successfully
     65           * read from or write to a queue when a task of higher priority is attempting
     66           * the same operation.
     67           */
     68          
     69          /* Standard includes. */
     70          #include <string.h>

   \                                 In section .text, align 2
   \   __??Code16?? __intrinsic __code __interwork void *memset(void *, int, size_t)
   \                     memset:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   1000               MOVS     R0,R2
   \   00000006   0A00               MOVS     R2,R1
   \   00000008   0100               MOVS     R1,R0
   \   0000000A   2000               MOVS     R0,R4
   \   0000000C   ........           BL       __aeabi_memset
   \   00000010   2000               MOVS     R0,R4
   \   00000012   10BD               POP      {R4,PC}          ;; return
     71          
     72          /* SafeRTOS includes. */
     73          #include "FreeRTOS.h"
     74          #include "queue.h"
     75          #include "task.h"
     76          
     77          /* Demo app includes. */
     78          #include "IntQueue.h"
     79          #include "IntQueueTimer.h"
     80          
     81          /* Priorities used by test tasks. */
     82          #define intqHIGHER_PRIORITY		( configMAX_PRIORITIES - 2 )
     83          #define intqLOWER_PRIORITY		( tskIDLE_PRIORITY )
     84          
     85          /* The number of values to send/receive before checking that all values were
     86          processed as expected. */
     87          #define intqNUM_VALUES_TO_LOG	( 200 )
     88          #define intqSHORT_DELAY			( 75 )
     89          
     90          /* The value by which the value being sent to or received from a queue should
     91          increment past intqNUM_VALUES_TO_LOG before we check that all values have been
     92          sent/received correctly.  This is done to ensure that all tasks and interrupts
     93          accessing the queue have completed their accesses with the
     94          intqNUM_VALUES_TO_LOG range. */
     95          #define intqVALUE_OVERRUN		( 50 )
     96          
     97          /* The delay used by the polling task.  A short delay is used for code
     98          coverage. */
     99          #define intqONE_TICK_DELAY		( 1 )
    100          
    101          /* Each task and interrupt is given a unique identifier.  This value is used to
    102          identify which task sent or received each value.  The identifier is also used
    103          to distinguish between two tasks that are running the same task function. */
    104          #define intqHIGH_PRIORITY_TASK1	( ( unsigned portBASE_TYPE ) 1 )
    105          #define intqHIGH_PRIORITY_TASK2	( ( unsigned portBASE_TYPE ) 2 )
    106          #define intqLOW_PRIORITY_TASK	( ( unsigned portBASE_TYPE ) 3 )
    107          #define intqFIRST_INTERRUPT		( ( unsigned portBASE_TYPE ) 4 )
    108          #define intqSECOND_INTERRUPT	( ( unsigned portBASE_TYPE ) 5 )
    109          #define intqQUEUE_LENGTH		( ( unsigned portBASE_TYPE ) 10 )
    110          
    111          /* At least intqMIN_ACCEPTABLE_TASK_COUNT values should be sent to/received
    112          from each queue by each task, otherwise an error is detected. */
    113          #define intqMIN_ACCEPTABLE_TASK_COUNT		( 5 )
    114          
    115          /* Send the next value to the queue that is normally empty.  This is called
    116          from within the interrupts. */
    117          #define timerNORMALLY_EMPTY_TX()																							\
    118          	if( xQueueIsQueueFullFromISR( xNormallyEmptyQueue ) != pdTRUE )															\
    119          	{																														\
    120          	unsigned portBASE_TYPE uxSavedInterruptStatus;																			\
    121          		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();															\
    122          		{																													\
    123          			uxValueForNormallyEmptyQueue++;																					\
    124          			xQueueSendFromISR( xNormallyEmptyQueue, ( void * ) &uxValueForNormallyEmptyQueue, &xHigherPriorityTaskWoken );	\
    125          		}																													\
    126          		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );														\
    127          	}																														\
    128          
    129          /* Send the next value to the queue that is normally full.  This is called
    130          from within the interrupts. */
    131          #define timerNORMALLY_FULL_TX()																								\
    132          	if( xQueueIsQueueFullFromISR( xNormallyFullQueue ) != pdTRUE )															\
    133          	{																														\
    134          	unsigned portBASE_TYPE uxSavedInterruptStatus;																			\
    135          		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();															\
    136          		{																													\
    137          			uxValueForNormallyFullQueue++;																					\
    138          			xQueueSendFromISR( xNormallyFullQueue, ( void * ) &uxValueForNormallyFullQueue, &xHigherPriorityTaskWoken ); 	\
    139          		}																													\
    140          		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );														\
    141          	}																														\
    142          
    143          /* Receive a value from the normally empty queue.  This is called from within
    144          an interrupt. */
    145          #define timerNORMALLY_EMPTY_RX()																			\
    146          	if( xQueueReceiveFromISR( xNormallyEmptyQueue, &uxRxedValue, &xHigherPriorityTaskWoken ) != pdPASS )	\
    147          	{																										\
    148          		prvQueueAccessLogError( __LINE__ );																	\
    149          	}																										\
    150          	else																									\
    151          	{																										\
    152          		prvRecordValue_NormallyEmpty( uxRxedValue, intqSECOND_INTERRUPT );									\
    153          	}
    154          
    155          /* Receive a value from the normally full queue.  This is called from within
    156          an interrupt. */
    157          #define timerNORMALLY_FULL_RX()																				\
    158          	if( xQueueReceiveFromISR( xNormallyFullQueue, &uxRxedValue, &xHigherPriorityTaskWoken ) == pdPASS )		\
    159          	{																										\
    160          		prvRecordValue_NormallyFull( uxRxedValue, intqSECOND_INTERRUPT );									\
    161          	}																										\
    162          
    163          
    164          /*-----------------------------------------------------------*/
    165          
    166          /* The two queues used by the test. */

   \                                 In section .bss, align 4
    167          static xQueueHandle xNormallyEmptyQueue, xNormallyFullQueue;
   \                     xNormallyEmptyQueue:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     xNormallyFullQueue:
   \   00000000                      DS8 4
    168          
    169          /* Variables used to detect a stall in one of the tasks. */

   \                                 In section .bss, align 4
    170          static unsigned portBASE_TYPE uxHighPriorityLoops1 = 0, uxHighPriorityLoops2 = 0, uxLowPriorityLoops1 = 0, uxLowPriorityLoops2 = 0;
   \                     uxHighPriorityLoops1:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     uxHighPriorityLoops2:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     uxLowPriorityLoops1:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     uxLowPriorityLoops2:
   \   00000000                      DS8 4
    171          
    172          /* Any unexpected behaviour sets xErrorStatus to fail and log the line that
    173          caused the error in xErrorLine. */

   \                                 In section .data, align 4
    174          static portBASE_TYPE xErrorStatus = pdPASS;
   \                     xErrorStatus:
   \   00000000   01000000           DC32 1

   \                                 In section .bss, align 4
    175          static unsigned portBASE_TYPE xErrorLine = ( unsigned portBASE_TYPE ) 0;
   \                     xErrorLine:
   \   00000000                      DS8 4
    176          
    177          /* Used for sequencing between tasks. */

   \                                 In section .bss, align 4
    178          static portBASE_TYPE xWasSuspended = pdFALSE;
   \                     xWasSuspended:
   \   00000000                      DS8 4
    179          
    180          /* The values that are sent to the queues.  An incremented value is sent each
    181          time to each queue. */

   \                                 In section .bss, align 4
    182          volatile unsigned portBASE_TYPE uxValueForNormallyEmptyQueue = 0, uxValueForNormallyFullQueue = 0;
   \                     uxValueForNormallyEmptyQueue:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     uxValueForNormallyFullQueue:
   \   00000000                      DS8 4
    183          
    184          /* A handle to some of the tasks is required so they can be suspended/resumed. */

   \                                 In section .bss, align 4
    185          xTaskHandle xHighPriorityNormallyEmptyTask1, xHighPriorityNormallyEmptyTask2, xHighPriorityNormallyFullTask1, xHighPriorityNormallyFullTask2;
   \                     xHighPriorityNormallyEmptyTask1:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     xHighPriorityNormallyEmptyTask2:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     xHighPriorityNormallyFullTask1:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     xHighPriorityNormallyFullTask2:
   \   00000000                      DS8 4
    186          
    187          /* When a value is received in a queue the value is ticked off in the array
    188          the array position of the value is set to a the identifier of the task or
    189          interrupt that accessed the queue.  This way missing or duplicate values can be
    190          detected. */

   \                                 In section .bss, align 4
    191          static unsigned portCHAR ucNormallyEmptyReceivedValues[ intqNUM_VALUES_TO_LOG ] = { 0 };
   \                     ucNormallyEmptyReceivedValues:
   \   00000000                      DS8 200

   \                                 In section .bss, align 4
    192          static unsigned portCHAR ucNormallyFullReceivedValues[ intqNUM_VALUES_TO_LOG ] = { 0 };
   \                     ucNormallyFullReceivedValues:
   \   00000000                      DS8 200
    193          
    194          /* The test tasks themselves. */
    195          static void prvLowerPriorityNormallyEmptyTask( void *pvParameters );
    196          static void prvLowerPriorityNormallyFullTask( void *pvParameters );
    197          static void prvHigherPriorityNormallyEmptyTask( void *pvParameters );
    198          static void prv1stHigherPriorityNormallyFullTask( void *pvParameters );
    199          static void prv2ndHigherPriorityNormallyFullTask( void *pvParameters );
    200          
    201          /* Used to mark the positions within the ucNormallyEmptyReceivedValues and
    202          ucNormallyFullReceivedValues arrays, while checking for duplicates. */
    203          static void prvRecordValue_NormallyEmpty( unsigned portBASE_TYPE uxValue, unsigned portBASE_TYPE uxSource );
    204          static void prvRecordValue_NormallyFull( unsigned portBASE_TYPE uxValue, unsigned portBASE_TYPE uxSource );
    205          
    206          /* Logs the line on which an error occurred. */
    207          static void prvQueueAccessLogError( unsigned portBASE_TYPE uxLine );
    208          
    209          /*-----------------------------------------------------------*/
    210          

   \                                 In section .text, align 2, keep-with-next
    211          void vStartInterruptQueueTasks( void )
    212          {
   \                     vStartInterruptQueueTasks:
   \   00000000   00B5               PUSH     {LR}
   \   00000002   85B0               SUB      SP,SP,#+20
    213          	/* Start the test tasks. */
    214          	xTaskCreate( prvHigherPriorityNormallyEmptyTask, ( signed portCHAR * ) "H1QRx", configMINIMAL_STACK_SIZE, ( void * ) intqHIGH_PRIORITY_TASK1, intqHIGHER_PRIORITY, &xHighPriorityNormallyEmptyTask1 );
   \   00000004   0020               MOVS     R0,#+0
   \   00000006   0390               STR      R0,[SP, #+12]
   \   00000008   0020               MOVS     R0,#+0
   \   0000000A   0290               STR      R0,[SP, #+8]
   \   0000000C   ....               LDR      R0,??DataTable5
   \   0000000E   0190               STR      R0,[SP, #+4]
   \   00000010   0420               MOVS     R0,#+4
   \   00000012   0090               STR      R0,[SP, #+0]
   \   00000014   0123               MOVS     R3,#+1
   \   00000016   8022               MOVS     R2,#+128
   \   00000018   ....               LDR      R1,??DataTable5_1
   \   0000001A   ....               LDR      R0,??DataTable5_2
   \   0000001C   ........           BL       xTaskGenericCreate
    215          	xTaskCreate( prvHigherPriorityNormallyEmptyTask, ( signed portCHAR * ) "H2QRx", configMINIMAL_STACK_SIZE, ( void * ) intqHIGH_PRIORITY_TASK2, intqHIGHER_PRIORITY, &xHighPriorityNormallyEmptyTask2 );
   \   00000020   0020               MOVS     R0,#+0
   \   00000022   0390               STR      R0,[SP, #+12]
   \   00000024   0020               MOVS     R0,#+0
   \   00000026   0290               STR      R0,[SP, #+8]
   \   00000028   ....               LDR      R0,??DataTable5_3
   \   0000002A   0190               STR      R0,[SP, #+4]
   \   0000002C   0420               MOVS     R0,#+4
   \   0000002E   0090               STR      R0,[SP, #+0]
   \   00000030   0223               MOVS     R3,#+2
   \   00000032   8022               MOVS     R2,#+128
   \   00000034   ....               LDR      R1,??DataTable5_4
   \   00000036   ....               LDR      R0,??DataTable5_2
   \   00000038   ........           BL       xTaskGenericCreate
    216          	xTaskCreate( prvLowerPriorityNormallyEmptyTask, ( signed portCHAR * ) "LQRx", configMINIMAL_STACK_SIZE, NULL, intqLOWER_PRIORITY, NULL );
   \   0000003C   0020               MOVS     R0,#+0
   \   0000003E   0390               STR      R0,[SP, #+12]
   \   00000040   0020               MOVS     R0,#+0
   \   00000042   0290               STR      R0,[SP, #+8]
   \   00000044   0020               MOVS     R0,#+0
   \   00000046   0190               STR      R0,[SP, #+4]
   \   00000048   0020               MOVS     R0,#+0
   \   0000004A   0090               STR      R0,[SP, #+0]
   \   0000004C   0023               MOVS     R3,#+0
   \   0000004E   8022               MOVS     R2,#+128
   \   00000050   ....               LDR      R1,??DataTable5_5
   \   00000052   ....               LDR      R0,??DataTable5_6
   \   00000054   ........           BL       xTaskGenericCreate
    217          	xTaskCreate( prv1stHigherPriorityNormallyFullTask, ( signed portCHAR * ) "H1QTx", configMINIMAL_STACK_SIZE, ( void * ) intqHIGH_PRIORITY_TASK1, intqHIGHER_PRIORITY, &xHighPriorityNormallyFullTask1 );
   \   00000058   0020               MOVS     R0,#+0
   \   0000005A   0390               STR      R0,[SP, #+12]
   \   0000005C   0020               MOVS     R0,#+0
   \   0000005E   0290               STR      R0,[SP, #+8]
   \   00000060   ....               LDR      R0,??DataTable5_7
   \   00000062   0190               STR      R0,[SP, #+4]
   \   00000064   0420               MOVS     R0,#+4
   \   00000066   0090               STR      R0,[SP, #+0]
   \   00000068   0123               MOVS     R3,#+1
   \   0000006A   8022               MOVS     R2,#+128
   \   0000006C   ....               LDR      R1,??DataTable5_8
   \   0000006E   ....               LDR      R0,??DataTable5_9
   \   00000070   ........           BL       xTaskGenericCreate
    218          	xTaskCreate( prv2ndHigherPriorityNormallyFullTask, ( signed portCHAR * ) "H1QTx", configMINIMAL_STACK_SIZE, ( void * ) intqHIGH_PRIORITY_TASK2, intqHIGHER_PRIORITY, &xHighPriorityNormallyFullTask2 );
   \   00000074   0020               MOVS     R0,#+0
   \   00000076   0390               STR      R0,[SP, #+12]
   \   00000078   0020               MOVS     R0,#+0
   \   0000007A   0290               STR      R0,[SP, #+8]
   \   0000007C   ....               LDR      R0,??DataTable5_10
   \   0000007E   0190               STR      R0,[SP, #+4]
   \   00000080   0420               MOVS     R0,#+4
   \   00000082   0090               STR      R0,[SP, #+0]
   \   00000084   0223               MOVS     R3,#+2
   \   00000086   8022               MOVS     R2,#+128
   \   00000088   ....               LDR      R1,??DataTable5_8
   \   0000008A   ....               LDR      R0,??DataTable5_11
   \   0000008C   ........           BL       xTaskGenericCreate
    219          	xTaskCreate( prvLowerPriorityNormallyFullTask, ( signed portCHAR * ) "LQRx", configMINIMAL_STACK_SIZE, NULL, intqLOWER_PRIORITY, NULL );
   \   00000090   0020               MOVS     R0,#+0
   \   00000092   0390               STR      R0,[SP, #+12]
   \   00000094   0020               MOVS     R0,#+0
   \   00000096   0290               STR      R0,[SP, #+8]
   \   00000098   0020               MOVS     R0,#+0
   \   0000009A   0190               STR      R0,[SP, #+4]
   \   0000009C   0020               MOVS     R0,#+0
   \   0000009E   0090               STR      R0,[SP, #+0]
   \   000000A0   0023               MOVS     R3,#+0
   \   000000A2   8022               MOVS     R2,#+128
   \   000000A4   ....               LDR      R1,??DataTable5_5
   \   000000A6   ....               LDR      R0,??DataTable5_12
   \   000000A8   ........           BL       xTaskGenericCreate
    220          
    221          	/* Create the queues that are accessed by multiple tasks and multiple
    222          	interrupts. */
    223          	xNormallyFullQueue = xQueueCreate( intqQUEUE_LENGTH, ( unsigned portBASE_TYPE ) sizeof( unsigned portBASE_TYPE ) );
   \   000000AC   0421               MOVS     R1,#+4
   \   000000AE   0A20               MOVS     R0,#+10
   \   000000B0   ........           BL       xQueueCreate
   \   000000B4   ....               LDR      R1,??DataTable5_13
   \   000000B6   0860               STR      R0,[R1, #+0]
    224          	xNormallyEmptyQueue = xQueueCreate( intqQUEUE_LENGTH, ( unsigned portBASE_TYPE ) sizeof( unsigned portBASE_TYPE ) );
   \   000000B8   0421               MOVS     R1,#+4
   \   000000BA   0A20               MOVS     R0,#+10
   \   000000BC   ........           BL       xQueueCreate
   \   000000C0   ....               LDR      R1,??DataTable6
   \   000000C2   0860               STR      R0,[R1, #+0]
    225          
    226          	/* vQueueAddToRegistry() adds the queue to the queue registry, if one is
    227          	in use.  The queue registry is provided as a means for kernel aware
    228          	debuggers to locate queues and has no purpose if a kernel aware debugger
    229          	is not being used.  The call to vQueueAddToRegistry() will be removed
    230          	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is
    231          	defined to be less than 1. */
    232          	vQueueAddToRegistry( xNormallyFullQueue, ( signed portCHAR * ) "NormallyFull" );
    233          	vQueueAddToRegistry( xNormallyEmptyQueue, ( signed portCHAR * ) "NormallyEmpty" );
    234          }
   \   000000C4   05B0               ADD      SP,SP,#+20
   \   000000C6   00BD               POP      {PC}             ;; return
    235          /*-----------------------------------------------------------*/
    236          

   \                                 In section .text, align 2, keep-with-next
    237          static void prvRecordValue_NormallyFull( unsigned portBASE_TYPE uxValue, unsigned portBASE_TYPE uxSource )
    238          {
   \                     prvRecordValue_NormallyFull:
   \   00000000   38B5               PUSH     {R3-R5,LR}
   \   00000002   0500               MOVS     R5,R0
   \   00000004   0C00               MOVS     R4,R1
    239          	if( uxValue < intqNUM_VALUES_TO_LOG )
   \   00000006   C82D               CMP      R5,#+200
   \   00000008   08D2               BCS      ??prvRecordValue_NormallyFull_0
    240          	{
    241          		/* We don't expect to receive the same value twice, so if the value
    242          		has already been marked as received an error has occurred. */
    243          		if( ucNormallyFullReceivedValues[ uxValue ] != 0x00 )
   \   0000000A   ....               LDR      R0,??DataTable6_1
   \   0000000C   405D               LDRB     R0,[R0, R5]
   \   0000000E   0028               CMP      R0,#+0
   \   00000010   02D0               BEQ      ??prvRecordValue_NormallyFull_1
    244          		{
    245          			prvQueueAccessLogError( __LINE__ );
   \   00000012   F520               MOVS     R0,#+245
   \   00000014   ........           BL       prvQueueAccessLogError
    246          		}
    247          
    248          		/* Log that this value has been received. */
    249          		ucNormallyFullReceivedValues[ uxValue ] = uxSource;
   \                     ??prvRecordValue_NormallyFull_1:
   \   00000018   ....               LDR      R0,??DataTable6_1
   \   0000001A   4455               STRB     R4,[R0, R5]
    250          	}
    251          }
   \                     ??prvRecordValue_NormallyFull_0:
   \   0000001C   31BD               POP      {R0,R4,R5,PC}    ;; return
    252          /*-----------------------------------------------------------*/
    253          

   \                                 In section .text, align 2, keep-with-next
    254          static void prvRecordValue_NormallyEmpty( unsigned portBASE_TYPE uxValue, unsigned portBASE_TYPE uxSource )
    255          {
   \                     prvRecordValue_NormallyEmpty:
   \   00000000   38B5               PUSH     {R3-R5,LR}
   \   00000002   0500               MOVS     R5,R0
   \   00000004   0C00               MOVS     R4,R1
    256          	if( uxValue < intqNUM_VALUES_TO_LOG )
   \   00000006   C82D               CMP      R5,#+200
   \   00000008   09D2               BCS      ??prvRecordValue_NormallyEmpty_0
    257          	{
    258          		/* We don't expect to receive the same value twice, so if the value
    259          		has already been marked as received an error has occurred. */
    260          		if( ucNormallyEmptyReceivedValues[ uxValue ] != 0x00 )
   \   0000000A   ....               LDR      R0,??DataTable6_2
   \   0000000C   405D               LDRB     R0,[R0, R5]
   \   0000000E   0028               CMP      R0,#+0
   \   00000010   03D0               BEQ      ??prvRecordValue_NormallyEmpty_1
    261          		{
    262          			prvQueueAccessLogError( __LINE__ );
   \   00000012   8320               MOVS     R0,#+131
   \   00000014   4000               LSLS     R0,R0,#+1        ;; #+262
   \   00000016   ........           BL       prvQueueAccessLogError
    263          		}
    264          
    265          		/* Log that this value has been received. */
    266          		ucNormallyEmptyReceivedValues[ uxValue ] = uxSource;
   \                     ??prvRecordValue_NormallyEmpty_1:
   \   0000001A   ....               LDR      R0,??DataTable6_2
   \   0000001C   4455               STRB     R4,[R0, R5]
    267          	}
    268          }
   \                     ??prvRecordValue_NormallyEmpty_0:
   \   0000001E   31BD               POP      {R0,R4,R5,PC}    ;; return
    269          /*-----------------------------------------------------------*/
    270          

   \                                 In section .text, align 2, keep-with-next
    271          static void prvQueueAccessLogError( unsigned portBASE_TYPE uxLine )
    272          {
    273          	/* Latch the line number that caused the error. */
    274          	xErrorLine = uxLine;
   \                     prvQueueAccessLogError:
   \   00000000   ....               LDR      R1,??DataTable6_3
   \   00000002   0860               STR      R0,[R1, #+0]
    275          	xErrorStatus = pdFAIL;
   \   00000004   ....               LDR      R0,??DataTable7
   \   00000006   0021               MOVS     R1,#+0
   \   00000008   0160               STR      R1,[R0, #+0]
    276          }
   \   0000000A   7047               BX       LR               ;; return
    277          /*-----------------------------------------------------------*/
    278          

   \                                 In section .text, align 2, keep-with-next
    279          static void prvHigherPriorityNormallyEmptyTask( void *pvParameters )
    280          {
   \                     prvHigherPriorityNormallyEmptyTask:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   82B0               SUB      SP,SP,#+8
    281          unsigned portBASE_TYPE uxRxed, ux, uxTask1, uxTask2, uxErrorCount1 = 0, uxErrorCount2 = 0;
   \   00000004   0020               MOVS     R0,#+0
   \   00000006   0090               STR      R0,[SP, #+0]
   \   00000008   0027               MOVS     R7,#+0
    282          
    283          	/* The timer should not be started until after the scheduler has started.
    284          	More than one task is running this code so we check the parameter value
    285          	to determine which task should start the timer. */
    286          	if( ( unsigned portBASE_TYPE ) pvParameters == intqHIGH_PRIORITY_TASK1 )
   \   0000000A   0298               LDR      R0,[SP, #+8]
   \   0000000C   0128               CMP      R0,#+1
   \   0000000E   17D1               BNE      ??prvHigherPriorityNormallyEmptyTask_0
    287          	{
    288          		vInitialiseTimerForIntQueueTest();
   \   00000010   ........           BL       vInitialiseTimerForIntQueueTest
   \   00000014   14E0               B        ??prvHigherPriorityNormallyEmptyTask_0
    289          	}
    290          
    291          	for( ;; )
    292          	{
    293          		/* Block waiting to receive a value from the normally empty queue.
    294          		Interrupts will write to the queue so we should receive a value. */
    295          		if( xQueueReceive( xNormallyEmptyQueue, &uxRxed, intqSHORT_DELAY ) != pdPASS )
    296          		{
    297          			prvQueueAccessLogError( __LINE__ );
    298          		}
    299          		else
    300          		{
    301          			/* Note which value was received so we can check all expected
    302          			values are received and no values are duplicated. */
    303          			prvRecordValue_NormallyEmpty( uxRxed, ( unsigned portBASE_TYPE ) pvParameters );
    304          		}
    305          
    306          		/* Ensure the other task running this code gets a chance to execute. */
    307          		taskYIELD();
    308          
    309          		if( ( unsigned portBASE_TYPE ) pvParameters == intqHIGH_PRIORITY_TASK1 )
    310          		{
    311          			/* Have we received all the expected values? */
    312          			if( uxValueForNormallyEmptyQueue > ( intqNUM_VALUES_TO_LOG + intqVALUE_OVERRUN ) )
    313          			{
    314          				vTaskSuspend( xHighPriorityNormallyEmptyTask2 );
    315          
    316          				uxTask1 = 0;
    317          				uxTask2 = 0;
    318          
    319          				/* Loop through the array, checking that both tasks have
    320          				placed values into the array, and that no values are missing.
    321          				Start at 1 as we expect position 0 to be unused. */
    322          				for( ux = 1; ux < intqNUM_VALUES_TO_LOG; ux++ )
    323          				{
    324          					if( ucNormallyEmptyReceivedValues[ ux ] == 0 )
    325          					{
    326          						/* A value is missing. */
    327          						prvQueueAccessLogError( __LINE__ );
    328          					}
    329          					else
    330          					{
    331          						if( ucNormallyEmptyReceivedValues[ ux ] == intqHIGH_PRIORITY_TASK1 )
    332          						{
    333          							/* Value was placed into the array by task 1. */
    334          							uxTask1++;
    335          						}
    336          						else if( ucNormallyEmptyReceivedValues[ ux ] == intqHIGH_PRIORITY_TASK2 )
    337          						{
    338          							/* Value was placed into the array by task 2. */
    339          							uxTask2++;
    340          						}
    341          					}
    342          				}
    343          
    344          				if( uxTask1 < intqMIN_ACCEPTABLE_TASK_COUNT )
    345          				{
    346          					/* Only task 2 seemed to log any values. */
    347          					uxErrorCount1++;
    348          					if( uxErrorCount1 > 2 )
    349          					{
    350          						prvQueueAccessLogError( __LINE__ );
    351          					}
    352          				}
    353          				else
    354          				{
    355          					uxErrorCount1 = 0;
    356          				}
    357          
    358          				if( uxTask2 < intqMIN_ACCEPTABLE_TASK_COUNT  )
    359          				{
    360          					/* Only task 1 seemed to log any values. */
    361          					uxErrorCount2++;
    362          					if( uxErrorCount2 > 2 )
    363          					{
    364          						prvQueueAccessLogError( __LINE__ );
    365          					}
    366          				}
    367          				else
    368          				{
    369          					uxErrorCount2 = 0;
   \                     ??prvHigherPriorityNormallyEmptyTask_1:
   \   00000016   0027               MOVS     R7,#+0
    370          				}
    371          
    372          				/* Clear the array again, ready to start a new cycle. */
    373          				memset( ucNormallyEmptyReceivedValues, 0x00, sizeof( ucNormallyEmptyReceivedValues ) );
   \                     ??prvHigherPriorityNormallyEmptyTask_2:
   \   00000018   C822               MOVS     R2,#+200
   \   0000001A   0021               MOVS     R1,#+0
   \   0000001C   ....               LDR      R0,??DataTable6_2
   \   0000001E   ........           BL       memset
    374          
    375          				uxHighPriorityLoops1++;
   \   00000022   ....               LDR      R0,??DataTable6_4
   \   00000024   0068               LDR      R0,[R0, #+0]
   \   00000026   401C               ADDS     R0,R0,#+1
   \   00000028   ....               LDR      R1,??DataTable6_4
   \   0000002A   0860               STR      R0,[R1, #+0]
    376          				uxValueForNormallyEmptyQueue = 0;
   \   0000002C   ....               LDR      R0,??DataTable6_5
   \   0000002E   0021               MOVS     R1,#+0
   \   00000030   0160               STR      R1,[R0, #+0]
    377          
    378          				/* Suspend ourselves, allowing the lower priority task to
    379          				actually receive something from the queue.  Until now it
    380          				will have been prevented from doing so by the higher
    381          				priority tasks.  The lower priority task will resume us
    382          				if it receives something.  We will then resume the other
    383          				higher priority task. */
    384          				vTaskSuspend( NULL );
   \   00000032   0020               MOVS     R0,#+0
   \   00000034   ........           BL       vTaskSuspend
    385          				vTaskResume( xHighPriorityNormallyEmptyTask2 );
   \   00000038   ....               LDR      R0,??DataTable5_3
   \   0000003A   0068               LDR      R0,[R0, #+0]
   \   0000003C   ........           BL       vTaskResume
   \                     ??prvHigherPriorityNormallyEmptyTask_0:
   \   00000040   0023               MOVS     R3,#+0
   \   00000042   4B22               MOVS     R2,#+75
   \   00000044   01A9               ADD      R1,SP,#+4
   \   00000046   ....               LDR      R0,??DataTable6
   \   00000048   0068               LDR      R0,[R0, #+0]
   \   0000004A   ........           BL       xQueueGenericReceive
   \   0000004E   0128               CMP      R0,#+1
   \   00000050   04D0               BEQ      ??prvHigherPriorityNormallyEmptyTask_3
   \   00000052   FF20               MOVS     R0,#+255
   \   00000054   2A30               ADDS     R0,R0,#+42       ;; #+297
   \   00000056   ........           BL       prvQueueAccessLogError
   \   0000005A   03E0               B        ??prvHigherPriorityNormallyEmptyTask_4
   \                     ??prvHigherPriorityNormallyEmptyTask_3:
   \   0000005C   0299               LDR      R1,[SP, #+8]
   \   0000005E   0198               LDR      R0,[SP, #+4]
   \   00000060   ........           BL       prvRecordValue_NormallyEmpty
   \                     ??prvHigherPriorityNormallyEmptyTask_4:
   \   00000064   ........           BL       vPortYieldFromISR
   \   00000068   0298               LDR      R0,[SP, #+8]
   \   0000006A   0128               CMP      R0,#+1
   \   0000006C   E8D1               BNE      ??prvHigherPriorityNormallyEmptyTask_0
   \   0000006E   ....               LDR      R0,??DataTable6_5
   \   00000070   0068               LDR      R0,[R0, #+0]
   \   00000072   FB28               CMP      R0,#+251
   \   00000074   E4D3               BCC      ??prvHigherPriorityNormallyEmptyTask_0
   \   00000076   ....               LDR      R0,??DataTable5_3
   \   00000078   0068               LDR      R0,[R0, #+0]
   \   0000007A   ........           BL       vTaskSuspend
   \   0000007E   0024               MOVS     R4,#+0
   \   00000080   0025               MOVS     R5,#+0
   \   00000082   0126               MOVS     R6,#+1
   \   00000084   05E0               B        ??prvHigherPriorityNormallyEmptyTask_5
   \                     ??prvHigherPriorityNormallyEmptyTask_6:
   \   00000086   ....               LDR      R0,??DataTable6_2
   \   00000088   805D               LDRB     R0,[R0, R6]
   \   0000008A   0228               CMP      R0,#+2
   \   0000008C   00D1               BNE      ??prvHigherPriorityNormallyEmptyTask_7
   \   0000008E   6D1C               ADDS     R5,R5,#+1
   \                     ??prvHigherPriorityNormallyEmptyTask_7:
   \   00000090   761C               ADDS     R6,R6,#+1
   \                     ??prvHigherPriorityNormallyEmptyTask_5:
   \   00000092   C82E               CMP      R6,#+200
   \   00000094   0ED2               BCS      ??prvHigherPriorityNormallyEmptyTask_8
   \   00000096   ....               LDR      R0,??DataTable6_2
   \   00000098   805D               LDRB     R0,[R0, R6]
   \   0000009A   0028               CMP      R0,#+0
   \   0000009C   04D1               BNE      ??prvHigherPriorityNormallyEmptyTask_9
   \   0000009E   FF20               MOVS     R0,#+255
   \   000000A0   4830               ADDS     R0,R0,#+72       ;; #+327
   \   000000A2   ........           BL       prvQueueAccessLogError
   \   000000A6   F3E7               B        ??prvHigherPriorityNormallyEmptyTask_7
   \                     ??prvHigherPriorityNormallyEmptyTask_9:
   \   000000A8   ....               LDR      R0,??DataTable6_2
   \   000000AA   805D               LDRB     R0,[R0, R6]
   \   000000AC   0128               CMP      R0,#+1
   \   000000AE   EAD1               BNE      ??prvHigherPriorityNormallyEmptyTask_6
   \   000000B0   641C               ADDS     R4,R4,#+1
   \   000000B2   EDE7               B        ??prvHigherPriorityNormallyEmptyTask_7
   \                     ??prvHigherPriorityNormallyEmptyTask_8:
   \   000000B4   052C               CMP      R4,#+5
   \   000000B6   0AD2               BCS      ??prvHigherPriorityNormallyEmptyTask_10
   \   000000B8   0098               LDR      R0,[SP, #+0]
   \   000000BA   401C               ADDS     R0,R0,#+1
   \   000000BC   0090               STR      R0,[SP, #+0]
   \   000000BE   0098               LDR      R0,[SP, #+0]
   \   000000C0   0328               CMP      R0,#+3
   \   000000C2   06D3               BCC      ??prvHigherPriorityNormallyEmptyTask_11
   \   000000C4   AF20               MOVS     R0,#+175
   \   000000C6   4000               LSLS     R0,R0,#+1        ;; #+350
   \   000000C8   ........           BL       prvQueueAccessLogError
   \   000000CC   01E0               B        ??prvHigherPriorityNormallyEmptyTask_11
   \                     ??prvHigherPriorityNormallyEmptyTask_10:
   \   000000CE   0020               MOVS     R0,#+0
   \   000000D0   0090               STR      R0,[SP, #+0]
   \                     ??prvHigherPriorityNormallyEmptyTask_11:
   \   000000D2   052D               CMP      R5,#+5
   \   000000D4   9FD2               BCS      ??prvHigherPriorityNormallyEmptyTask_1
   \   000000D6   7F1C               ADDS     R7,R7,#+1
   \   000000D8   032F               CMP      R7,#+3
   \   000000DA   9DD3               BCC      ??prvHigherPriorityNormallyEmptyTask_2
   \   000000DC   B620               MOVS     R0,#+182
   \   000000DE   4000               LSLS     R0,R0,#+1        ;; #+364
   \   000000E0   ........           BL       prvQueueAccessLogError
   \   000000E4   98E7               B        ??prvHigherPriorityNormallyEmptyTask_2
    386          			}
    387          		}
    388          	}
    389          }
    390          /*-----------------------------------------------------------*/
    391          

   \                                 In section .text, align 2, keep-with-next
    392          static void prvLowerPriorityNormallyEmptyTask( void *pvParameters )
    393          {
   \                     prvLowerPriorityNormallyEmptyTask:
   \   00000000   00B5               PUSH     {LR}
   \   00000002   83B0               SUB      SP,SP,#+12
    394          unsigned portBASE_TYPE uxValue, uxRxed;
    395          portBASE_TYPE xQueueStatus;
    396          
    397          	/* The parameters are not being used so avoid compiler warnings. */
    398          	( void ) pvParameters;
   \   00000004   16E0               B        ??prvLowerPriorityNormallyEmptyTask_0
    399          
    400          	for( ;; )
    401          	{
    402          		if( ( xQueueStatus = xQueueReceive( xNormallyEmptyQueue, &uxRxed, intqONE_TICK_DELAY ) ) != errQUEUE_EMPTY )
    403          		{
    404          			/* We should only obtain a value when the high priority task is
    405          			suspended. */
    406          			if( xTaskIsTaskSuspended( xHighPriorityNormallyEmptyTask1 ) == pdFALSE )
   \                     ??prvLowerPriorityNormallyEmptyTask_1:
   \   00000006   ....               LDR      R0,??DataTable5
   \   00000008   0068               LDR      R0,[R0, #+0]
   \   0000000A   ........           BL       xTaskIsTaskSuspended
   \   0000000E   0028               CMP      R0,#+0
   \   00000010   03D1               BNE      ??prvLowerPriorityNormallyEmptyTask_2
    407          			{
    408          				prvQueueAccessLogError( __LINE__ );
   \   00000012   CC20               MOVS     R0,#+204
   \   00000014   4000               LSLS     R0,R0,#+1        ;; #+408
   \   00000016   ........           BL       prvQueueAccessLogError
    409          			}
    410          
    411          			prvRecordValue_NormallyEmpty( uxRxed, intqLOW_PRIORITY_TASK );
   \                     ??prvLowerPriorityNormallyEmptyTask_2:
   \   0000001A   0321               MOVS     R1,#+3
   \   0000001C   0098               LDR      R0,[SP, #+0]
   \   0000001E   ........           BL       prvRecordValue_NormallyEmpty
    412          
    413          			/* Wake the higher priority task again. */
    414          			vTaskResume( xHighPriorityNormallyEmptyTask1 );
   \   00000022   ....               LDR      R0,??DataTable5
   \   00000024   0068               LDR      R0,[R0, #+0]
   \   00000026   ........           BL       vTaskResume
    415          			uxLowPriorityLoops1++;
   \   0000002A   ....               LDR      R0,??DataTable8
   \   0000002C   0068               LDR      R0,[R0, #+0]
   \   0000002E   401C               ADDS     R0,R0,#+1
   \   00000030   ....               LDR      R1,??DataTable8
   \   00000032   0860               STR      R0,[R1, #+0]
    416          		}
   \                     ??prvLowerPriorityNormallyEmptyTask_0:
   \   00000034   0023               MOVS     R3,#+0
   \   00000036   0122               MOVS     R2,#+1
   \   00000038   6946               MOV      R1,SP
   \   0000003A   ....               LDR      R0,??DataTable7_1
   \   0000003C   0068               LDR      R0,[R0, #+0]
   \   0000003E   ........           BL       xQueueGenericReceive
   \   00000042   0028               CMP      R0,#+0
   \   00000044   DFD1               BNE      ??prvLowerPriorityNormallyEmptyTask_1
    417          		else
    418          		{
    419          			/* Raise our priority while we send so we can preempt the higher
    420          			priority task, and ensure we get the Tx value into the queue. */
    421          			vTaskPrioritySet( NULL, intqHIGHER_PRIORITY + 1 );
   \   00000046   0521               MOVS     R1,#+5
   \   00000048   0020               MOVS     R0,#+0
   \   0000004A   ........           BL       vTaskPrioritySet
    422          
    423          			portENTER_CRITICAL();
   \   0000004E   ........           BL       vPortEnterCritical
    424          			{
    425          				uxValueForNormallyEmptyQueue++;
   \   00000052   ....               LDR      R0,??DataTable6_5
   \   00000054   0068               LDR      R0,[R0, #+0]
   \   00000056   401C               ADDS     R0,R0,#+1
   \   00000058   ....               LDR      R1,??DataTable6_5
   \   0000005A   0860               STR      R0,[R1, #+0]
    426          				uxValue = uxValueForNormallyEmptyQueue;
   \   0000005C   ....               LDR      R0,??DataTable6_5
   \   0000005E   0068               LDR      R0,[R0, #+0]
   \   00000060   0190               STR      R0,[SP, #+4]
    427          			}
    428          			portEXIT_CRITICAL();
   \   00000062   ........           BL       vPortExitCritical
    429          
    430          			if( xQueueSend( xNormallyEmptyQueue, &uxValue, portMAX_DELAY ) != pdPASS )
   \   00000066   0023               MOVS     R3,#+0
   \   00000068   0022               MOVS     R2,#+0
   \   0000006A   D243               MVNS     R2,R2            ;; #-1
   \   0000006C   01A9               ADD      R1,SP,#+4
   \   0000006E   ....               LDR      R0,??DataTable7_1
   \   00000070   0068               LDR      R0,[R0, #+0]
   \   00000072   ........           BL       xQueueGenericSend
   \   00000076   0128               CMP      R0,#+1
   \   00000078   03D0               BEQ      ??prvLowerPriorityNormallyEmptyTask_3
    431          			{
    432          				prvQueueAccessLogError( __LINE__ );
   \   0000007A   D820               MOVS     R0,#+216
   \   0000007C   4000               LSLS     R0,R0,#+1        ;; #+432
   \   0000007E   ........           BL       prvQueueAccessLogError
    433          			}
    434          
    435          			vTaskPrioritySet( NULL, intqLOWER_PRIORITY );
   \                     ??prvLowerPriorityNormallyEmptyTask_3:
   \   00000082   0021               MOVS     R1,#+0
   \   00000084   0020               MOVS     R0,#+0
   \   00000086   ........           BL       vTaskPrioritySet
   \   0000008A   D3E7               B        ??prvLowerPriorityNormallyEmptyTask_0
    436          		}
    437          	}
    438          }
    439          /*-----------------------------------------------------------*/
    440          

   \                                 In section .text, align 2, keep-with-next
    441          static void prv1stHigherPriorityNormallyFullTask( void *pvParameters )
    442          {
   \                     prv1stHigherPriorityNormallyFullTask:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   82B0               SUB      SP,SP,#+8
    443          unsigned portBASE_TYPE uxValueToTx, ux;
    444          portBASE_TYPE xQueueStatus;
    445          
    446          	/* The parameters are not being used so avoid compiler warnings. */
    447          	( void ) pvParameters;
    448          
    449          	/* Make sure the queue starts full or near full.  >> 1 as there are two
    450          	high priority tasks. */
    451          	for( ux = 0; ux < ( intqQUEUE_LENGTH >> 1 ); ux++ )
   \   00000004   0024               MOVS     R4,#+0
   \   00000006   13E0               B        ??prv1stHigherPriorityNormallyFullTask_0
    452          	{
    453          		portENTER_CRITICAL();
   \                     ??prv1stHigherPriorityNormallyFullTask_1:
   \   00000008   ........           BL       vPortEnterCritical
    454          		{
    455          			uxValueForNormallyFullQueue++;
   \   0000000C   ....               LDR      R0,??DataTable9
   \   0000000E   0068               LDR      R0,[R0, #+0]
   \   00000010   401C               ADDS     R0,R0,#+1
   \   00000012   ....               LDR      R1,??DataTable9
   \   00000014   0860               STR      R0,[R1, #+0]
    456          			uxValueToTx = uxValueForNormallyFullQueue;
   \   00000016   ....               LDR      R0,??DataTable9
   \   00000018   0068               LDR      R0,[R0, #+0]
   \   0000001A   0090               STR      R0,[SP, #+0]
    457          		}
    458          		portEXIT_CRITICAL();
   \   0000001C   ........           BL       vPortExitCritical
    459          
    460          		xQueueSend( xNormallyFullQueue, &uxValueToTx, intqSHORT_DELAY );
   \   00000020   0023               MOVS     R3,#+0
   \   00000022   4B22               MOVS     R2,#+75
   \   00000024   6946               MOV      R1,SP
   \   00000026   ....               LDR      R0,??DataTable9_1
   \   00000028   0068               LDR      R0,[R0, #+0]
   \   0000002A   ........           BL       xQueueGenericSend
    461          	}
   \   0000002E   641C               ADDS     R4,R4,#+1
   \                     ??prv1stHigherPriorityNormallyFullTask_0:
   \   00000030   052C               CMP      R4,#+5
   \   00000032   E9D3               BCC      ??prv1stHigherPriorityNormallyFullTask_1
    462          
    463          	for( ;; )
    464          	{
    465          		portENTER_CRITICAL();
   \                     ??prv1stHigherPriorityNormallyFullTask_2:
   \   00000034   ........           BL       vPortEnterCritical
    466          		{
    467          			uxValueForNormallyFullQueue++;
   \   00000038   ....               LDR      R0,??DataTable9
   \   0000003A   0068               LDR      R0,[R0, #+0]
   \   0000003C   401C               ADDS     R0,R0,#+1
   \   0000003E   ....               LDR      R1,??DataTable9
   \   00000040   0860               STR      R0,[R1, #+0]
    468          			uxValueToTx = uxValueForNormallyFullQueue;
   \   00000042   ....               LDR      R0,??DataTable9
   \   00000044   0068               LDR      R0,[R0, #+0]
   \   00000046   0090               STR      R0,[SP, #+0]
    469          		}
    470          		portEXIT_CRITICAL();
   \   00000048   ........           BL       vPortExitCritical
    471          
    472          		if( ( xQueueStatus = xQueueSend( xNormallyFullQueue, &uxValueToTx, intqSHORT_DELAY ) ) != pdPASS )
   \   0000004C   0023               MOVS     R3,#+0
   \   0000004E   4B22               MOVS     R2,#+75
   \   00000050   6946               MOV      R1,SP
   \   00000052   ....               LDR      R0,??DataTable9_1
   \   00000054   0068               LDR      R0,[R0, #+0]
   \   00000056   ........           BL       xQueueGenericSend
   \   0000005A   0128               CMP      R0,#+1
   \   0000005C   03D0               BEQ      ??prv1stHigherPriorityNormallyFullTask_3
    473          		{
    474          			/* intqHIGH_PRIORITY_TASK2 is never suspended so we would not
    475          			expect it to ever time out. */
    476          			prvQueueAccessLogError( __LINE__ );
   \   0000005E   EE20               MOVS     R0,#+238
   \   00000060   4000               LSLS     R0,R0,#+1        ;; #+476
   \   00000062   ........           BL       prvQueueAccessLogError
    477          		}
    478          
    479          		/* Allow the other task running this code to run. */
    480          		taskYIELD();
   \                     ??prv1stHigherPriorityNormallyFullTask_3:
   \   00000066   ........           BL       vPortYieldFromISR
    481          
    482          		/* Have all the expected values been sent to the queue? */
    483          		if( uxValueToTx > ( intqNUM_VALUES_TO_LOG + intqVALUE_OVERRUN ) )
   \   0000006A   0098               LDR      R0,[SP, #+0]
   \   0000006C   FB28               CMP      R0,#+251
   \   0000006E   E1D3               BCC      ??prv1stHigherPriorityNormallyFullTask_2
    484          		{
    485          			/* Make sure the other high priority task completes its send of
    486          			any values below intqNUM_VALUE_TO_LOG. */
    487          			vTaskDelay( intqSHORT_DELAY );
   \   00000070   4B20               MOVS     R0,#+75
   \   00000072   ........           BL       vTaskDelay
    488          
    489          			vTaskSuspend( xHighPriorityNormallyFullTask2 );
   \   00000076   ....               LDR      R0,??DataTable9_2
   \   00000078   0068               LDR      R0,[R0, #+0]
   \   0000007A   ........           BL       vTaskSuspend
    490          
    491          			if( xWasSuspended == pdTRUE )
   \   0000007E   ....               LDR      R0,??DataTable9_3
   \   00000080   0068               LDR      R0,[R0, #+0]
   \   00000082   0128               CMP      R0,#+1
   \   00000084   03D1               BNE      ??prv1stHigherPriorityNormallyFullTask_4
    492          			{
    493          				/* We would have expected the other high priority task to have
    494          				set this back to false by now. */
    495          				prvQueueAccessLogError( __LINE__ );
   \   00000086   FF20               MOVS     R0,#+255
   \   00000088   F030               ADDS     R0,R0,#+240      ;; #+495
   \   0000008A   ........           BL       prvQueueAccessLogError
    496          			}
    497          
    498          			/* Set the suspended flag so an error is not logged if the other
    499          			task recognises a time out when it is unsuspended. */
    500          			xWasSuspended = pdTRUE;
   \                     ??prv1stHigherPriorityNormallyFullTask_4:
   \   0000008E   ....               LDR      R0,??DataTable9_3
   \   00000090   0121               MOVS     R1,#+1
   \   00000092   0160               STR      R1,[R0, #+0]
    501          
    502          			/* Start at 1 as we expect position 0 to be unused. */
    503          			for( ux = 1; ux < intqNUM_VALUES_TO_LOG; ux++ )
   \   00000094   0124               MOVS     R4,#+1
   \   00000096   08E0               B        ??prv1stHigherPriorityNormallyFullTask_5
    504          			{
    505          				if( ucNormallyFullReceivedValues[ ux ] == 0 )
   \                     ??prv1stHigherPriorityNormallyFullTask_6:
   \   00000098   ....               LDR      R0,??DataTable6_1
   \   0000009A   005D               LDRB     R0,[R0, R4]
   \   0000009C   0028               CMP      R0,#+0
   \   0000009E   03D1               BNE      ??prv1stHigherPriorityNormallyFullTask_7
    506          				{
    507          					/* A value was missing. */
    508          					prvQueueAccessLogError( __LINE__ );
   \   000000A0   FE20               MOVS     R0,#+254
   \   000000A2   4000               LSLS     R0,R0,#+1        ;; #+508
   \   000000A4   ........           BL       prvQueueAccessLogError
    509          				}
    510          			}
   \                     ??prv1stHigherPriorityNormallyFullTask_7:
   \   000000A8   641C               ADDS     R4,R4,#+1
   \                     ??prv1stHigherPriorityNormallyFullTask_5:
   \   000000AA   C82C               CMP      R4,#+200
   \   000000AC   F4D3               BCC      ??prv1stHigherPriorityNormallyFullTask_6
    511          
    512          			/* Reset the array ready for the next cycle. */
    513          			memset( ucNormallyFullReceivedValues, 0x00, sizeof( ucNormallyFullReceivedValues ) );
   \   000000AE   C822               MOVS     R2,#+200
   \   000000B0   0021               MOVS     R1,#+0
   \   000000B2   ....               LDR      R0,??DataTable6_1
   \   000000B4   ........           BL       memset
    514          
    515          			uxHighPriorityLoops2++;
   \   000000B8   ....               LDR      R0,??DataTable9_4
   \   000000BA   0068               LDR      R0,[R0, #+0]
   \   000000BC   401C               ADDS     R0,R0,#+1
   \   000000BE   ....               LDR      R1,??DataTable9_4
   \   000000C0   0860               STR      R0,[R1, #+0]
    516          			uxValueForNormallyFullQueue = 0;
   \   000000C2   ....               LDR      R0,??DataTable9
   \   000000C4   0021               MOVS     R1,#+0
   \   000000C6   0160               STR      R1,[R0, #+0]
    517          
    518          			/* Suspend ourselves, allowing the lower priority task to
    519          			actually receive something from the queue.  Until now it
    520          			will have been prevented from doing so by the higher
    521          			priority tasks.  The lower priority task will resume us
    522          			if it receives something.  We will then resume the other
    523          			higher priority task. */
    524          			vTaskSuspend( NULL );
   \   000000C8   0020               MOVS     R0,#+0
   \   000000CA   ........           BL       vTaskSuspend
    525          			vTaskResume( xHighPriorityNormallyFullTask2 );
   \   000000CE   ....               LDR      R0,??DataTable9_2
   \   000000D0   0068               LDR      R0,[R0, #+0]
   \   000000D2   ........           BL       vTaskResume
   \   000000D6   ADE7               B        ??prv1stHigherPriorityNormallyFullTask_2
    526          		}
    527          	}
    528          }
    529          /*-----------------------------------------------------------*/
    530          

   \                                 In section .text, align 2, keep-with-next
    531          static void prv2ndHigherPriorityNormallyFullTask( void *pvParameters )
    532          {
   \                     prv2ndHigherPriorityNormallyFullTask:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   82B0               SUB      SP,SP,#+8
    533          unsigned portBASE_TYPE uxValueToTx, ux;
    534          portBASE_TYPE xQueueStatus;
    535          
    536          	/* The parameters are not being used so avoid compiler warnings. */
    537          	( void ) pvParameters;
    538          
    539          	/* Make sure the queue starts full or near full.  >> 1 as there are two
    540          	high priority tasks. */
    541          	for( ux = 0; ux < ( intqQUEUE_LENGTH >> 1 ); ux++ )
   \   00000004   0024               MOVS     R4,#+0
   \   00000006   13E0               B        ??prv2ndHigherPriorityNormallyFullTask_0
    542          	{
    543          		portENTER_CRITICAL();
   \                     ??prv2ndHigherPriorityNormallyFullTask_1:
   \   00000008   ........           BL       vPortEnterCritical
    544          		{
    545          			uxValueForNormallyFullQueue++;
   \   0000000C   ....               LDR      R0,??DataTable9
   \   0000000E   0068               LDR      R0,[R0, #+0]
   \   00000010   401C               ADDS     R0,R0,#+1
   \   00000012   ....               LDR      R1,??DataTable9
   \   00000014   0860               STR      R0,[R1, #+0]
    546          			uxValueToTx = uxValueForNormallyFullQueue;
   \   00000016   ....               LDR      R0,??DataTable9
   \   00000018   0068               LDR      R0,[R0, #+0]
   \   0000001A   0090               STR      R0,[SP, #+0]
    547          		}
    548          		portEXIT_CRITICAL();
   \   0000001C   ........           BL       vPortExitCritical
    549          
    550          		xQueueSend( xNormallyFullQueue, &uxValueToTx, intqSHORT_DELAY );
   \   00000020   0023               MOVS     R3,#+0
   \   00000022   4B22               MOVS     R2,#+75
   \   00000024   6946               MOV      R1,SP
   \   00000026   ....               LDR      R0,??DataTable9_1
   \   00000028   0068               LDR      R0,[R0, #+0]
   \   0000002A   ........           BL       xQueueGenericSend
    551          	}
   \   0000002E   641C               ADDS     R4,R4,#+1
   \                     ??prv2ndHigherPriorityNormallyFullTask_0:
   \   00000030   052C               CMP      R4,#+5
   \   00000032   E9D3               BCC      ??prv2ndHigherPriorityNormallyFullTask_1
    552          
    553          	for( ;; )
    554          	{
    555          		portENTER_CRITICAL();
   \                     ??prv2ndHigherPriorityNormallyFullTask_2:
   \   00000034   ........           BL       vPortEnterCritical
    556          		{
    557          			uxValueForNormallyFullQueue++;
   \   00000038   ....               LDR      R0,??DataTable9
   \   0000003A   0068               LDR      R0,[R0, #+0]
   \   0000003C   401C               ADDS     R0,R0,#+1
   \   0000003E   ....               LDR      R1,??DataTable9
   \   00000040   0860               STR      R0,[R1, #+0]
    558          			uxValueToTx = uxValueForNormallyFullQueue;
   \   00000042   ....               LDR      R0,??DataTable9
   \   00000044   0068               LDR      R0,[R0, #+0]
   \   00000046   0090               STR      R0,[SP, #+0]
    559          		}
    560          		portEXIT_CRITICAL();
   \   00000048   ........           BL       vPortExitCritical
    561          
    562          		if( ( xQueueStatus = xQueueSend( xNormallyFullQueue, &uxValueToTx, intqSHORT_DELAY ) ) != pdPASS )
   \   0000004C   0023               MOVS     R3,#+0
   \   0000004E   4B22               MOVS     R2,#+75
   \   00000050   6946               MOV      R1,SP
   \   00000052   ....               LDR      R0,??DataTable9_1
   \   00000054   0068               LDR      R0,[R0, #+0]
   \   00000056   ........           BL       xQueueGenericSend
   \   0000005A   0128               CMP      R0,#+1
   \   0000005C   06D0               BEQ      ??prv2ndHigherPriorityNormallyFullTask_3
    563          		{
    564          			if( xWasSuspended != pdTRUE )
   \   0000005E   ....               LDR      R0,??DataTable9_3
   \   00000060   0068               LDR      R0,[R0, #+0]
   \   00000062   0128               CMP      R0,#+1
   \   00000064   02D0               BEQ      ??prv2ndHigherPriorityNormallyFullTask_3
    565          			{
    566          				/* It is ok to time out if the task has been suspended. */
    567          				prvQueueAccessLogError( __LINE__ );
   \   00000066   ....               LDR      R0,??DataTable9_5  ;; 0x237
   \   00000068   ........           BL       prvQueueAccessLogError
    568          			}
    569          		}
    570          
    571          		xWasSuspended = pdFALSE;
   \                     ??prv2ndHigherPriorityNormallyFullTask_3:
   \   0000006C   ....               LDR      R0,??DataTable9_3
   \   0000006E   0021               MOVS     R1,#+0
   \   00000070   0160               STR      R1,[R0, #+0]
    572          
    573          		taskYIELD();
   \   00000072   ........           BL       vPortYieldFromISR
   \   00000076   DDE7               B        ??prv2ndHigherPriorityNormallyFullTask_2
    574          	}
    575          }
    576          /*-----------------------------------------------------------*/
    577          

   \                                 In section .text, align 2, keep-with-next
    578          static void prvLowerPriorityNormallyFullTask( void *pvParameters )
    579          {
   \                     prvLowerPriorityNormallyFullTask:
   \   00000000   00B5               PUSH     {LR}
   \   00000002   83B0               SUB      SP,SP,#+12
    580          unsigned portBASE_TYPE uxValue, uxTxed = 9999;
   \   00000004   ....               LDR      R0,??DataTable9_6  ;; 0x270f
   \   00000006   0090               STR      R0,[SP, #+0]
    581          portBASE_TYPE xQueueStatus;
    582          
    583          	/* The parameters are not being used so avoid compiler warnings. */
    584          	( void ) pvParameters;
   \   00000008   11E0               B        ??prvLowerPriorityNormallyFullTask_0
    585          
    586          	for( ;; )
    587          	{
    588          		if( ( xQueueStatus = xQueueSend( xNormallyFullQueue, &uxTxed, intqONE_TICK_DELAY ) ) != errQUEUE_FULL )
    589          		{
    590          			/* We would only expect to succeed when the higher priority task
    591          			is suspended. */
    592          			if( xTaskIsTaskSuspended( xHighPriorityNormallyFullTask1 ) == pdFALSE )
   \                     ??prvLowerPriorityNormallyFullTask_1:
   \   0000000A   ....               LDR      R0,??DataTable10
   \   0000000C   0068               LDR      R0,[R0, #+0]
   \   0000000E   ........           BL       xTaskIsTaskSuspended
   \   00000012   0028               CMP      R0,#+0
   \   00000014   02D1               BNE      ??prvLowerPriorityNormallyFullTask_2
    593          			{
    594          				prvQueueAccessLogError( __LINE__ );
   \   00000016   ....               LDR      R0,??DataTable10_1  ;; 0x252
   \   00000018   ........           BL       prvQueueAccessLogError
    595          			}
    596          
    597          			vTaskResume( xHighPriorityNormallyFullTask1 );
   \                     ??prvLowerPriorityNormallyFullTask_2:
   \   0000001C   ....               LDR      R0,??DataTable10
   \   0000001E   0068               LDR      R0,[R0, #+0]
   \   00000020   ........           BL       vTaskResume
    598          			uxLowPriorityLoops2++;
   \   00000024   ....               LDR      R0,??DataTable10_2
   \   00000026   0068               LDR      R0,[R0, #+0]
   \   00000028   401C               ADDS     R0,R0,#+1
   \   0000002A   ....               LDR      R1,??DataTable10_2
   \   0000002C   0860               STR      R0,[R1, #+0]
    599          		}
   \                     ??prvLowerPriorityNormallyFullTask_0:
   \   0000002E   0023               MOVS     R3,#+0
   \   00000030   0122               MOVS     R2,#+1
   \   00000032   6946               MOV      R1,SP
   \   00000034   ....               LDR      R0,??DataTable9_1
   \   00000036   0068               LDR      R0,[R0, #+0]
   \   00000038   ........           BL       xQueueGenericSend
   \   0000003C   0028               CMP      R0,#+0
   \   0000003E   E4D1               BNE      ??prvLowerPriorityNormallyFullTask_1
    600          		else
    601          		{
    602          			/* Raise our priority while we receive so we can preempt the higher
    603          			priority task, and ensure we get the value from the queue. */
    604          			vTaskPrioritySet( NULL, intqHIGHER_PRIORITY + 1 );
   \   00000040   0521               MOVS     R1,#+5
   \   00000042   0020               MOVS     R0,#+0
   \   00000044   ........           BL       vTaskPrioritySet
    605          
    606          			if( xQueueReceive( xNormallyFullQueue, &uxValue, portMAX_DELAY ) != pdPASS )
   \   00000048   0023               MOVS     R3,#+0
   \   0000004A   0022               MOVS     R2,#+0
   \   0000004C   D243               MVNS     R2,R2            ;; #-1
   \   0000004E   01A9               ADD      R1,SP,#+4
   \   00000050   ....               LDR      R0,??DataTable9_1
   \   00000052   0068               LDR      R0,[R0, #+0]
   \   00000054   ........           BL       xQueueGenericReceive
   \   00000058   0128               CMP      R0,#+1
   \   0000005A   04D0               BEQ      ??prvLowerPriorityNormallyFullTask_3
    607          			{
    608          				prvQueueAccessLogError( __LINE__ );
   \   0000005C   9820               MOVS     R0,#+152
   \   0000005E   8000               LSLS     R0,R0,#+2        ;; #+608
   \   00000060   ........           BL       prvQueueAccessLogError
   \   00000064   03E0               B        ??prvLowerPriorityNormallyFullTask_4
    609          			}
    610          			else
    611          			{
    612          				prvRecordValue_NormallyFull( uxValue, intqLOW_PRIORITY_TASK );
   \                     ??prvLowerPriorityNormallyFullTask_3:
   \   00000066   0321               MOVS     R1,#+3
   \   00000068   0198               LDR      R0,[SP, #+4]
   \   0000006A   ........           BL       prvRecordValue_NormallyFull
    613          			}
    614          
    615          			vTaskPrioritySet( NULL, intqLOWER_PRIORITY );
   \                     ??prvLowerPriorityNormallyFullTask_4:
   \   0000006E   0021               MOVS     R1,#+0
   \   00000070   0020               MOVS     R0,#+0
   \   00000072   ........           BL       vTaskPrioritySet
   \   00000076   DAE7               B        ??prvLowerPriorityNormallyFullTask_0
    616          		}
    617          	}
    618          }
    619          /*-----------------------------------------------------------*/
    620          

   \                                 In section .text, align 2, keep-with-next
    621          portBASE_TYPE xFirstTimerHandler( void )
    622          {
   \                     xFirstTimerHandler:
   \   00000000   1CB5               PUSH     {R2-R4,LR}
    623          portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE, uxRxedValue;
   \   00000002   0020               MOVS     R0,#+0
   \   00000004   0090               STR      R0,[SP, #+0]
    624          static unsigned portBASE_TYPE uxNextOperation = 0;
    625          
    626          	/* Called from a timer interrupt.  Perform various read and write
    627          	accesses on the queues. */
    628          
    629          	uxNextOperation++;
   \   00000006   ....               LDR      R0,??DataTable10_3
   \   00000008   0068               LDR      R0,[R0, #+0]
   \   0000000A   401C               ADDS     R0,R0,#+1
   \   0000000C   ....               LDR      R1,??DataTable10_3
   \   0000000E   0860               STR      R0,[R1, #+0]
    630          
    631          	if( uxNextOperation & ( unsigned portBASE_TYPE ) 0x01 )
   \   00000010   ....               LDR      R0,??DataTable10_3
   \   00000012   0078               LDRB     R0,[R0, #+0]
   \   00000014   C007               LSLS     R0,R0,#+31
   \   00000016   45D5               BPL      ??xFirstTimerHandler_0
    632          	{
    633          		timerNORMALLY_EMPTY_TX();
   \   00000018   ....               LDR      R0,??DataTable10_4
   \   0000001A   0068               LDR      R0,[R0, #+0]
   \   0000001C   ........           BL       xQueueIsQueueFullFromISR
   \   00000020   0128               CMP      R0,#+1
   \   00000022   10D0               BEQ      ??xFirstTimerHandler_1
   \   00000024   0024               MOVS     R4,#+0
   \   00000026   ........           BL       vPortSetInterruptMask
   \   0000002A   ....               LDR      R0,??DataTable10_5
   \   0000002C   0068               LDR      R0,[R0, #+0]
   \   0000002E   401C               ADDS     R0,R0,#+1
   \   00000030   ....               LDR      R1,??DataTable10_5
   \   00000032   0860               STR      R0,[R1, #+0]
   \   00000034   0023               MOVS     R3,#+0
   \   00000036   6A46               MOV      R2,SP
   \   00000038   ....               LDR      R1,??DataTable10_5
   \   0000003A   ....               LDR      R0,??DataTable10_4
   \   0000003C   0068               LDR      R0,[R0, #+0]
   \   0000003E   ........           BL       xQueueGenericSendFromISR
   \   00000042   ........           BL       vPortClearInterruptMask
    634          		timerNORMALLY_EMPTY_TX();
   \                     ??xFirstTimerHandler_1:
   \   00000046   ....               LDR      R0,??DataTable10_4
   \   00000048   0068               LDR      R0,[R0, #+0]
   \   0000004A   ........           BL       xQueueIsQueueFullFromISR
   \   0000004E   0128               CMP      R0,#+1
   \   00000050   10D0               BEQ      ??xFirstTimerHandler_2
   \   00000052   0024               MOVS     R4,#+0
   \   00000054   ........           BL       vPortSetInterruptMask
   \   00000058   ....               LDR      R0,??DataTable10_5
   \   0000005A   0068               LDR      R0,[R0, #+0]
   \   0000005C   401C               ADDS     R0,R0,#+1
   \   0000005E   ....               LDR      R1,??DataTable10_5
   \   00000060   0860               STR      R0,[R1, #+0]
   \   00000062   0023               MOVS     R3,#+0
   \   00000064   6A46               MOV      R2,SP
   \   00000066   ....               LDR      R1,??DataTable10_5
   \   00000068   ....               LDR      R0,??DataTable10_4
   \   0000006A   0068               LDR      R0,[R0, #+0]
   \   0000006C   ........           BL       xQueueGenericSendFromISR
   \   00000070   ........           BL       vPortClearInterruptMask
    635          		timerNORMALLY_EMPTY_TX();
   \                     ??xFirstTimerHandler_2:
   \   00000074   ....               LDR      R0,??DataTable10_4
   \   00000076   0068               LDR      R0,[R0, #+0]
   \   00000078   ........           BL       xQueueIsQueueFullFromISR
   \   0000007C   0128               CMP      R0,#+1
   \   0000007E   35D0               BEQ      ??xFirstTimerHandler_3
   \   00000080   0024               MOVS     R4,#+0
   \   00000082   ........           BL       vPortSetInterruptMask
   \   00000086   ....               LDR      R0,??DataTable10_5
   \   00000088   0068               LDR      R0,[R0, #+0]
   \   0000008A   401C               ADDS     R0,R0,#+1
   \   0000008C   ....               LDR      R1,??DataTable10_5
   \   0000008E   0860               STR      R0,[R1, #+0]
   \   00000090   0023               MOVS     R3,#+0
   \   00000092   6A46               MOV      R2,SP
   \   00000094   ....               LDR      R1,??DataTable10_5
   \   00000096   ....               LDR      R0,??DataTable10_4
   \   00000098   0068               LDR      R0,[R0, #+0]
   \   0000009A   ........           BL       xQueueGenericSendFromISR
   \   0000009E   ........           BL       vPortClearInterruptMask
   \   000000A2   23E0               B        ??xFirstTimerHandler_3
    636          	}
    637          	else
    638          	{
    639          		timerNORMALLY_FULL_RX();
   \                     ??xFirstTimerHandler_0:
   \   000000A4   6A46               MOV      R2,SP
   \   000000A6   01A9               ADD      R1,SP,#+4
   \   000000A8   ....               LDR      R0,??DataTable9_1
   \   000000AA   0068               LDR      R0,[R0, #+0]
   \   000000AC   ........           BL       xQueueReceiveFromISR
   \   000000B0   0128               CMP      R0,#+1
   \   000000B2   03D1               BNE      ??xFirstTimerHandler_4
   \   000000B4   0521               MOVS     R1,#+5
   \   000000B6   0198               LDR      R0,[SP, #+4]
   \   000000B8   ........           BL       prvRecordValue_NormallyFull
    640          		timerNORMALLY_FULL_RX();
   \                     ??xFirstTimerHandler_4:
   \   000000BC   6A46               MOV      R2,SP
   \   000000BE   01A9               ADD      R1,SP,#+4
   \   000000C0   ....               LDR      R0,??DataTable9_1
   \   000000C2   0068               LDR      R0,[R0, #+0]
   \   000000C4   ........           BL       xQueueReceiveFromISR
   \   000000C8   0128               CMP      R0,#+1
   \   000000CA   03D1               BNE      ??xFirstTimerHandler_5
   \   000000CC   0521               MOVS     R1,#+5
   \   000000CE   0198               LDR      R0,[SP, #+4]
   \   000000D0   ........           BL       prvRecordValue_NormallyFull
    641          		timerNORMALLY_FULL_RX();
   \                     ??xFirstTimerHandler_5:
   \   000000D4   6A46               MOV      R2,SP
   \   000000D6   01A9               ADD      R1,SP,#+4
   \   000000D8   ....               LDR      R0,??DataTable9_1
   \   000000DA   0068               LDR      R0,[R0, #+0]
   \   000000DC   ........           BL       xQueueReceiveFromISR
   \   000000E0   0128               CMP      R0,#+1
   \   000000E2   03D1               BNE      ??xFirstTimerHandler_3
   \   000000E4   0521               MOVS     R1,#+5
   \   000000E6   0198               LDR      R0,[SP, #+4]
   \   000000E8   ........           BL       prvRecordValue_NormallyFull
    642          	}
    643          
    644          	return xHigherPriorityTaskWoken;
   \                     ??xFirstTimerHandler_3:
   \   000000EC   0098               LDR      R0,[SP, #+0]
   \   000000EE   16BD               POP      {R1,R2,R4,PC}    ;; return
    645          }

   \                                 In section .bss, align 4
   \                     ??uxNextOperation:
   \   00000000                      DS8 4
    646          /*-----------------------------------------------------------*/
    647          

   \                                 In section .text, align 2, keep-with-next
    648          portBASE_TYPE xSecondTimerHandler( void )
    649          {
   \                     xSecondTimerHandler:
   \   00000000   1CB5               PUSH     {R2-R4,LR}
    650          unsigned portBASE_TYPE uxRxedValue;
    651          portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
   \   00000002   0020               MOVS     R0,#+0
   \   00000004   0090               STR      R0,[SP, #+0]
    652          static unsigned portBASE_TYPE uxNextOperation = 0;
    653          
    654          	/* Called from a timer interrupt.  Perform various read and write
    655          	accesses on the queues. */
    656          
    657          	uxNextOperation++;
   \   00000006   ....               LDR      R0,??DataTable11
   \   00000008   0068               LDR      R0,[R0, #+0]
   \   0000000A   401C               ADDS     R0,R0,#+1
   \   0000000C   ....               LDR      R1,??DataTable11
   \   0000000E   0860               STR      R0,[R1, #+0]
    658          
    659          	if( uxNextOperation & ( unsigned portBASE_TYPE ) 0x01 )
   \   00000010   ....               LDR      R0,??DataTable11
   \   00000012   0078               LDRB     R0,[R0, #+0]
   \   00000014   C007               LSLS     R0,R0,#+31
   \   00000016   4FD5               BPL      ??xSecondTimerHandler_0
    660          	{
    661          		timerNORMALLY_EMPTY_TX();
   \   00000018   ....               LDR      R0,??DataTable10_4
   \   0000001A   0068               LDR      R0,[R0, #+0]
   \   0000001C   ........           BL       xQueueIsQueueFullFromISR
   \   00000020   0128               CMP      R0,#+1
   \   00000022   10D0               BEQ      ??xSecondTimerHandler_1
   \   00000024   0024               MOVS     R4,#+0
   \   00000026   ........           BL       vPortSetInterruptMask
   \   0000002A   ....               LDR      R0,??DataTable10_5
   \   0000002C   0068               LDR      R0,[R0, #+0]
   \   0000002E   401C               ADDS     R0,R0,#+1
   \   00000030   ....               LDR      R1,??DataTable10_5
   \   00000032   0860               STR      R0,[R1, #+0]
   \   00000034   0023               MOVS     R3,#+0
   \   00000036   6A46               MOV      R2,SP
   \   00000038   ....               LDR      R1,??DataTable10_5
   \   0000003A   ....               LDR      R0,??DataTable10_4
   \   0000003C   0068               LDR      R0,[R0, #+0]
   \   0000003E   ........           BL       xQueueGenericSendFromISR
   \   00000042   ........           BL       vPortClearInterruptMask
    662          		timerNORMALLY_EMPTY_TX();
   \                     ??xSecondTimerHandler_1:
   \   00000046   ....               LDR      R0,??DataTable10_4
   \   00000048   0068               LDR      R0,[R0, #+0]
   \   0000004A   ........           BL       xQueueIsQueueFullFromISR
   \   0000004E   0128               CMP      R0,#+1
   \   00000050   10D0               BEQ      ??xSecondTimerHandler_2
   \   00000052   0024               MOVS     R4,#+0
   \   00000054   ........           BL       vPortSetInterruptMask
   \   00000058   ....               LDR      R0,??DataTable10_5
   \   0000005A   0068               LDR      R0,[R0, #+0]
   \   0000005C   401C               ADDS     R0,R0,#+1
   \   0000005E   ....               LDR      R1,??DataTable10_5
   \   00000060   0860               STR      R0,[R1, #+0]
   \   00000062   0023               MOVS     R3,#+0
   \   00000064   6A46               MOV      R2,SP
   \   00000066   ....               LDR      R1,??DataTable10_5
   \   00000068   ....               LDR      R0,??DataTable10_4
   \   0000006A   0068               LDR      R0,[R0, #+0]
   \   0000006C   ........           BL       xQueueGenericSendFromISR
   \   00000070   ........           BL       vPortClearInterruptMask
    663          
    664          		timerNORMALLY_EMPTY_RX();
   \                     ??xSecondTimerHandler_2:
   \   00000074   6A46               MOV      R2,SP
   \   00000076   01A9               ADD      R1,SP,#+4
   \   00000078   ....               LDR      R0,??DataTable10_4
   \   0000007A   0068               LDR      R0,[R0, #+0]
   \   0000007C   ........           BL       xQueueReceiveFromISR
   \   00000080   0128               CMP      R0,#+1
   \   00000082   04D0               BEQ      ??xSecondTimerHandler_3
   \   00000084   A620               MOVS     R0,#+166
   \   00000086   8000               LSLS     R0,R0,#+2        ;; #+664
   \   00000088   ........           BL       prvQueueAccessLogError
   \   0000008C   03E0               B        ??xSecondTimerHandler_4
   \                     ??xSecondTimerHandler_3:
   \   0000008E   0521               MOVS     R1,#+5
   \   00000090   0198               LDR      R0,[SP, #+4]
   \   00000092   ........           BL       prvRecordValue_NormallyEmpty
    665          		timerNORMALLY_EMPTY_RX();
   \                     ??xSecondTimerHandler_4:
   \   00000096   6A46               MOV      R2,SP
   \   00000098   01A9               ADD      R1,SP,#+4
   \   0000009A   ....               LDR      R0,??DataTable10_4
   \   0000009C   0068               LDR      R0,[R0, #+0]
   \   0000009E   ........           BL       xQueueReceiveFromISR
   \   000000A2   0128               CMP      R0,#+1
   \   000000A4   03D0               BEQ      ??xSecondTimerHandler_5
   \   000000A6   ....               LDR      R0,??DataTable11_1  ;; 0x299
   \   000000A8   ........           BL       prvQueueAccessLogError
   \   000000AC   6CE0               B        ??xSecondTimerHandler_6
   \                     ??xSecondTimerHandler_5:
   \   000000AE   0521               MOVS     R1,#+5
   \   000000B0   0198               LDR      R0,[SP, #+4]
   \   000000B2   ........           BL       prvRecordValue_NormallyEmpty
   \   000000B6   67E0               B        ??xSecondTimerHandler_6
    666          	}
    667          	else
    668          	{
    669          		timerNORMALLY_FULL_RX();
   \                     ??xSecondTimerHandler_0:
   \   000000B8   6A46               MOV      R2,SP
   \   000000BA   01A9               ADD      R1,SP,#+4
   \   000000BC   ....               LDR      R0,??DataTable11_2
   \   000000BE   0068               LDR      R0,[R0, #+0]
   \   000000C0   ........           BL       xQueueReceiveFromISR
   \   000000C4   0128               CMP      R0,#+1
   \   000000C6   03D1               BNE      ??xSecondTimerHandler_7
   \   000000C8   0521               MOVS     R1,#+5
   \   000000CA   0198               LDR      R0,[SP, #+4]
   \   000000CC   ........           BL       prvRecordValue_NormallyFull
    670          		timerNORMALLY_FULL_TX();
   \                     ??xSecondTimerHandler_7:
   \   000000D0   ....               LDR      R0,??DataTable11_2
   \   000000D2   0068               LDR      R0,[R0, #+0]
   \   000000D4   ........           BL       xQueueIsQueueFullFromISR
   \   000000D8   0128               CMP      R0,#+1
   \   000000DA   10D0               BEQ      ??xSecondTimerHandler_8
   \   000000DC   0024               MOVS     R4,#+0
   \   000000DE   ........           BL       vPortSetInterruptMask
   \   000000E2   ....               LDR      R0,??DataTable11_3
   \   000000E4   0068               LDR      R0,[R0, #+0]
   \   000000E6   401C               ADDS     R0,R0,#+1
   \   000000E8   ....               LDR      R1,??DataTable11_3
   \   000000EA   0860               STR      R0,[R1, #+0]
   \   000000EC   0023               MOVS     R3,#+0
   \   000000EE   6A46               MOV      R2,SP
   \   000000F0   ....               LDR      R1,??DataTable11_3
   \   000000F2   ....               LDR      R0,??DataTable11_2
   \   000000F4   0068               LDR      R0,[R0, #+0]
   \   000000F6   ........           BL       xQueueGenericSendFromISR
   \   000000FA   ........           BL       vPortClearInterruptMask
    671          		timerNORMALLY_FULL_TX();
   \                     ??xSecondTimerHandler_8:
   \   000000FE   ....               LDR      R0,??DataTable11_2
   \   00000100   0068               LDR      R0,[R0, #+0]
   \   00000102   ........           BL       xQueueIsQueueFullFromISR
   \   00000106   0128               CMP      R0,#+1
   \   00000108   10D0               BEQ      ??xSecondTimerHandler_9
   \   0000010A   0024               MOVS     R4,#+0
   \   0000010C   ........           BL       vPortSetInterruptMask
   \   00000110   ....               LDR      R0,??DataTable11_3
   \   00000112   0068               LDR      R0,[R0, #+0]
   \   00000114   401C               ADDS     R0,R0,#+1
   \   00000116   ....               LDR      R1,??DataTable11_3
   \   00000118   0860               STR      R0,[R1, #+0]
   \   0000011A   0023               MOVS     R3,#+0
   \   0000011C   6A46               MOV      R2,SP
   \   0000011E   ....               LDR      R1,??DataTable11_3
   \   00000120   ....               LDR      R0,??DataTable11_2
   \   00000122   0068               LDR      R0,[R0, #+0]
   \   00000124   ........           BL       xQueueGenericSendFromISR
   \   00000128   ........           BL       vPortClearInterruptMask
    672          		timerNORMALLY_FULL_TX();
   \                     ??xSecondTimerHandler_9:
   \   0000012C   ....               LDR      R0,??DataTable11_2
   \   0000012E   0068               LDR      R0,[R0, #+0]
   \   00000130   ........           BL       xQueueIsQueueFullFromISR
   \   00000134   0128               CMP      R0,#+1
   \   00000136   10D0               BEQ      ??xSecondTimerHandler_10
   \   00000138   0024               MOVS     R4,#+0
   \   0000013A   ........           BL       vPortSetInterruptMask
   \   0000013E   ....               LDR      R0,??DataTable11_3
   \   00000140   0068               LDR      R0,[R0, #+0]
   \   00000142   401C               ADDS     R0,R0,#+1
   \   00000144   ....               LDR      R1,??DataTable11_3
   \   00000146   0860               STR      R0,[R1, #+0]
   \   00000148   0023               MOVS     R3,#+0
   \   0000014A   6A46               MOV      R2,SP
   \   0000014C   ....               LDR      R1,??DataTable11_3
   \   0000014E   ....               LDR      R0,??DataTable11_2
   \   00000150   0068               LDR      R0,[R0, #+0]
   \   00000152   ........           BL       xQueueGenericSendFromISR
   \   00000156   ........           BL       vPortClearInterruptMask
    673          		timerNORMALLY_FULL_TX();
   \                     ??xSecondTimerHandler_10:
   \   0000015A   ....               LDR      R0,??DataTable11_2
   \   0000015C   0068               LDR      R0,[R0, #+0]
   \   0000015E   ........           BL       xQueueIsQueueFullFromISR
   \   00000162   0128               CMP      R0,#+1
   \   00000164   10D0               BEQ      ??xSecondTimerHandler_6
   \   00000166   0024               MOVS     R4,#+0
   \   00000168   ........           BL       vPortSetInterruptMask
   \   0000016C   ....               LDR      R0,??DataTable11_3
   \   0000016E   0068               LDR      R0,[R0, #+0]
   \   00000170   401C               ADDS     R0,R0,#+1
   \   00000172   ....               LDR      R1,??DataTable11_3
   \   00000174   0860               STR      R0,[R1, #+0]
   \   00000176   0023               MOVS     R3,#+0
   \   00000178   6A46               MOV      R2,SP
   \   0000017A   ....               LDR      R1,??DataTable11_3
   \   0000017C   ....               LDR      R0,??DataTable11_2
   \   0000017E   0068               LDR      R0,[R0, #+0]
   \   00000180   ........           BL       xQueueGenericSendFromISR
   \   00000184   ........           BL       vPortClearInterruptMask
    674          	}
    675          
    676          	return xHigherPriorityTaskWoken;
   \                     ??xSecondTimerHandler_6:
   \   00000188   0098               LDR      R0,[SP, #+0]
   \   0000018A   16BD               POP      {R1,R2,R4,PC}    ;; return
    677          }

   \                                 In section .bss, align 4
   \                     ??uxNextOperation_1:
   \   00000000                      DS8 4
    678          /*-----------------------------------------------------------*/
    679          
    680          

   \                                 In section .text, align 2, keep-with-next
    681          portBASE_TYPE xAreIntQueueTasksStillRunning( void )
    682          {
   \                     xAreIntQueueTasksStillRunning:
   \   00000000   80B5               PUSH     {R7,LR}
    683          static unsigned portBASE_TYPE uxLastHighPriorityLoops1 = 0, uxLastHighPriorityLoops2 = 0, uxLastLowPriorityLoops1 = 0, uxLastLowPriorityLoops2 = 0;
    684          
    685          	/* xErrorStatus can be set outside of this function.  This function just
    686          	checks that all the tasks are still cycling. */
    687          
    688          	if( uxHighPriorityLoops1 == uxLastHighPriorityLoops1 )
   \   00000002   ....               LDR      R0,??DataTable11_4
   \   00000004   0068               LDR      R0,[R0, #+0]
   \   00000006   ....               LDR      R1,??DataTable11_5
   \   00000008   0968               LDR      R1,[R1, #+0]
   \   0000000A   8842               CMP      R0,R1
   \   0000000C   02D1               BNE      ??xAreIntQueueTasksStillRunning_0
    689          	{
    690          		/* The high priority 1 task has stalled. */
    691          		prvQueueAccessLogError( __LINE__ );
   \   0000000E   ....               LDR      R0,??DataTable11_6  ;; 0x2b3
   \   00000010   ........           BL       prvQueueAccessLogError
    692          	}
    693          
    694          	uxLastHighPriorityLoops1 = uxHighPriorityLoops1;
   \                     ??xAreIntQueueTasksStillRunning_0:
   \   00000014   ....               LDR      R0,??DataTable11_5
   \   00000016   ....               LDR      R1,??DataTable11_4
   \   00000018   0968               LDR      R1,[R1, #+0]
   \   0000001A   0160               STR      R1,[R0, #+0]
    695          
    696          	if( uxHighPriorityLoops2 == uxLastHighPriorityLoops2 )
   \   0000001C   ....               LDR      R0,??DataTable11_7
   \   0000001E   0068               LDR      R0,[R0, #+0]
   \   00000020   ....               LDR      R1,??DataTable11_8
   \   00000022   0968               LDR      R1,[R1, #+0]
   \   00000024   8842               CMP      R0,R1
   \   00000026   02D1               BNE      ??xAreIntQueueTasksStillRunning_1
    697          	{
    698          		/* The high priority 2 task has stalled. */
    699          		prvQueueAccessLogError( __LINE__ );
   \   00000028   ....               LDR      R0,??DataTable11_9  ;; 0x2bb
   \   0000002A   ........           BL       prvQueueAccessLogError
    700          	}
    701          
    702          	uxLastHighPriorityLoops2 = uxHighPriorityLoops2;
   \                     ??xAreIntQueueTasksStillRunning_1:
   \   0000002E   ....               LDR      R0,??DataTable11_8
   \   00000030   ....               LDR      R1,??DataTable11_7
   \   00000032   0968               LDR      R1,[R1, #+0]
   \   00000034   0160               STR      R1,[R0, #+0]
    703          
    704          	if( uxLowPriorityLoops1 == uxLastLowPriorityLoops1 )
   \   00000036   ....               LDR      R0,??DataTable11_10
   \   00000038   0068               LDR      R0,[R0, #+0]
   \   0000003A   ....               LDR      R1,??DataTable11_11
   \   0000003C   0968               LDR      R1,[R1, #+0]
   \   0000003E   8842               CMP      R0,R1
   \   00000040   02D1               BNE      ??xAreIntQueueTasksStillRunning_2
    705          	{
    706          		/* The low priority 1 task has stalled. */
    707          		prvQueueAccessLogError( __LINE__ );
   \   00000042   ....               LDR      R0,??DataTable11_12  ;; 0x2c3
   \   00000044   ........           BL       prvQueueAccessLogError
    708          	}
    709          
    710          	uxLastLowPriorityLoops1 = uxLowPriorityLoops1;
   \                     ??xAreIntQueueTasksStillRunning_2:
   \   00000048   ....               LDR      R0,??DataTable11_11
   \   0000004A   ....               LDR      R1,??DataTable11_10
   \   0000004C   0968               LDR      R1,[R1, #+0]
   \   0000004E   0160               STR      R1,[R0, #+0]
    711          
    712          	if( uxLowPriorityLoops2 == uxLastLowPriorityLoops2 )
   \   00000050   ....               LDR      R0,??DataTable11_13
   \   00000052   0068               LDR      R0,[R0, #+0]
   \   00000054   ....               LDR      R1,??DataTable11_14
   \   00000056   0968               LDR      R1,[R1, #+0]
   \   00000058   8842               CMP      R0,R1
   \   0000005A   02D1               BNE      ??xAreIntQueueTasksStillRunning_3
    713          	{
    714          		/* The low priority 2 task has stalled. */
    715          		prvQueueAccessLogError( __LINE__ );
   \   0000005C   ....               LDR      R0,??DataTable11_15  ;; 0x2cb
   \   0000005E   ........           BL       prvQueueAccessLogError
    716          	}
    717          
    718          	uxLastLowPriorityLoops2 = uxLowPriorityLoops2;
   \                     ??xAreIntQueueTasksStillRunning_3:
   \   00000062   ....               LDR      R0,??DataTable11_14
   \   00000064   ....               LDR      R1,??DataTable11_13
   \   00000066   0968               LDR      R1,[R1, #+0]
   \   00000068   0160               STR      R1,[R0, #+0]
    719          
    720          	return xErrorStatus;
   \   0000006A   ....               LDR      R0,??DataTable11_16
   \   0000006C   0068               LDR      R0,[R0, #+0]
   \   0000006E   02BD               POP      {R1,PC}          ;; return
    721          }

   \                                 In section .bss, align 4
   \                     ??uxLastHighPriorityLoops1:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??uxLastHighPriorityLoops2:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??uxLastLowPriorityLoops1:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??uxLastLowPriorityLoops2:
   \   00000000                      DS8 4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     xHighPriorityNormallyEmptyTask1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   ........           DC32     `?<Constant "H1QRx">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   ........           DC32     prvHigherPriorityNormallyEmptyTask

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   ........           DC32     xHighPriorityNormallyEmptyTask2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   ........           DC32     `?<Constant "H2QRx">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   ........           DC32     `?<Constant "LQRx">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   ........           DC32     prvLowerPriorityNormallyEmptyTask

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   ........           DC32     xHighPriorityNormallyFullTask1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   ........           DC32     `?<Constant "H1QTx">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   ........           DC32     prv1stHigherPriorityNormallyFullTask

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_10:
   \   00000000   ........           DC32     xHighPriorityNormallyFullTask2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_11:
   \   00000000   ........           DC32     prv2ndHigherPriorityNormallyFullTask

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_12:
   \   00000000   ........           DC32     prvLowerPriorityNormallyFullTask

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_13:
   \   00000000   ........           DC32     xNormallyFullQueue

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   ........           DC32     xNormallyEmptyQueue

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   ........           DC32     ucNormallyFullReceivedValues

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   ........           DC32     ucNormallyEmptyReceivedValues

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   ........           DC32     xErrorLine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   ........           DC32     uxHighPriorityLoops1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   ........           DC32     uxValueForNormallyEmptyQueue

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   ........           DC32     xErrorStatus

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   ........           DC32     xNormallyEmptyQueue

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   ........           DC32     uxLowPriorityLoops1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   ........           DC32     uxValueForNormallyFullQueue

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \   00000000   ........           DC32     xNormallyFullQueue

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_2:
   \   00000000   ........           DC32     xHighPriorityNormallyFullTask2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_3:
   \   00000000   ........           DC32     xWasSuspended

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_4:
   \   00000000   ........           DC32     uxHighPriorityLoops2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_5:
   \   00000000   37020000           DC32     0x237

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_6:
   \   00000000   0F270000           DC32     0x270f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   ........           DC32     xHighPriorityNormallyFullTask1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \   00000000   52020000           DC32     0x252

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_2:
   \   00000000   ........           DC32     uxLowPriorityLoops2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_3:
   \   00000000   ........           DC32     ??uxNextOperation

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_4:
   \   00000000   ........           DC32     xNormallyEmptyQueue

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_5:
   \   00000000   ........           DC32     uxValueForNormallyEmptyQueue

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   ........           DC32     ??uxNextOperation_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_1:
   \   00000000   99020000           DC32     0x299

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_2:
   \   00000000   ........           DC32     xNormallyFullQueue

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_3:
   \   00000000   ........           DC32     uxValueForNormallyFullQueue

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_4:
   \   00000000   ........           DC32     uxHighPriorityLoops1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_5:
   \   00000000   ........           DC32     ??uxLastHighPriorityLoops1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_6:
   \   00000000   B3020000           DC32     0x2b3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_7:
   \   00000000   ........           DC32     uxHighPriorityLoops2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_8:
   \   00000000   ........           DC32     ??uxLastHighPriorityLoops2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_9:
   \   00000000   BB020000           DC32     0x2bb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_10:
   \   00000000   ........           DC32     uxLowPriorityLoops1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_11:
   \   00000000   ........           DC32     ??uxLastLowPriorityLoops1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_12:
   \   00000000   C3020000           DC32     0x2c3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_13:
   \   00000000   ........           DC32     uxLowPriorityLoops2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_14:
   \   00000000   ........           DC32     ??uxLastLowPriorityLoops2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_15:
   \   00000000   CB020000           DC32     0x2cb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_16:
   \   00000000   ........           DC32     xErrorStatus

   \                                 In section .rodata, align 4
   \                     `?<Constant "H1QRx">`:
   \   00000000   483151527800       DC8 "H1QRx"
   \   00000006   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "H2QRx">`:
   \   00000000   483251527800       DC8 "H2QRx"
   \   00000006   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "LQRx">`:
   \   00000000   4C51527800         DC8 "LQRx"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "H1QTx">`:
   \   00000000   483151547800       DC8 "H1QTx"
   \   00000006   0000               DC8 0, 0
    722          

   Maximum stack usage in bytes:

     Function                       .cstack
     --------                       -------
     memset                              8
     prv1stHigherPriorityNormallyFullTask
                                        16
     prv2ndHigherPriorityNormallyFullTask
                                        16
     prvHigherPriorityNormallyEmptyTask
                                        32
     prvLowerPriorityNormallyEmptyTask
                                        16
     prvLowerPriorityNormallyFullTask
                                        16
     prvQueueAccessLogError              0
     prvRecordValue_NormallyEmpty       16
     prvRecordValue_NormallyFull        16
     vStartInterruptQueueTasks          24
     xAreIntQueueTasksStillRunning       8
     xFirstTimerHandler                 16
     xSecondTimerHandler                16


   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     memset                           20
     xNormallyEmptyQueue               4
     xNormallyFullQueue                4
     uxHighPriorityLoops1              4
     uxHighPriorityLoops2              4
     uxLowPriorityLoops1               4
     uxLowPriorityLoops2               4
     xErrorStatus                      4
     xErrorLine                        4
     xWasSuspended                     4
     uxValueForNormallyEmptyQueue      4
     uxValueForNormallyFullQueue       4
     xHighPriorityNormallyEmptyTask1
                                       4
     xHighPriorityNormallyEmptyTask2
                                       4
     xHighPriorityNormallyFullTask1    4
     xHighPriorityNormallyFullTask2    4
     ucNormallyEmptyReceivedValues   200
     ucNormallyFullReceivedValues    200
     vStartInterruptQueueTasks       200
     prvRecordValue_NormallyFull      30
     prvRecordValue_NormallyEmpty     32
     prvQueueAccessLogError           12
     prvHigherPriorityNormallyEmptyTask
                                     230
     prvLowerPriorityNormallyEmptyTask
                                     140
     prv1stHigherPriorityNormallyFullTask
                                     216
     prv2ndHigherPriorityNormallyFullTask
                                     120
     prvLowerPriorityNormallyFullTask
                                     120
     xFirstTimerHandler              240
     uxNextOperation                   4
     xSecondTimerHandler             396
     uxNextOperation                   4
     xAreIntQueueTasksStillRunning   112
     uxLastHighPriorityLoops1          4
     uxLastHighPriorityLoops2          4
     uxLastLowPriorityLoops1           4
     uxLastLowPriorityLoops2           4
     ??DataTable5                      4
     ??DataTable5_1                    4
     ??DataTable5_2                    4
     ??DataTable5_3                    4
     ??DataTable5_4                    4
     ??DataTable5_5                    4
     ??DataTable5_6                    4
     ??DataTable5_7                    4
     ??DataTable5_8                    4
     ??DataTable5_9                    4
     ??DataTable5_10                   4
     ??DataTable5_11                   4
     ??DataTable5_12                   4
     ??DataTable5_13                   4
     ??DataTable6                      4
     ??DataTable6_1                    4
     ??DataTable6_2                    4
     ??DataTable6_3                    4
     ??DataTable6_4                    4
     ??DataTable6_5                    4
     ??DataTable7                      4
     ??DataTable7_1                    4
     ??DataTable8                      4
     ??DataTable9                      4
     ??DataTable9_1                    4
     ??DataTable9_2                    4
     ??DataTable9_3                    4
     ??DataTable9_4                    4
     ??DataTable9_5                    4
     ??DataTable9_6                    4
     ??DataTable10                     4
     ??DataTable10_1                   4
     ??DataTable10_2                   4
     ??DataTable10_3                   4
     ??DataTable10_4                   4
     ??DataTable10_5                   4
     ??DataTable11                     4
     ??DataTable11_1                   4
     ??DataTable11_2                   4
     ??DataTable11_3                   4
     ??DataTable11_4                   4
     ??DataTable11_5                   4
     ??DataTable11_6                   4
     ??DataTable11_7                   4
     ??DataTable11_8                   4
     ??DataTable11_9                   4
     ??DataTable11_10                  4
     ??DataTable11_11                  4
     ??DataTable11_12                  4
     ??DataTable11_13                  4
     ??DataTable11_14                  4
     ??DataTable11_15                  4
     ??DataTable11_16                  4
     ?<Constant "H1QRx">               8
     ?<Constant "H2QRx">               8
     ?<Constant "LQRx">                8
     ?<Constant "H1QTx">               8

 
   480 bytes in section .bss
     4 bytes in section .data
    32 bytes in section .rodata
 2 080 bytes in section .text
 
 2 060 bytes of CODE  memory (+ 20 bytes shared)
    32 bytes of CONST memory
   484 bytes of DATA  memory

Errors: none
Warnings: none
