###############################################################################
#                                                                             #
#                                                       06/Jul/2010  14:34:53 #
# IAR ANSI C/C++ Compiler V5.50.0.21878/W32 EVALUATION for ARM                #
# Copyright (C) 1999-2010 IAR Systems AB.                                     #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\User_Demo\Thread_Test.c                                #
#    Command line =  E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\User_Demo\Thread_Test.c -D IAR_ARM_CM0 -lCN            #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\Debug\List\ --diag_suppress Pe550,Pa082,Pa039 -o       #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\Debug\Obj\ --no_cse --no_unroll --no_inline            #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M0  #
#                    -e --fpu=None --dlib_config "D:\Program                  #
#                    Files\ARM\INC\DLib_Config_Full.h" -I                     #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\..\common\include\ -I E:\FreeRTOS_Keil_IAR\FreeRTOS\De #
#                    mo\CORTEX_NUC1xx_Keil_IAR\..\..\source\include\ -I       #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\ -I E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_K #
#                    eil_IAR\NUC1xxBSP\NuvotonPlatform_Keil\Include\ -I       #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\NUC1xxBSP\NuvotonPlatform_Keil\Include\Driver\ -I      #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\NUC1xxBSP\CMSIS\CM0\ -I E:\FreeRTOS_Keil_IAR\FreeRTOS\ #
#                    Demo\CORTEX_NUC1xx_Keil_IAR\User_Demo\include\ -I        #
#                    "D:\Program Files\ARM\INC\" -Ol                          #
#    List file    =  E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\Debug\List\Thread_Test.lst                             #
#    Object file  =  E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\Debug\Obj\Thread_Test.o                                #
#                                                                             #
#                                                                             #
###############################################################################

E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IAR\User_Demo\Thread_Test.c
      1          /*---------------------------------------------------------------------------------------------------------*/
      2          /*                                                                                                         */
      3          /* Copyright(c) 2010 Nuvoton Technology Corp. All rights reserved.                                         */
      4          /*                                                                                                         */
      5          /*---------------------------------------------------------------------------------------------------------*/
      6          
      7          /*
      8          	This file create two tasks, in order to test muti-tasks of FreeRTOS.
      9          */
     10          
     11          #include <stdio.h>
     12          
     13          #include "FreeRTOS.h"
     14          #include "task.h"
     15          
     16          #include "NUC1xx_Test.h"
     17          
     18          #define THREAD_TEST_STACK_SIZE	configMINIMAL_STACK_SIZE	
     19          #define THREAD_TEST_PRIORITY	( tskIDLE_PRIORITY + 1 )
     20          
     21          void Thread_Task1( void *pvParameters );
     22          void Thread_Task2( void *pvParameters );
     23          

   \                                 In section .text, align 2, keep-with-next
     24          void vStartThreadTasks( void )
     25          {
   \                     vStartThreadTasks:
   \   00000000   00B5               PUSH     {LR}
   \   00000002   85B0               SUB      SP,SP,#+20
     26          	xTaskCreate( Thread_Task1, ( signed char * ) "Th_Task1", THREAD_TEST_STACK_SIZE, NULL, THREAD_TEST_PRIORITY, ( xTaskHandle * ) NULL );
   \   00000004   0020               MOVS     R0,#+0
   \   00000006   0390               STR      R0,[SP, #+12]
   \   00000008   0020               MOVS     R0,#+0
   \   0000000A   0290               STR      R0,[SP, #+8]
   \   0000000C   0020               MOVS     R0,#+0
   \   0000000E   0190               STR      R0,[SP, #+4]
   \   00000010   0120               MOVS     R0,#+1
   \   00000012   0090               STR      R0,[SP, #+0]
   \   00000014   0023               MOVS     R3,#+0
   \   00000016   8022               MOVS     R2,#+128
   \   00000018   ....               LDR      R1,??DataTable2
   \   0000001A   ....               LDR      R0,??DataTable2_1
   \   0000001C   ........           BL       xTaskGenericCreate
     27          	xTaskCreate( Thread_Task2, ( signed char * ) "Th_Task2", THREAD_TEST_STACK_SIZE, NULL, THREAD_TEST_PRIORITY, ( xTaskHandle * ) NULL );
   \   00000020   0020               MOVS     R0,#+0
   \   00000022   0390               STR      R0,[SP, #+12]
   \   00000024   0020               MOVS     R0,#+0
   \   00000026   0290               STR      R0,[SP, #+8]
   \   00000028   0020               MOVS     R0,#+0
   \   0000002A   0190               STR      R0,[SP, #+4]
   \   0000002C   0120               MOVS     R0,#+1
   \   0000002E   0090               STR      R0,[SP, #+0]
   \   00000030   0023               MOVS     R3,#+0
   \   00000032   8022               MOVS     R2,#+128
   \   00000034   ....               LDR      R1,??DataTable2_2
   \   00000036   ....               LDR      R0,??DataTable2_3
   \   00000038   ........           BL       xTaskGenericCreate
     28          }
   \   0000003C   05B0               ADD      SP,SP,#+20
   \   0000003E   00BD               POP      {PC}             ;; return
     29          

   \                                 In section .text, align 2, keep-with-next
     30          void Thread_Task1( void *pvParameters )
     31          {
   \                     Thread_Task1:
   \   00000000   80B5               PUSH     {R7,LR}
     32          portTickType xLastTime1;
     33          	
     34          	/* Get current system TickCount. */
     35          	xLastTime1 = xTaskGetTickCount();
   \   00000002   ........           BL       xTaskGetTickCount
   \   00000006   0090               STR      R0,[SP, #+0]
     36          	
     37          	for( ;; )
     38          	{
     39          		/* Run a time every 400 milliseconds. */
     40          		vTaskDelayUntil( &xLastTime1, 400 );
   \                     ??Thread_Task1_0:
   \   00000008   C821               MOVS     R1,#+200
   \   0000000A   4900               LSLS     R1,R1,#+1        ;; #+400
   \   0000000C   6846               MOV      R0,SP
   \   0000000E   ........           BL       vTaskDelayUntil
     41          		printf("Task1 called-\n");
   \   00000012   ....               LDR      R0,??DataTable2_4
   \   00000014   ........           BL       printf
   \   00000018   F6E7               B        ??Thread_Task1_0
     42          	}	
     43          }
     44          

   \                                 In section .text, align 2, keep-with-next
     45          void Thread_Task2( void *pvParameters )
     46          {
   \                     Thread_Task2:
   \   00000000   80B5               PUSH     {R7,LR}
     47          portTickType xLastTime2;
     48          	
     49          	/* Get current system TickCount. */
     50          	xLastTime2 = xTaskGetTickCount();	
   \   00000002   ........           BL       xTaskGetTickCount
   \   00000006   0090               STR      R0,[SP, #+0]
     51          
     52          	for( ;; )
     53          	{
     54          		/* Run a time every 800 milliseconds. */
     55          		vTaskDelayUntil( &xLastTime2, 800 );
   \                     ??Thread_Task2_0:
   \   00000008   C821               MOVS     R1,#+200
   \   0000000A   8900               LSLS     R1,R1,#+2        ;; #+800
   \   0000000C   6846               MOV      R0,SP
   \   0000000E   ........           BL       vTaskDelayUntil
     56          		printf("Task2 called--\n");
   \   00000012   ....               LDR      R0,??DataTable2_5
   \   00000014   ........           BL       printf
   \   00000018   F6E7               B        ??Thread_Task2_0
     57          	}
     58          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     `?<Constant "Th_Task1">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   ........           DC32     Thread_Task1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   ........           DC32     `?<Constant "Th_Task2">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   ........           DC32     Thread_Task2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   ........           DC32     `?<Constant "Task1 called-\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   ........           DC32     `?<Constant "Task2 called--\\n">`

   \                                 In section .rodata, align 4
   \                     `?<Constant "Th_Task1">`:
   \   00000000   54685F546173       DC8 "Th_Task1"
   \              6B3100      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Th_Task2">`:
   \   00000000   54685F546173       DC8 "Th_Task2"
   \              6B3200      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Task1 called-\\n">`:
   \   00000000   5461736B3120       DC8 "Task1 called-\012"
   \              63616C6C6564
   \              2D0A00      
   \   0000000F   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Task2 called--\\n">`:
   \   00000000   5461736B3220       DC8 "Task2 called--\012"
   \              63616C6C6564
   \              2D2D0A00    

   Maximum stack usage in bytes:

     Function          .cstack
     --------          -------
     Thread_Task1           8
     Thread_Task2           8
     vStartThreadTasks     24


   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     vStartThreadTasks                64
     Thread_Task1                     26
     Thread_Task2                     26
     ??DataTable2                      4
     ??DataTable2_1                    4
     ??DataTable2_2                    4
     ??DataTable2_3                    4
     ??DataTable2_4                    4
     ??DataTable2_5                    4
     ?<Constant "Th_Task1">           12
     ?<Constant "Th_Task2">           12
     ?<Constant "Task1 called-\n">    16
     ?<Constant "Task2 called--\n">   16

 
  56 bytes in section .rodata
 140 bytes in section .text
 
 140 bytes of CODE  memory
  56 bytes of CONST memory

Errors: none
Warnings: none
