###############################################################################
#                                                                             #
#                                                       06/Jul/2010  14:34:55 #
# IAR ANSI C/C++ Compiler V5.50.0.21878/W32 EVALUATION for ARM                #
# Copyright (C) 1999-2010 IAR Systems AB.                                     #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\Common\Minimal\flash. #
#                    c                                                        #
#    Command line =  E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\Common\Minimal\flash. #
#                    c -D IAR_ARM_CM0 -lCN E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo #
#                    \CORTEX_NUC1xx_Keil_IAR\Debug\List\ --diag_suppress      #
#                    Pe550,Pa082,Pa039 -o E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\ #
#                    CORTEX_NUC1xx_Keil_IAR\Debug\Obj\ --no_cse --no_unroll   #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M0  #
#                    -e --fpu=None --dlib_config "D:\Program                  #
#                    Files\ARM\INC\DLib_Config_Full.h" -I                     #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\..\common\include\ -I E:\FreeRTOS_Keil_IAR\FreeRTOS\De #
#                    mo\CORTEX_NUC1xx_Keil_IAR\..\..\source\include\ -I       #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\ -I E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_K #
#                    eil_IAR\NUC1xxBSP\NuvotonPlatform_Keil\Include\ -I       #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\NUC1xxBSP\NuvotonPlatform_Keil\Include\Driver\ -I      #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\NUC1xxBSP\CMSIS\CM0\ -I E:\FreeRTOS_Keil_IAR\FreeRTOS\ #
#                    Demo\CORTEX_NUC1xx_Keil_IAR\User_Demo\include\ -I        #
#                    "D:\Program Files\ARM\INC\" -Ol                          #
#    List file    =  E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\Debug\List\flash.lst                                   #
#    Object file  =  E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\Debug\Obj\flash.o                                      #
#                                                                             #
#                                                                             #
###############################################################################

E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\Common\Minimal\flash.c
      1          /*
      2              FreeRTOS V6.0.5 - Copyright (C) 2010 Real Time Engineers Ltd.
      3          
      4              ***************************************************************************
      5              *                                                                         *
      6              * If you are:                                                             *
      7              *                                                                         *
      8              *    + New to FreeRTOS,                                                   *
      9              *    + Wanting to learn FreeRTOS or multitasking in general quickly       *
     10              *    + Looking for basic training,                                        *
     11              *    + Wanting to improve your FreeRTOS skills and productivity           *
     12              *                                                                         *
     13              * then take a look at the FreeRTOS eBook                                  *
     14              *                                                                         *
     15              *        "Using the FreeRTOS Real Time Kernel - a Practical Guide"        *
     16              *                  http://www.FreeRTOS.org/Documentation                  *
     17              *                                                                         *
     18              * A pdf reference manual is also available.  Both are usually delivered   *
     19              * to your inbox within 20 minutes to two hours when purchased between 8am *
     20              * and 8pm GMT (although please allow up to 24 hours in case of            *
     21              * exceptional circumstances).  Thank you for your support!                *
     22              *                                                                         *
     23              ***************************************************************************
     24          
     25              This file is part of the FreeRTOS distribution.
     26          
     27              FreeRTOS is free software; you can redistribute it and/or modify it under
     28              the terms of the GNU General Public License (version 2) as published by the
     29              Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
     30              ***NOTE*** The exception to the GPL is included to allow you to distribute
     31              a combined work that includes FreeRTOS without being obliged to provide the
     32              source code for proprietary components outside of the FreeRTOS kernel.
     33              FreeRTOS is distributed in the hope that it will be useful, but WITHOUT
     34              ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
     35              FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
     36              more details. You should have received a copy of the GNU General Public 
     37              License and the FreeRTOS license exception along with FreeRTOS; if not it 
     38              can be viewed here: http://www.freertos.org/a00114.html and also obtained 
     39              by writing to Richard Barry, contact details for whom are available on the
     40              FreeRTOS WEB site.
     41          
     42              1 tab == 4 spaces!
     43          
     44              http://www.FreeRTOS.org - Documentation, latest information, license and
     45              contact details.
     46          
     47              http://www.SafeRTOS.com - A version that is certified for use in safety
     48              critical systems.
     49          
     50              http://www.OpenRTOS.com - Commercial support, development, porting,
     51              licensing and training services.
     52          */
     53          
     54          /**
     55           * This version of flash .c is for use on systems that have limited stack space
     56           * and no display facilities.  The complete version can be found in the 
     57           * Demo/Common/Full directory.
     58           * 
     59           * Three tasks are created, each of which flash an LED at a different rate.  The first 
     60           * LED flashes every 200ms, the second every 400ms, the third every 600ms.
     61           *
     62           * The LED flash tasks provide instant visual feedback.  They show that the scheduler 
     63           * is still operational.
     64           *
     65           */
     66          
     67          
     68          #include <stdlib.h>
     69          
     70          /* Scheduler include files. */
     71          #include "FreeRTOS.h"
     72          #include "task.h"
     73          
     74          /* Demo program include files. */
     75          #include "partest.h"
     76          #include "flash.h"
     77          
     78          #define ledSTACK_SIZE		configMINIMAL_STACK_SIZE
     79          #define ledNUMBER_OF_LEDS	( 3 )
     80          #define ledFLASH_RATE_BASE	( ( portTickType ) 333 )
     81          
     82          /* Variable used by the created tasks to calculate the LED number to use, and
     83          the rate at which they should flash the LED. */

   \                                 In section .bss, align 4
     84          static volatile unsigned portBASE_TYPE uxFlashTaskNumber = 0;
   \                     uxFlashTaskNumber:
   \   00000000                      DS8 4
     85          
     86          /* The task that is created three times. */
     87          static portTASK_FUNCTION_PROTO( vLEDFlashTask, pvParameters );
     88          
     89          /*-----------------------------------------------------------*/
     90          

   \                                 In section .text, align 2, keep-with-next
     91          void vStartLEDFlashTasks( unsigned portBASE_TYPE uxPriority )
     92          {
   \                     vStartLEDFlashTasks:
   \   00000000   30B5               PUSH     {R4,R5,LR}
   \   00000002   85B0               SUB      SP,SP,#+20
   \   00000004   0500               MOVS     R5,R0
     93          signed portBASE_TYPE xLEDTask;
     94          
     95          	/* Create the three tasks. */
     96          	for( xLEDTask = 0; xLEDTask < ledNUMBER_OF_LEDS; ++xLEDTask )
   \   00000006   0024               MOVS     R4,#+0
   \   00000008   0DE0               B        ??vStartLEDFlashTasks_0
     97          	{
     98          		/* Spawn the task. */
     99          		xTaskCreate( vLEDFlashTask, ( signed char * ) "LEDx", ledSTACK_SIZE, NULL, uxPriority, ( xTaskHandle * ) NULL );
   \                     ??vStartLEDFlashTasks_1:
   \   0000000A   0020               MOVS     R0,#+0
   \   0000000C   0390               STR      R0,[SP, #+12]
   \   0000000E   0020               MOVS     R0,#+0
   \   00000010   0290               STR      R0,[SP, #+8]
   \   00000012   0020               MOVS     R0,#+0
   \   00000014   0190               STR      R0,[SP, #+4]
   \   00000016   0095               STR      R5,[SP, #+0]
   \   00000018   0023               MOVS     R3,#+0
   \   0000001A   8022               MOVS     R2,#+128
   \   0000001C   ....               LDR      R1,??DataTable1
   \   0000001E   ....               LDR      R0,??DataTable1_1
   \   00000020   ........           BL       xTaskGenericCreate
    100          	}
   \   00000024   641C               ADDS     R4,R4,#+1
   \                     ??vStartLEDFlashTasks_0:
   \   00000026   032C               CMP      R4,#+3
   \   00000028   EFDB               BLT      ??vStartLEDFlashTasks_1
    101          }
   \   0000002A   05B0               ADD      SP,SP,#+20
   \   0000002C   30BD               POP      {R4,R5,PC}       ;; return
    102          /*-----------------------------------------------------------*/
    103          

   \                                 In section .text, align 2, keep-with-next
    104          static portTASK_FUNCTION( vLEDFlashTask, pvParameters )
    105          {
   \                     vLEDFlashTask:
   \   00000000   38B5               PUSH     {R3-R5,LR}
    106          portTickType xFlashRate, xLastFlashTime;
    107          unsigned portBASE_TYPE uxLED;
    108          
    109          	/* The parameters are not used. */
    110          	( void ) pvParameters;
    111          
    112          	/* Calculate the LED and flash rate. */
    113          	portENTER_CRITICAL();
   \   00000002   ........           BL       vPortEnterCritical
    114          	{
    115          		/* See which of the eight LED's we should use. */
    116          		uxLED = uxFlashTaskNumber;
   \   00000006   ....               LDR      R0,??DataTable1_2
   \   00000008   0468               LDR      R4,[R0, #+0]
    117          
    118          		/* Update so the next task uses the next LED. */
    119          		uxFlashTaskNumber++;
   \   0000000A   ....               LDR      R0,??DataTable1_2
   \   0000000C   0068               LDR      R0,[R0, #+0]
   \   0000000E   401C               ADDS     R0,R0,#+1
   \   00000010   ....               LDR      R1,??DataTable1_2
   \   00000012   0860               STR      R0,[R1, #+0]
    120          	}
    121          	portEXIT_CRITICAL();
   \   00000014   ........           BL       vPortExitCritical
    122          
    123          	xFlashRate = ledFLASH_RATE_BASE + ( ledFLASH_RATE_BASE * ( portTickType ) uxLED );
   \   00000018   FF20               MOVS     R0,#+255
   \   0000001A   4E30               ADDS     R0,R0,#+78       ;; #+333
   \   0000001C   6043               MULS     R0,R4,R0
   \   0000001E   FF21               MOVS     R1,#+255
   \   00000020   4E31               ADDS     R1,R1,#+78       ;; #+333
   \   00000022   4518               ADDS     R5,R0,R1
    124          	xFlashRate /= portTICK_RATE_MS;
   \   00000024   2800               MOVS     R0,R5
   \   00000026   0121               MOVS     R1,#+1
   \   00000028   ........           BL       __aeabi_uidiv
   \   0000002C   0500               MOVS     R5,R0
    125          
    126          	/* We will turn the LED on and off again in the delay period, so each
    127          	delay is only half the total period. */
    128          	xFlashRate /= ( portTickType ) 2;
   \   0000002E   6D08               LSRS     R5,R5,#+1
    129          
    130          	/* We need to initialise xLastFlashTime prior to the first call to 
    131          	vTaskDelayUntil(). */
    132          	xLastFlashTime = xTaskGetTickCount();
   \   00000030   ........           BL       xTaskGetTickCount
   \   00000034   0090               STR      R0,[SP, #+0]
    133          
    134          	for(;;)
    135          	{
    136          		/* Delay for half the flash period then turn the LED on. */
    137          		vTaskDelayUntil( &xLastFlashTime, xFlashRate );
   \                     ??vLEDFlashTask_0:
   \   00000036   2900               MOVS     R1,R5
   \   00000038   6846               MOV      R0,SP
   \   0000003A   ........           BL       vTaskDelayUntil
    138          		vParTestToggleLED( uxLED );
   \   0000003E   2000               MOVS     R0,R4
   \   00000040   ........           BL       vParTestToggleLED
    139          
    140          		/* Delay for half the flash period then turn the LED off. */
    141          		vTaskDelayUntil( &xLastFlashTime, xFlashRate );
   \   00000044   2900               MOVS     R1,R5
   \   00000046   6846               MOV      R0,SP
   \   00000048   ........           BL       vTaskDelayUntil
    142          		vParTestToggleLED( uxLED );
   \   0000004C   2000               MOVS     R0,R4
   \   0000004E   ........           BL       vParTestToggleLED
   \   00000052   F0E7               B        ??vLEDFlashTask_0
    143          	}
    144          } /*lint !e715 !e818 !e830 Function definition must be standard for task creation. */

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     `?<Constant "LEDx">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   ........           DC32     vLEDFlashTask

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   ........           DC32     uxFlashTaskNumber

   \                                 In section .rodata, align 4
   \                     `?<Constant "LEDx">`:
   \   00000000   4C45447800         DC8 "LEDx"
   \   00000005   000000             DC8 0, 0, 0
    145          

   Maximum stack usage in bytes:

     Function            .cstack
     --------            -------
     vLEDFlashTask           16
     vStartLEDFlashTasks     32


   Section sizes:

     Function/Label      Bytes
     --------------      -----
     uxFlashTaskNumber      4
     vStartLEDFlashTasks   46
     vLEDFlashTask         84
     ??DataTable1           4
     ??DataTable1_1         4
     ??DataTable1_2         4
     ?<Constant "LEDx">     8

 
   4 bytes in section .bss
   8 bytes in section .rodata
 142 bytes in section .text
 
 142 bytes of CODE  memory
   8 bytes of CONST memory
   4 bytes of DATA  memory

Errors: none
Warnings: none
