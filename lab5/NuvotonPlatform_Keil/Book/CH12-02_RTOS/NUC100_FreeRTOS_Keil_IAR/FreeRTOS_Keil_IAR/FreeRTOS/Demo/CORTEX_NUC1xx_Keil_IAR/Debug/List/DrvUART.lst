###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.41.2.51793/W32 for ARM     28/Jun/2010  13:54:12 #
# Copyright (C) 1999-2010 IAR Systems AB.                                     #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  \\10.130.11.37\FreeRTOS\FreeRTOS\Demo\CORTEX_NUC1xx_Keil #
#                    _IAR\NUC1xxBSP\NuvotonPlatform_Keil\Src\Driver\DrvUART.c #
#    Command line =  \\10.130.11.37\FreeRTOS\FreeRTOS\Demo\CORTEX_NUC1xx_Keil #
#                    _IAR\NUC1xxBSP\NuvotonPlatform_Keil\Src\Driver\DrvUART.c #
#                     -D IAR_ARM_CM0 -lCN \\10.130.11.37\FreeRTOS\FreeRTOS\De #
#                    mo\CORTEX_NUC1xx_Keil_IAR\Debug\List\ --diag_suppress    #
#                    Pe550,Pa082,Pa039 -o \\10.130.11.37\FreeRTOS\FreeRTOS\De #
#                    mo\CORTEX_NUC1xx_Keil_IAR\Debug\Obj\ --no_cse            #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M0 -e --fpu=None --dlib_config "D:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    5.4\arm\INC\DLib_Config_Full.h" -I                       #
#                    \\10.130.11.37\FreeRTOS\FreeRTOS\Demo\CORTEX_NUC1xx_Keil #
#                    _IAR\..\common\include\ -I \\10.130.11.37\FreeRTOS\FreeR #
#                    TOS\Demo\CORTEX_NUC1xx_Keil_IAR\..\..\source\include\    #
#                    -I \\10.130.11.37\FreeRTOS\FreeRTOS\Demo\CORTEX_NUC1xx_K #
#                    eil_IAR\ -I \\10.130.11.37\FreeRTOS\FreeRTOS\Demo\CORTEX #
#                    _NUC1xx_Keil_IAR\NUC1xxBSP\NuvotonPlatform_Keil\Include\ #
#                     -I \\10.130.11.37\FreeRTOS\FreeRTOS\Demo\CORTEX_NUC1xx_ #
#                    Keil_IAR\NUC1xxBSP\NuvotonPlatform_Keil\Include\Driver\  #
#                    -I \\10.130.11.37\FreeRTOS\FreeRTOS\Demo\CORTEX_NUC1xx_K #
#                    eil_IAR\NUC1xxBSP\CMSIS\CM0\ -I                          #
#                    \\10.130.11.37\FreeRTOS\FreeRTOS\Demo\CORTEX_NUC1xx_Keil #
#                    _IAR\User_Demo\include\ -I "D:\Program Files\IAR         #
#                    Systems\Embedded Workbench 5.4\arm\INC\" -Ol             #
#    List file    =  \\10.130.11.37\FreeRTOS\FreeRTOS\Demo\CORTEX_NUC1xx_Keil #
#                    _IAR\Debug\List\DrvUART.lst                              #
#    Object file  =  \\10.130.11.37\FreeRTOS\FreeRTOS\Demo\CORTEX_NUC1xx_Keil #
#                    _IAR\Debug\Obj\DrvUART.o                                 #
#                                                                             #
#                                                                             #
###############################################################################

\\10.130.11.37\FreeRTOS\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IAR\NUC1xxBSP\NuvotonPlatform_Keil\Src\Driver\DrvUART.c
      1          /*---------------------------------------------------------------------------------------------------------*/
      2          /*                                                                                                         */
      3          /* Copyright(c) 2009 Nuvoton Technology Corp. All rights reserved.                                         */
      4          /*                                                                                                         */
      5          /*---------------------------------------------------------------------------------------------------------*/
      6          #include <stdio.h>
      7          #include "NUC1xx.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __??Code16?? __code __interwork void NVIC_EnableIRQ(IRQn_Type)
   \                     NVIC_EnableIRQ:
   \   00000000   40B2               SXTB     R0,R0
   \   00000002   0100               MOVS     R1,R0
   \   00000004   4909               LSRS     R1,R1,#+5
   \   00000006   0422               MOVS     R2,#+4
   \   00000008   5143               MULS     R1,R2,R1
   \   0000000A   ....               LDR      R2,??DataTable6  ;; 0xe000e100
   \   0000000C   0123               MOVS     R3,#+1
   \   0000000E   C006               LSLS     R0,R0,#+27       ;; ZeroExtS R0,R0,#+27,#+27
   \   00000010   C00E               LSRS     R0,R0,#+27
   \   00000012   8340               LSLS     R3,R3,R0
   \   00000014   5350               STR      R3,[R2, R1]
   \   00000016   7047               BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __??Code16?? __code __interwork void NVIC_DisableIRQ(IRQn_Type)
   \                     NVIC_DisableIRQ:
   \   00000000   40B2               SXTB     R0,R0
   \   00000002   0100               MOVS     R1,R0
   \   00000004   4909               LSRS     R1,R1,#+5
   \   00000006   0422               MOVS     R2,#+4
   \   00000008   5143               MULS     R1,R2,R1
   \   0000000A   ....               LDR      R2,??DataTable6_1  ;; 0xe000e180
   \   0000000C   0123               MOVS     R3,#+1
   \   0000000E   C006               LSLS     R0,R0,#+27       ;; ZeroExtS R0,R0,#+27,#+27
   \   00000010   C00E               LSRS     R0,R0,#+27
   \   00000012   8340               LSLS     R3,R3,R0
   \   00000014   5350               STR      R3,[R2, R1]
   \   00000016   7047               BX       LR               ;; return
      8          
      9          /*---------------------------------------------------------------------------------------------------------*/
     10          /* Includes of local headers                                                                               */
     11          /*---------------------------------------------------------------------------------------------------------*/
     12          #include "DrvUART.h"
     13          #include "DrvSYS.h"
     14          
     15          
     16          /*---------------------------------------------------------------------------------------------------------*/
     17          /* Macro, type and constant definitions                                                                    */
     18          /*---------------------------------------------------------------------------------------------------------*/
     19          
     20          
     21          /*---------------------------------------------------------------------------------------------------------*/
     22          /* Global variables                                                                                        */
     23          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .bss, align 4
     24          static PFN_DRVUART_CALLBACK *g_pfnUART0callback = NULL;
   \                     g_pfnUART0callback:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     25          static PFN_DRVUART_CALLBACK *g_pfnUART1callback = NULL;
   \                     g_pfnUART1callback:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     26          static PFN_DRVUART_CALLBACK *g_pfnUART2callback = NULL;
   \                     g_pfnUART2callback:
   \   00000000                      DS8 4
     27          
     28          
     29          
     30          /*---------------------------------------------------------------------------------------------------------*/
     31          /* Interrupt Handler                                                                                 	   */
     32          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
     33          void UART02_IRQHandler(void)
     34          {
   \                     UART02_IRQHandler:
   \   00000000   10B5               PUSH     {R4,LR}
     35              uint32_t u32uart0IntStatus,u32uart2IntStatus;
     36          
     37              u32uart0IntStatus = inpw(&UART0->ISR) ;
   \   00000002   ....               LDR      R0,??DataTable6_2  ;; 0x4005001c
   \   00000004   0068               LDR      R0,[R0, #+0]
     38          	
     39          	u32uart2IntStatus = inpw(&UART2->ISR) ;
   \   00000006   ....               LDR      R1,??DataTable6_3  ;; 0x4015401c
   \   00000008   0C68               LDR      R4,[R1, #+0]
     40          	
     41              if(g_pfnUART0callback != NULL)
   \   0000000A   ....               LDR      R1,??DataTable6_4  ;; g_pfnUART0callback
   \   0000000C   0968               LDR      R1,[R1, #+0]
   \   0000000E   0029               CMP      R1,#+0
   \   00000010   02D0               BEQ      ??UART02_IRQHandler_0
     42          	{
     43                  g_pfnUART0callback(u32uart0IntStatus);
   \   00000012   ....               LDR      R1,??DataTable6_4  ;; g_pfnUART0callback
   \   00000014   0968               LDR      R1,[R1, #+0]
   \   00000016   8847               BLX      R1
     44              }
     45          	if(g_pfnUART2callback != NULL)
   \                     ??UART02_IRQHandler_0:
   \   00000018   ....               LDR      R0,??DataTable6_5  ;; g_pfnUART2callback
   \   0000001A   0068               LDR      R0,[R0, #+0]
   \   0000001C   0028               CMP      R0,#+0
   \   0000001E   03D0               BEQ      ??UART02_IRQHandler_1
     46              {
     47                  g_pfnUART2callback(u32uart2IntStatus);
   \   00000020   2000               MOVS     R0,R4
   \   00000022   ....               LDR      R1,??DataTable6_5  ;; g_pfnUART2callback
   \   00000024   0968               LDR      R1,[R1, #+0]
   \   00000026   8847               BLX      R1
     48              }
     49          }
   \                     ??UART02_IRQHandler_1:
   \   00000028   10BD               POP      {R4,PC}          ;; return
     50          
     51          

   \                                 In section .text, align 2, keep-with-next
     52          void UART1_IRQHandler(void)
     53          {
   \                     UART1_IRQHandler:
   \   00000000   80B5               PUSH     {R7,LR}
     54              uint32_t u32IntStatus;
     55          
     56          	u32IntStatus = inpw(&UART1->ISR) ;
   \   00000002   ....               LDR      R0,??DataTable6_6  ;; 0x4015001c
   \   00000004   0068               LDR      R0,[R0, #+0]
     57          
     58              if(g_pfnUART1callback != NULL)
   \   00000006   ....               LDR      R1,??DataTable6_7  ;; g_pfnUART1callback
   \   00000008   0968               LDR      R1,[R1, #+0]
   \   0000000A   0029               CMP      R1,#+0
   \   0000000C   02D0               BEQ      ??UART1_IRQHandler_0
     59              {
     60                 g_pfnUART1callback(u32IntStatus);
   \   0000000E   ....               LDR      R1,??DataTable6_7  ;; g_pfnUART1callback
   \   00000010   0968               LDR      R1,[R1, #+0]
   \   00000012   8847               BLX      R1
     61              }
     62          
     63          }
   \                     ??UART1_IRQHandler_0:
   \   00000014   01BD               POP      {R0,PC}          ;; return
     64          
     65          
     66           
     67          /*---------------------------------------------------------------------------------------------------------*/
     68          /* Function:     BaudRateCalculator                                                                        */
     69          /*                                                                                                         */
     70          /* Parameter:        																					   */	
     71          /*	             clk          		-[in] Uart Source Clock                                                */
     72          /*	             baudRate     		-[in] User seting BaudRate                                             */
     73          /*	             UART_BAUD_T *baud  -[in] Get User Settings                                                */
     74          /* Returns:                                                                                                */
     75          /*               None                                                                                      */
     76          /* Description:                                                                                            */
     77          /*               The function is used to get  compute Baud Setting Value                                   */
     78          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
     79          static void BaudRateCalculator(uint32_t clk, uint32_t baudRate, UART_BAUD_T *baud)
     80          {
   \                     BaudRateCalculator:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0C00               MOVS     R4,R1
   \   00000004   1500               MOVS     R5,R2
     81            	int32_t tmp;
     82          	int32_t div;
     83          
     84          	if(((clk / baudRate)%16)<3)	      /* Source Clock mod 16 <3 => Using Divider X =16 (MODE#1) */ 
   \   00000006   0098               LDR      R0,[SP, #+0]
   \   00000008   2100               MOVS     R1,R4
   \   0000000A   ........           BL       __aeabi_uidiv
   \   0000000E   1021               MOVS     R1,#+16
   \   00000010   ........           BL       __aeabi_uidivmod
   \   00000014   0329               CMP      R1,#+3
   \   00000016   0FD2               BCS      ??BaudRateCalculator_0
     85          	{								  
     86          		baud->DIVX_EN = 0;
   \   00000018   2868               LDR      R0,[R5, #+0]
   \   0000001A   ....               LDR      R1,??DataTable6_8  ;; 0xdfffffff
   \   0000001C   0140               ANDS     R1,R1,R0
   \   0000001E   2960               STR      R1,[R5, #+0]
     87          	    baud->DIVX1   = 0;
   \   00000020   2868               LDR      R0,[R5, #+0]
   \   00000022   ....               LDR      R1,??DataTable6_9  ;; 0xefffffff
   \   00000024   0140               ANDS     R1,R1,R0
   \   00000026   2960               STR      R1,[R5, #+0]
     88          		tmp = clk / baudRate/16  -2;
   \   00000028   0098               LDR      R0,[SP, #+0]
   \   0000002A   2100               MOVS     R1,R4
   \   0000002C   ........           BL       __aeabi_uidiv
   \   00000030   0600               MOVS     R6,R0
   \   00000032   3609               LSRS     R6,R6,#+4
   \   00000034   B61E               SUBS     R6,R6,#+2
   \   00000036   3AE0               B        ??BaudRateCalculator_1
     89          	}
     90          	else							  /* Source Clock mod 16 >3 => Up 5% Error BaudRate */
     91          	{
     92          	    baud->DIVX_EN = 1;			  /* Try to Set Divider X = 1 (MODE#3)*/
   \                     ??BaudRateCalculator_0:
   \   00000038   2868               LDR      R0,[R5, #+0]
   \   0000003A   8021               MOVS     R1,#+128
   \   0000003C   8905               LSLS     R1,R1,#+22       ;; #+536870912
   \   0000003E   0143               ORRS     R1,R1,R0
   \   00000040   2960               STR      R1,[R5, #+0]
     93          	    baud->DIVX1   = 1;
   \   00000042   2868               LDR      R0,[R5, #+0]
   \   00000044   8021               MOVS     R1,#+128
   \   00000046   4905               LSLS     R1,R1,#+21       ;; #+268435456
   \   00000048   0143               ORRS     R1,R1,R0
   \   0000004A   2960               STR      R1,[R5, #+0]
     94          		tmp = clk / baudRate  -2;
   \   0000004C   0098               LDR      R0,[SP, #+0]
   \   0000004E   2100               MOVS     R1,R4
   \   00000050   ........           BL       __aeabi_uidiv
   \   00000054   0600               MOVS     R6,R0
   \   00000056   B61E               SUBS     R6,R6,#+2
     95          
     96          		if(tmp > 0xFFFF)			  /* If Divider > Range  */
   \   00000058   8020               MOVS     R0,#+128
   \   0000005A   4002               LSLS     R0,R0,#+9        ;; #+65536
   \   0000005C   8642               CMP      R6,R0
   \   0000005E   26DB               BLT      ??BaudRateCalculator_1
     97          		{
     98          			baud->DIVX_EN = 1;		  /* Try to Set Divider X up 10 (MODE#2) */
   \   00000060   2868               LDR      R0,[R5, #+0]
   \   00000062   8021               MOVS     R1,#+128
   \   00000064   8905               LSLS     R1,R1,#+22       ;; #+536870912
   \   00000066   0143               ORRS     R1,R1,R0
   \   00000068   2960               STR      R1,[R5, #+0]
     99          			
    100          			for(div = 8; div <16;div++)
   \   0000006A   0827               MOVS     R7,#+8
   \   0000006C   00E0               B        ??BaudRateCalculator_2
   \                     ??BaudRateCalculator_3:
   \   0000006E   7F1C               ADDS     R7,R7,#+1
   \                     ??BaudRateCalculator_2:
   \   00000070   102F               CMP      R7,#+16
   \   00000072   1CDA               BGE      ??BaudRateCalculator_1
    101          			{
    102          				if(((clk / baudRate)%(div+1))<3)
   \   00000074   0098               LDR      R0,[SP, #+0]
   \   00000076   2100               MOVS     R1,R4
   \   00000078   ........           BL       __aeabi_uidiv
   \   0000007C   3900               MOVS     R1,R7
   \   0000007E   491C               ADDS     R1,R1,#+1
   \   00000080   ........           BL       __aeabi_uidivmod
   \   00000084   0329               CMP      R1,#+3
   \   00000086   F2D2               BCS      ??BaudRateCalculator_3
    103          				{
    104          					baud->DIVX1   = div;
   \   00000088   2868               LDR      R0,[R5, #+0]
   \   0000008A   ....               LDR      R1,??DataTable6_9  ;; 0xefffffff
   \   0000008C   0140               ANDS     R1,R1,R0
   \   0000008E   3807               LSLS     R0,R7,#+28
   \   00000090   8022               MOVS     R2,#+128
   \   00000092   5205               LSLS     R2,R2,#+21       ;; #+268435456
   \   00000094   0240               ANDS     R2,R2,R0
   \   00000096   0A43               ORRS     R2,R2,R1
   \   00000098   2A60               STR      R2,[R5, #+0]
    105          					tmp = clk / baudRate / (div+1) -2;
   \   0000009A   0098               LDR      R0,[SP, #+0]
   \   0000009C   2100               MOVS     R1,R4
   \   0000009E   ........           BL       __aeabi_uidiv
   \   000000A2   7F1C               ADDS     R7,R7,#+1
   \   000000A4   3900               MOVS     R1,R7
   \   000000A6   ........           BL       __aeabi_uidiv
   \   000000AA   0600               MOVS     R6,R0
   \   000000AC   B61E               SUBS     R6,R6,#+2
    106          					break;
    107          				}
    108          			}
    109          		}
    110          	}
    111          
    112          	baud->DIV = tmp; 
   \                     ??BaudRateCalculator_1:
   \   000000AE   2868               LDR      R0,[R5, #+0]
   \   000000B0   000C               LSRS     R0,R0,#+16
   \   000000B2   0004               LSLS     R0,R0,#+16
   \   000000B4   B1B2               UXTH     R1,R6
   \   000000B6   0143               ORRS     R1,R1,R0
   \   000000B8   2960               STR      R1,[R5, #+0]
    113          
    114          }
   \   000000BA   F1BD               POP      {R0,R4-R7,PC}    ;; return
    115          
    116          
    117          /*---------------------------------------------------------------------------------------------------------*/
    118          /* Function:     GetUartCLk                                                                       		   */
    119          /*                                                                                                         */
    120          /* Parameter:        																					   */	
    121          /*	             clk          		-[in] Uart Source Clock                                                */
    122          /*	             baudRate     		-[in] User seting BaudRate                                             */
    123          /*	             UART_BAUD_T *baud  -[in] Get User Settings                                                */
    124          /* Returns:                                                                                                */
    125          /*               Current Uart Clock                                                                        */
    126          /* Description:                                                                                            */
    127          /*               The function is used to get Uart clock                                                    */
    128          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    129          static uint32_t GetUartCLk(void)
    130          {
   \                     GetUartCLk:
   \   00000000   10B5               PUSH     {R4,LR}
    131          	uint32_t clk =0 , div;
   \   00000002   0020               MOVS     R0,#+0
    132          													/* Check UART Clock Source Setting */
    133          	if(SYSCLK->CLKSEL1.UART_S == 0)			
   \   00000004   ....               LDR      R1,??DrvUART_Open_0  ;; 0x50000214
   \   00000006   0968               LDR      R1,[R1, #+0]
   \   00000008   C022               MOVS     R2,#+192
   \   0000000A   9204               LSLS     R2,R2,#+18       ;; #+50331648
   \   0000000C   0A40               ANDS     R2,R2,R1
   \   0000000E   1100               MOVS     R1,R2
   \   00000010   090E               LSRS     R1,R1,#+24
   \   00000012   0029               CMP      R1,#+0
   \   00000014   05D1               BNE      ??GetUartCLk_0
    134          	{
    135          		clk = DrvSYS_GetEXTClock() * 1000;			/* Get External Clock From DrvSYS Setting */
   \   00000016   ........           BL       DrvSYS_GetEXTClock
   \   0000001A   FA21               MOVS     R1,#+250
   \   0000001C   8900               LSLS     R1,R1,#+2        ;; #+1000
   \   0000001E   4843               MULS     R0,R1,R0
   \   00000020   1AE0               B        ??GetUartCLk_1
    136          	}
    137          	else if(SYSCLK->CLKSEL1.UART_S == 1)
   \                     ??GetUartCLk_0:
   \   00000022   ....               LDR      R0,??DrvUART_Open_0  ;; 0x50000214
   \   00000024   0068               LDR      R0,[R0, #+0]
   \   00000026   C021               MOVS     R1,#+192
   \   00000028   8904               LSLS     R1,R1,#+18       ;; #+50331648
   \   0000002A   0140               ANDS     R1,R1,R0
   \   0000002C   0800               MOVS     R0,R1
   \   0000002E   000E               LSRS     R0,R0,#+24
   \   00000030   0128               CMP      R0,#+1
   \   00000032   10D1               BNE      ??GetUartCLk_2
    138          	{
    139          	 	div = SYSCLK->CLKDIV.UART_N;				/* According PLL Clock and UART_Divider to get clock */
   \   00000034   ....               LDR      R0,??DataTable6_10  ;; 0x50000218
   \   00000036   0068               LDR      R0,[R0, #+0]
   \   00000038   F021               MOVS     R1,#+240
   \   0000003A   0901               LSLS     R1,R1,#+4        ;; #+3840
   \   0000003C   0140               ANDS     R1,R1,R0
   \   0000003E   0C00               MOVS     R4,R1
   \   00000040   240A               LSRS     R4,R4,#+8
    140          	
    141          		clk = DrvSYS_GetPLLClock() * 1000 / (div+1);
   \   00000042   ........           BL       DrvSYS_GetPLLClock
   \   00000046   FA21               MOVS     R1,#+250
   \   00000048   8900               LSLS     R1,R1,#+2        ;; #+1000
   \   0000004A   4843               MULS     R0,R1,R0
   \   0000004C   641C               ADDS     R4,R4,#+1
   \   0000004E   2100               MOVS     R1,R4
   \   00000050   ........           BL       __aeabi_uidiv
   \   00000054   00E0               B        ??GetUartCLk_1
    142          	}
    143          	else
    144          		clk = 22000000;								/* Clock 22Mhz  */
   \                     ??GetUartCLk_2:
   \   00000056   ....               LDR      R0,??DataTable6_11  ;; 0x14fb180
    145          
    146          	return clk;
   \                     ??GetUartCLk_1:
   \   00000058   10BD               POP      {R4,PC}          ;; return
    147          }
    148          
    149           
    150          
    151          /*---------------------------------------------------------------------------------------------------------*/
    152          /* Function:     DrvUART_SetRTS				                                                               */
    153          /*                                                                                                         */
    154          /* Parameter:        																					   */	
    155          /*				 Port 			-[in]   UART Channel:  UART_PORT0 / UART_PORT1                             */
    156          /*               uint8_t	   	-[in]   RTS Value 					          	         				   */
    157          /* Returns:                                                                                                */
    158          /*               None                                                                                      */
    159          /*                                                                                                         */
    160          /* Description:                                                                                            */
    161          /*               The function is used to set RTS information	                                           */
    162          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    163          void DrvUART_SetRTS(UART_PORT port,uint8_t u8Value)
    164          {
   \                     DrvUART_SetRTS:
   \   00000000   00B5               PUSH     {LR}
    165          	
    166          	if(port == UART_PORT0)
   \   00000002   0028               CMP      R0,#+0
   \   00000004   0BD1               BNE      ??DrvUART_SetRTS_0
    167          		UART0->MCR.RTS_INV = u8Value;
   \   00000006   ....               LDR      R0,??DataTable6_12  ;; 0x40050010
   \   00000008   0068               LDR      R0,[R0, #+0]
   \   0000000A   0222               MOVS     R2,#+2
   \   0000000C   9043               BICS     R0,R0,R2
   \   0000000E   C9B2               UXTB     R1,R1
   \   00000010   4900               LSLS     R1,R1,#+1
   \   00000012   0222               MOVS     R2,#+2
   \   00000014   0A40               ANDS     R2,R2,R1
   \   00000016   0243               ORRS     R2,R2,R0
   \   00000018   ....               LDR      R0,??DataTable6_12  ;; 0x40050010
   \   0000001A   0260               STR      R2,[R0, #+0]
    168          	else if(port == UART_PORT1)	
    169          		UART1->MCR.RTS_INV = u8Value;
    170          	else
    171          		return;    									/* UART2 is not supported RTS */
    172          }	
   \                     ??DrvUART_SetRTS_1:
   \                     ??DrvUART_SetRTS_2:
   \   0000001C   00BD               POP      {PC}             ;; return
   \                     ??DrvUART_SetRTS_0:
   \   0000001E   8022               MOVS     R2,#+128
   \   00000020   5203               LSLS     R2,R2,#+13       ;; #+1048576
   \   00000022   9042               CMP      R0,R2
   \   00000024   0BD1               BNE      ??DrvUART_SetRTS_3
   \   00000026   ....               LDR      R0,??DataTable6_13  ;; 0x40150010
   \   00000028   0068               LDR      R0,[R0, #+0]
   \   0000002A   0222               MOVS     R2,#+2
   \   0000002C   9043               BICS     R0,R0,R2
   \   0000002E   C9B2               UXTB     R1,R1
   \   00000030   4900               LSLS     R1,R1,#+1
   \   00000032   0222               MOVS     R2,#+2
   \   00000034   0A40               ANDS     R2,R2,R1
   \   00000036   0243               ORRS     R2,R2,R0
   \   00000038   ....               LDR      R0,??DataTable6_13  ;; 0x40150010
   \   0000003A   0260               STR      R2,[R0, #+0]
   \   0000003C   EEE7               B        ??DrvUART_SetRTS_1
   \                     ??DrvUART_SetRTS_3:
   \   0000003E   EDE7               B        ??DrvUART_SetRTS_2
    173          
    174          
    175          
    176          /*---------------------------------------------------------------------------------------------------------*/
    177          /* Function:     DrvUART_Open                                                                        	   */
    178          /*                                                                                                         */
    179          /* Parameter:        																					   */	
    180          /*				 Port 	 -[in] UART Channel:  UART_PORT0 / UART_PORT1 /UART_PORT2                  		   */
    181          /*               sParam  -[in] the struct parameter to configure UART                                      */
    182          /*                         include of                                                                      */
    183          /*                           * u32BaudRate - Baud rate 													   */									        
    184          /*                           * u8cParity   - DRVUART_PARITY_NONE / DRVUART_PARITY_EVEN / DRVUART_PARITY_ODD*/
    185          /*                           * u8cDataBits - DRVUART_DATA_BITS_5 / DRVUART_DATA_BITS_6 					   */
    186          /*									  	 	 DRVUART_DATA_BITS_7 / DRVUART_DATA_BITS_8        			   */
    187          /*                           * u8cStopBits - DRVUART_STOPBITS_1 / STOPBITS_1_5 / STOPBITS_2   			   */
    188          /*                           * u8cRxTriggerLevel   - LEVEL_1_BYTE to LEVEL_62_BYTES                        */
    189          /*                           * u8TimeOut - Time out value	                                     		   */
    190          /*                                                                                                         */
    191          /*                                                                                                         */
    192          /* Returns:                                                                                                */
    193          /*               E_DRVUART_ERR_PORT_INVALID         												       */
    194          /*               E_DRVUART_ERR_PARITY_INVALID                    										   */
    195          /*               E_DRVUART_ERR_DATA_BITS_INVALID               											   */
    196          /*               E_DRVUART_ERR_STOP_BITS_INVALID                										   */
    197          /*               E_DRVUART_ERR_TRIGGERLEVEL_INVALID      												   */
    198          /*               E_DRVUART_ERR_ALLOC_MEMORY_FAIL                 										   */
    199          /*               E_SUCCESS                                                                          	   */
    200          /*                                                                                                         */
    201          /* Description:                                                                                            */
    202          /*               The function is used to initialize UART                                                   */
    203          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
    204          int32_t DrvUART_Open(UART_PORT port, STR_UART_T *sParam)
    205          {
   \                     DrvUART_Open:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0C00               MOVS     R4,R1
    206             
    207              /*-----------------------------------------------------------------------------------------------------*/
    208              /* Check UART port                                                                                     */
    209              /*-----------------------------------------------------------------------------------------------------*/
    210              if ((port != UART_PORT0) &&
    211                  (port != UART_PORT1) &&
    212          		(port != UART_PORT2))
   \   00000004   0028               CMP      R0,#+0
   \   00000006   09D0               BEQ      ??DrvUART_Open_1
   \   00000008   8021               MOVS     R1,#+128
   \   0000000A   4903               LSLS     R1,R1,#+13       ;; #+1048576
   \   0000000C   8842               CMP      R0,R1
   \   0000000E   05D0               BEQ      ??DrvUART_Open_1
   \   00000010   A021               MOVS     R1,#+160
   \   00000012   4903               LSLS     R1,R1,#+13       ;; #+1310720
   \   00000014   8842               CMP      R0,R1
   \   00000016   01D0               BEQ      ??DrvUART_Open_1
    213              {
    214          
    215          		return E_DRVUART_ERR_PORT_INVALID;
   \   00000018   AF48               LDR      R0,??DrvUART_Open_2  ;; 0xffff9802
   \   0000001A   06E2               B        ??DrvUART_Open_3
    216              }
    217          
    218          
    219              /*-----------------------------------------------------------------------------------------------------*/
    220              /* Check the supplied parity                                                                           */
    221              /*-----------------------------------------------------------------------------------------------------*/
    222              if ((sParam->u8cParity != DRVUART_PARITY_NONE) &&
    223                  (sParam->u8cParity != DRVUART_PARITY_EVEN) &&
    224                  (sParam->u8cParity != DRVUART_PARITY_ODD)  &&
    225                  (sParam->u8cParity != DRVUART_PARITY_MARK) &&
    226                  (sParam->u8cParity != DRVUART_PARITY_SPACE))
   \                     ??DrvUART_Open_1:
   \   0000001C   A179               LDRB     R1,[R4, #+6]
   \   0000001E   0029               CMP      R1,#+0
   \   00000020   0DD0               BEQ      ??DrvUART_Open_4
   \   00000022   A179               LDRB     R1,[R4, #+6]
   \   00000024   0329               CMP      R1,#+3
   \   00000026   0AD0               BEQ      ??DrvUART_Open_4
   \   00000028   A179               LDRB     R1,[R4, #+6]
   \   0000002A   0129               CMP      R1,#+1
   \   0000002C   07D0               BEQ      ??DrvUART_Open_4
   \   0000002E   A179               LDRB     R1,[R4, #+6]
   \   00000030   0529               CMP      R1,#+5
   \   00000032   04D0               BEQ      ??DrvUART_Open_4
   \   00000034   A179               LDRB     R1,[R4, #+6]
   \   00000036   0729               CMP      R1,#+7
   \   00000038   01D0               BEQ      ??DrvUART_Open_4
    227              {
    228           		return E_DRVUART_ERR_PARITY_INVALID;		
   \   0000003A   CF48               LDR      R0,??DrvUART_Open_5  ;; 0xffff9803
   \   0000003C   F5E1               B        ??DrvUART_Open_3
    229              }
    230              /*-----------------------------------------------------------------------------------------------------*/
    231              /* Check the supplied number of data bits                                                              */
    232              /*-----------------------------------------------------------------------------------------------------*/
    233              else if ((sParam->u8cDataBits != DRVUART_DATABITS_5) &&
    234                       (sParam->u8cDataBits != DRVUART_DATABITS_6) &&
    235                       (sParam->u8cDataBits != DRVUART_DATABITS_7) &&
    236                       (sParam->u8cDataBits != DRVUART_DATABITS_8))
   \                     ??DrvUART_Open_4:
   \   0000003E   2179               LDRB     R1,[R4, #+4]
   \   00000040   0029               CMP      R1,#+0
   \   00000042   0AD0               BEQ      ??DrvUART_Open_6
   \   00000044   2179               LDRB     R1,[R4, #+4]
   \   00000046   0129               CMP      R1,#+1
   \   00000048   07D0               BEQ      ??DrvUART_Open_6
   \   0000004A   2179               LDRB     R1,[R4, #+4]
   \   0000004C   0229               CMP      R1,#+2
   \   0000004E   04D0               BEQ      ??DrvUART_Open_6
   \   00000050   2179               LDRB     R1,[R4, #+4]
   \   00000052   0329               CMP      R1,#+3
   \   00000054   01D0               BEQ      ??DrvUART_Open_6
    237              {
    238           		return E_DRVUART_ERR_DATA_BITS_INVALID;	 
   \   00000056   A148               LDR      R0,??DrvUART_Open_2+0x4  ;; 0xffff9804
   \   00000058   E7E1               B        ??DrvUART_Open_3
    239              }
    240              /*-----------------------------------------------------------------------------------------------------*/
    241              /* Check the supplied number of stop bits                                                              */
    242              /*-----------------------------------------------------------------------------------------------------*/
    243              else if ((sParam->u8cStopBits != DRVUART_STOPBITS_1) &&
    244                       (sParam->u8cStopBits != DRVUART_STOPBITS_2) &&
    245                       (sParam->u8cStopBits != DRVUART_STOPBITS_1_5)
    246                       )
   \                     ??DrvUART_Open_6:
   \   0000005A   6179               LDRB     R1,[R4, #+5]
   \   0000005C   0029               CMP      R1,#+0
   \   0000005E   07D0               BEQ      ??DrvUART_Open_7
   \   00000060   6179               LDRB     R1,[R4, #+5]
   \   00000062   0429               CMP      R1,#+4
   \   00000064   04D0               BEQ      ??DrvUART_Open_7
   \   00000066   6179               LDRB     R1,[R4, #+5]
   \   00000068   0429               CMP      R1,#+4
   \   0000006A   01D0               BEQ      ??DrvUART_Open_7
    247              {
    248                	return E_DRVUART_ERR_STOP_BITS_INVALID;	 
   \   0000006C   9C48               LDR      R0,??DrvUART_Open_2+0x8  ;; 0xffff9805
   \   0000006E   DCE1               B        ??DrvUART_Open_3
    249              }
    250          
    251          
    252              /*-----------------------------------------------------------------------------------------------------*/
    253              /* Check the supplied nember of trigger level bytes                                                    */
    254              /*-----------------------------------------------------------------------------------------------------*/
    255              else if ((sParam->u8cRxTriggerLevel != DRVUART_FIFO_1BYTES) &&
    256                       (sParam->u8cRxTriggerLevel != DRVUART_FIFO_4BYTES) &&
    257                       (sParam->u8cRxTriggerLevel != DRVUART_FIFO_8BYTES) &&
    258                       (sParam->u8cRxTriggerLevel != DRVUART_FIFO_14BYTES)&&
    259                       (sParam->u8cRxTriggerLevel != DRVUART_FIFO_30BYTES)&&
    260                       (sParam->u8cRxTriggerLevel != DRVUART_FIFO_46BYTES)&&
    261                       (sParam->u8cRxTriggerLevel != DRVUART_FIFO_62BYTES))
   \                     ??DrvUART_Open_7:
   \   00000070   E179               LDRB     R1,[R4, #+7]
   \   00000072   0029               CMP      R1,#+0
   \   00000074   13D0               BEQ      ??DrvUART_Open_8
   \   00000076   E179               LDRB     R1,[R4, #+7]
   \   00000078   0129               CMP      R1,#+1
   \   0000007A   10D0               BEQ      ??DrvUART_Open_8
   \   0000007C   E179               LDRB     R1,[R4, #+7]
   \   0000007E   0229               CMP      R1,#+2
   \   00000080   0DD0               BEQ      ??DrvUART_Open_8
   \   00000082   E179               LDRB     R1,[R4, #+7]
   \   00000084   0329               CMP      R1,#+3
   \   00000086   0AD0               BEQ      ??DrvUART_Open_8
   \   00000088   E179               LDRB     R1,[R4, #+7]
   \   0000008A   0429               CMP      R1,#+4
   \   0000008C   07D0               BEQ      ??DrvUART_Open_8
   \   0000008E   E179               LDRB     R1,[R4, #+7]
   \   00000090   0529               CMP      R1,#+5
   \   00000092   04D0               BEQ      ??DrvUART_Open_8
   \   00000094   E179               LDRB     R1,[R4, #+7]
   \   00000096   0629               CMP      R1,#+6
   \   00000098   01D0               BEQ      ??DrvUART_Open_8
    262              {
    263          		return E_DRVUART_ERR_TRIGGERLEVEL_INVALID;		 
   \   0000009A   C148               LDR      R0,??DrvUART_Open_9  ;; 0xffff9806
   \   0000009C   C5E1               B        ??DrvUART_Open_3
    264              }				
    265          
    266          	if(port == UART_PORT0)
   \                     ??DrvUART_Open_8:
   \   0000009E   0028               CMP      R0,#+0
   \   000000A0   26D1               BNE      ??DrvUART_Open_10
    267          	{
    268          		/* Reset IP */
    269          		SYS->IPRSTC2.UART0_RST = 1;
   \   000000A2   C049               LDR      R1,??DrvUART_Open_9+0x4  ;; 0x5000000c
   \   000000A4   0968               LDR      R1,[R1, #+0]
   \   000000A6   8022               MOVS     R2,#+128
   \   000000A8   5202               LSLS     R2,R2,#+9        ;; #+65536
   \   000000AA   0A43               ORRS     R2,R2,R1
   \   000000AC   BD49               LDR      R1,??DrvUART_Open_9+0x4  ;; 0x5000000c
   \   000000AE   0A60               STR      R2,[R1, #+0]
    270          		SYS->IPRSTC2.UART0_RST = 0;
   \   000000B0   BC49               LDR      R1,??DrvUART_Open_9+0x4  ;; 0x5000000c
   \   000000B2   0968               LDR      R1,[R1, #+0]
   \   000000B4   DD4A               LDR      R2,??DrvUART_Open_11  ;; 0xfffeffff
   \   000000B6   0A40               ANDS     R2,R2,R1
   \   000000B8   BA49               LDR      R1,??DrvUART_Open_9+0x4  ;; 0x5000000c
   \   000000BA   0A60               STR      R2,[R1, #+0]
    271          		
    272          		/* Enable UART clock */
    273          	    SYSCLK->APBCLK.UART0_EN = 1;
   \   000000BC   BA49               LDR      R1,??DrvUART_Open_9+0x8  ;; 0x50000208
   \   000000BE   0968               LDR      R1,[R1, #+0]
   \   000000C0   8022               MOVS     R2,#+128
   \   000000C2   5202               LSLS     R2,R2,#+9        ;; #+65536
   \   000000C4   0A43               ORRS     R2,R2,R1
   \   000000C6   B849               LDR      R1,??DrvUART_Open_9+0x8  ;; 0x50000208
   \   000000C8   0A60               STR      R2,[R1, #+0]
    274          	    
    275          		/* Select UART clock source */
    276          	    SYSCLK->CLKSEL1.UART_S = 0;
   \   000000CA   5349               LDR      R1,??DrvUART_Open_0  ;; 0x50000214
   \   000000CC   0968               LDR      R1,[R1, #+0]
   \   000000CE   B74A               LDR      R2,??DrvUART_Open_9+0xC  ;; 0xfcffffff
   \   000000D0   0A40               ANDS     R2,R2,R1
   \   000000D2   5149               LDR      R1,??DrvUART_Open_0  ;; 0x50000214
   \   000000D4   0A60               STR      R2,[R1, #+0]
    277          	    SYSCLK->PWRCON.XTL12M_EN = 1;
   \   000000D6   B649               LDR      R1,??DrvUART_Open_9+0x10  ;; 0x50000200
   \   000000D8   0968               LDR      R1,[R1, #+0]
   \   000000DA   0122               MOVS     R2,#+1
   \   000000DC   0A43               ORRS     R2,R2,R1
   \   000000DE   B449               LDR      R1,??DrvUART_Open_9+0x10  ;; 0x50000200
   \   000000E0   0A60               STR      R2,[R1, #+0]
    278          	    
    279          		/* Select UART clock source */
    280          	    SYSCLK->CLKSEL1.UART_S = 0;
   \   000000E2   4D49               LDR      R1,??DrvUART_Open_0  ;; 0x50000214
   \   000000E4   0968               LDR      R1,[R1, #+0]
   \   000000E6   B14A               LDR      R2,??DrvUART_Open_9+0xC  ;; 0xfcffffff
   \   000000E8   0A40               ANDS     R2,R2,R1
   \   000000EA   4B49               LDR      R1,??DrvUART_Open_0  ;; 0x50000214
   \   000000EC   0A60               STR      R2,[R1, #+0]
   \   000000EE   44E0               B        ??DrvUART_Open_12
    281          		
    282          	}
    283          	else if(port == UART_PORT1)
   \                     ??DrvUART_Open_10:
   \   000000F0   8021               MOVS     R1,#+128
   \   000000F2   4903               LSLS     R1,R1,#+13       ;; #+1048576
   \   000000F4   8842               CMP      R0,R1
   \   000000F6   20D1               BNE      ??DrvUART_Open_13
    284          	{
    285          		/* Reset IP */
    286          		SYS->IPRSTC2.UART1_RST = 1;
   \   000000F8   AA49               LDR      R1,??DrvUART_Open_9+0x4  ;; 0x5000000c
   \   000000FA   0968               LDR      R1,[R1, #+0]
   \   000000FC   8022               MOVS     R2,#+128
   \   000000FE   9202               LSLS     R2,R2,#+10       ;; #+131072
   \   00000100   0A43               ORRS     R2,R2,R1
   \   00000102   A849               LDR      R1,??DrvUART_Open_9+0x4  ;; 0x5000000c
   \   00000104   0A60               STR      R2,[R1, #+0]
    287          		SYS->IPRSTC2.UART1_RST = 0;
   \   00000106   A749               LDR      R1,??DrvUART_Open_9+0x4  ;; 0x5000000c
   \   00000108   0968               LDR      R1,[R1, #+0]
   \   0000010A   AA4A               LDR      R2,??DrvUART_Open_9+0x14  ;; 0xfffdffff
   \   0000010C   0A40               ANDS     R2,R2,R1
   \   0000010E   A549               LDR      R1,??DrvUART_Open_9+0x4  ;; 0x5000000c
   \   00000110   0A60               STR      R2,[R1, #+0]
    288          		
    289          		/* Enable UART clock */
    290          	    SYSCLK->APBCLK.UART1_EN = 1;
   \   00000112   A549               LDR      R1,??DrvUART_Open_9+0x8  ;; 0x50000208
   \   00000114   0968               LDR      R1,[R1, #+0]
   \   00000116   8022               MOVS     R2,#+128
   \   00000118   9202               LSLS     R2,R2,#+10       ;; #+131072
   \   0000011A   0A43               ORRS     R2,R2,R1
   \   0000011C   A249               LDR      R1,??DrvUART_Open_9+0x8  ;; 0x50000208
   \   0000011E   0A60               STR      R2,[R1, #+0]
    291          		SYSCLK->PWRCON.XTL12M_EN = 1;
   \   00000120   A349               LDR      R1,??DrvUART_Open_9+0x10  ;; 0x50000200
   \   00000122   0968               LDR      R1,[R1, #+0]
   \   00000124   0122               MOVS     R2,#+1
   \   00000126   0A43               ORRS     R2,R2,R1
   \   00000128   A149               LDR      R1,??DrvUART_Open_9+0x10  ;; 0x50000200
   \   0000012A   0A60               STR      R2,[R1, #+0]
    292          	    /* Select UART clock source */
    293          	    SYSCLK->CLKSEL1.UART_S = 0;
   \   0000012C   3A49               LDR      R1,??DrvUART_Open_0  ;; 0x50000214
   \   0000012E   0968               LDR      R1,[R1, #+0]
   \   00000130   9E4A               LDR      R2,??DrvUART_Open_9+0xC  ;; 0xfcffffff
   \   00000132   0A40               ANDS     R2,R2,R1
   \   00000134   3849               LDR      R1,??DrvUART_Open_0  ;; 0x50000214
   \   00000136   0A60               STR      R2,[R1, #+0]
   \   00000138   1FE0               B        ??DrvUART_Open_12
    294          		
    295          	}
    296          	else
    297          	{
    298          		/* Reset IP */
    299          		SYS->IPRSTC2.UART2_RST = 1;
   \                     ??DrvUART_Open_13:
   \   0000013A   9A49               LDR      R1,??DrvUART_Open_9+0x4  ;; 0x5000000c
   \   0000013C   0968               LDR      R1,[R1, #+0]
   \   0000013E   8022               MOVS     R2,#+128
   \   00000140   D202               LSLS     R2,R2,#+11       ;; #+262144
   \   00000142   0A43               ORRS     R2,R2,R1
   \   00000144   9749               LDR      R1,??DrvUART_Open_9+0x4  ;; 0x5000000c
   \   00000146   0A60               STR      R2,[R1, #+0]
    300          		SYS->IPRSTC2.UART2_RST = 0;
   \   00000148   9649               LDR      R1,??DrvUART_Open_9+0x4  ;; 0x5000000c
   \   0000014A   0968               LDR      R1,[R1, #+0]
   \   0000014C   ....               LDR      R2,??DataTable7  ;; 0xfffbffff
   \   0000014E   0A40               ANDS     R2,R2,R1
   \   00000150   9449               LDR      R1,??DrvUART_Open_9+0x4  ;; 0x5000000c
   \   00000152   0A60               STR      R2,[R1, #+0]
    301          		
    302          		/* Enable UART clock */
    303          	    SYSCLK->APBCLK.UART2_EN = 1;
   \   00000154   9449               LDR      R1,??DrvUART_Open_9+0x8  ;; 0x50000208
   \   00000156   0968               LDR      R1,[R1, #+0]
   \   00000158   8022               MOVS     R2,#+128
   \   0000015A   D202               LSLS     R2,R2,#+11       ;; #+262144
   \   0000015C   0A43               ORRS     R2,R2,R1
   \   0000015E   9249               LDR      R1,??DrvUART_Open_9+0x8  ;; 0x50000208
   \   00000160   0A60               STR      R2,[R1, #+0]
    304          		SYSCLK->PWRCON.XTL12M_EN = 1;
   \   00000162   9349               LDR      R1,??DrvUART_Open_9+0x10  ;; 0x50000200
   \   00000164   0968               LDR      R1,[R1, #+0]
   \   00000166   0122               MOVS     R2,#+1
   \   00000168   0A43               ORRS     R2,R2,R1
   \   0000016A   9149               LDR      R1,??DrvUART_Open_9+0x10  ;; 0x50000200
   \   0000016C   0A60               STR      R2,[R1, #+0]
    305          
    306          	    /* Select UART clock source */
    307          	    SYSCLK->CLKSEL1.UART_S = 0;
   \   0000016E   2A49               LDR      R1,??DrvUART_Open_0  ;; 0x50000214
   \   00000170   0968               LDR      R1,[R1, #+0]
   \   00000172   8E4A               LDR      R2,??DrvUART_Open_9+0xC  ;; 0xfcffffff
   \   00000174   0A40               ANDS     R2,R2,R1
   \   00000176   2849               LDR      R1,??DrvUART_Open_0  ;; 0x50000214
   \   00000178   0A60               STR      R2,[R1, #+0]
    308          	
    309          	}
    310              
    311          	/* Tx FIFO Reset & Rx FIFO Reset & FIFO Mode Enable */
    312          	if(port == UART_PORT0)	
   \                     ??DrvUART_Open_12:
   \   0000017A   0028               CMP      R0,#+0
   \   0000017C   0CD1               BNE      ??DrvUART_Open_14
    313          	{
    314          	  	UART0->FCR.TFR =1;
   \   0000017E   ....               LDR      R1,??DataTable7_1  ;; 0x40050008
   \   00000180   0968               LDR      R1,[R1, #+0]
   \   00000182   0422               MOVS     R2,#+4
   \   00000184   0A43               ORRS     R2,R2,R1
   \   00000186   ....               LDR      R1,??DataTable7_1  ;; 0x40050008
   \   00000188   0A60               STR      R2,[R1, #+0]
    315          	  	UART0->FCR.RFR =1;
   \   0000018A   ....               LDR      R1,??DataTable7_1  ;; 0x40050008
   \   0000018C   0968               LDR      R1,[R1, #+0]
   \   0000018E   0222               MOVS     R2,#+2
   \   00000190   0A43               ORRS     R2,R2,R1
   \   00000192   ....               LDR      R1,??DataTable7_1  ;; 0x40050008
   \   00000194   0A60               STR      R2,[R1, #+0]
   \   00000196   1CE0               B        ??DrvUART_Open_15
    316          	}
    317          	else if(port == UART_PORT1)	
   \                     ??DrvUART_Open_14:
   \   00000198   8021               MOVS     R1,#+128
   \   0000019A   4903               LSLS     R1,R1,#+13       ;; #+1048576
   \   0000019C   8842               CMP      R0,R1
   \   0000019E   0CD1               BNE      ??DrvUART_Open_16
    318          	{
    319          	  	UART1->FCR.TFR =1;
   \   000001A0   ....               LDR      R1,??DataTable7_2  ;; 0x40150008
   \   000001A2   0968               LDR      R1,[R1, #+0]
   \   000001A4   0422               MOVS     R2,#+4
   \   000001A6   0A43               ORRS     R2,R2,R1
   \   000001A8   ....               LDR      R1,??DataTable7_2  ;; 0x40150008
   \   000001AA   0A60               STR      R2,[R1, #+0]
    320          	  	UART1->FCR.RFR =1;
   \   000001AC   ....               LDR      R1,??DataTable7_2  ;; 0x40150008
   \   000001AE   0968               LDR      R1,[R1, #+0]
   \   000001B0   0222               MOVS     R2,#+2
   \   000001B2   0A43               ORRS     R2,R2,R1
   \   000001B4   ....               LDR      R1,??DataTable7_2  ;; 0x40150008
   \   000001B6   0A60               STR      R2,[R1, #+0]
   \   000001B8   0BE0               B        ??DrvUART_Open_15
    321          	}
    322          	else
    323          	{
    324          	  	UART2->FCR.TFR =1;
   \                     ??DrvUART_Open_16:
   \   000001BA   ....               LDR      R1,??DataTable7_3  ;; 0x40154008
   \   000001BC   0968               LDR      R1,[R1, #+0]
   \   000001BE   0422               MOVS     R2,#+4
   \   000001C0   0A43               ORRS     R2,R2,R1
   \   000001C2   ....               LDR      R1,??DataTable7_3  ;; 0x40154008
   \   000001C4   0A60               STR      R2,[R1, #+0]
    325          	  	UART2->FCR.RFR =1;
   \   000001C6   ....               LDR      R1,??DataTable7_3  ;; 0x40154008
   \   000001C8   0968               LDR      R1,[R1, #+0]
   \   000001CA   0222               MOVS     R2,#+2
   \   000001CC   0A43               ORRS     R2,R2,R1
   \   000001CE   ....               LDR      R1,??DataTable7_3  ;; 0x40154008
   \   000001D0   0A60               STR      R2,[R1, #+0]
    326          	}
    327          
    328          	if (port == UART_PORT0)
   \                     ??DrvUART_Open_15:
   \   000001D2   0028               CMP      R0,#+0
   \   000001D4   5BD1               BNE      ??DrvUART_Open_17
    329          	{
    330          		/* Set Rx Trigger Level */
    331          		UART0->FCR.RFITL = sParam->u8cRxTriggerLevel;  
   \   000001D6   ....               LDR      R0,??DataTable7_1  ;; 0x40050008
   \   000001D8   0068               LDR      R0,[R0, #+0]
   \   000001DA   F021               MOVS     R1,#+240
   \   000001DC   8843               BICS     R0,R0,R1
   \   000001DE   E179               LDRB     R1,[R4, #+7]
   \   000001E0   0901               LSLS     R1,R1,#+4
   \   000001E2   F022               MOVS     R2,#+240
   \   000001E4   0A40               ANDS     R2,R2,R1
   \   000001E6   0243               ORRS     R2,R2,R0
   \   000001E8   ....               LDR      R0,??DataTable7_1  ;; 0x40050008
   \   000001EA   0260               STR      R2,[R0, #+0]
    332          	
    333          		/* Set Parity & Data bits & Stop bits */
    334          		UART0->LCR.SPE	=((sParam->u8cParity)&0x4)?1:0;
   \   000001EC   A079               LDRB     R0,[R4, #+6]
   \   000001EE   4007               LSLS     R0,R0,#+29
   \   000001F0   01D5               BPL      ??DrvUART_Open_18
   \   000001F2   0120               MOVS     R0,#+1
   \   000001F4   00E0               B        ??DrvUART_Open_19
   \                     ??DrvUART_Open_18:
   \   000001F6   0020               MOVS     R0,#+0
   \                     ??DrvUART_Open_19:
   \   000001F8   ....               LDR      R1,??DataTable8  ;; 0x4005000c
   \   000001FA   0968               LDR      R1,[R1, #+0]
   \   000001FC   2022               MOVS     R2,#+32
   \   000001FE   9143               BICS     R1,R1,R2
   \   00000200   C0B2               UXTB     R0,R0
   \   00000202   4001               LSLS     R0,R0,#+5
   \   00000204   2022               MOVS     R2,#+32
   \   00000206   0240               ANDS     R2,R2,R0
   \   00000208   0A43               ORRS     R2,R2,R1
   \   0000020A   ....               LDR      R0,??DataTable8  ;; 0x4005000c
   \   0000020C   0260               STR      R2,[R0, #+0]
    335          		UART0->LCR.EPE	=((sParam->u8cParity)&0x2)?1:0;
   \   0000020E   A079               LDRB     R0,[R4, #+6]
   \   00000210   8007               LSLS     R0,R0,#+30
   \   00000212   03D5               BPL      ??DrvUART_Open_20
   \   00000214   0120               MOVS     R0,#+1
   \   00000216   02E0               B        ??DrvUART_Open_21
   \                     ??DrvUART_Open_0:
   \   00000218   14020050           DC32     0x50000214
   \                     ??DrvUART_Open_20:
   \   0000021C   0020               MOVS     R0,#+0
   \                     ??DrvUART_Open_21:
   \   0000021E   ....               LDR      R1,??DataTable8  ;; 0x4005000c
   \   00000220   0968               LDR      R1,[R1, #+0]
   \   00000222   1022               MOVS     R2,#+16
   \   00000224   9143               BICS     R1,R1,R2
   \   00000226   C0B2               UXTB     R0,R0
   \   00000228   0001               LSLS     R0,R0,#+4
   \   0000022A   1022               MOVS     R2,#+16
   \   0000022C   0240               ANDS     R2,R2,R0
   \   0000022E   0A43               ORRS     R2,R2,R1
   \   00000230   ....               LDR      R0,??DataTable8  ;; 0x4005000c
   \   00000232   0260               STR      R2,[R0, #+0]
    336          		UART0->LCR.PBE	=((sParam->u8cParity)&0x1)?1:0;
   \   00000234   ....               LDR      R0,??DataTable8  ;; 0x4005000c
   \   00000236   0068               LDR      R0,[R0, #+0]
   \   00000238   0821               MOVS     R1,#+8
   \   0000023A   8843               BICS     R0,R0,R1
   \   0000023C   A179               LDRB     R1,[R4, #+6]
   \   0000023E   0A00               MOVS     R2,R1
   \   00000240   D207               LSLS     R2,R2,#+31       ;; ZeroExtS R2,R2,#+31,#+31
   \   00000242   D20F               LSRS     R2,R2,#+31
   \   00000244   D100               LSLS     R1,R2,#+3
   \   00000246   0822               MOVS     R2,#+8
   \   00000248   0A40               ANDS     R2,R2,R1
   \   0000024A   0243               ORRS     R2,R2,R0
   \   0000024C   ....               LDR      R0,??DataTable8  ;; 0x4005000c
   \   0000024E   0260               STR      R2,[R0, #+0]
    337          		
    338          		UART0->LCR.WLS	=sParam->u8cDataBits;
   \   00000250   ....               LDR      R0,??DataTable8  ;; 0x4005000c
   \   00000252   0068               LDR      R0,[R0, #+0]
   \   00000254   0321               MOVS     R1,#+3
   \   00000256   8843               BICS     R0,R0,R1
   \   00000258   2179               LDRB     R1,[R4, #+4]
   \   0000025A   8907               LSLS     R1,R1,#+30       ;; ZeroExtS R1,R1,#+30,#+30
   \   0000025C   890F               LSRS     R1,R1,#+30
   \   0000025E   0143               ORRS     R1,R1,R0
   \   00000260   ....               LDR      R0,??DataTable8  ;; 0x4005000c
   \   00000262   0160               STR      R1,[R0, #+0]
    339          		UART0->LCR.NSB	=sParam->u8cStopBits;
   \   00000264   ....               LDR      R0,??DataTable8  ;; 0x4005000c
   \   00000266   0068               LDR      R0,[R0, #+0]
   \   00000268   0421               MOVS     R1,#+4
   \   0000026A   8843               BICS     R0,R0,R1
   \   0000026C   6179               LDRB     R1,[R4, #+5]
   \   0000026E   8900               LSLS     R1,R1,#+2
   \   00000270   0422               MOVS     R2,#+4
   \   00000272   0A40               ANDS     R2,R2,R1
   \   00000274   0243               ORRS     R2,R2,R0
   \   00000276   ....               LDR      R0,??DataTable8  ;; 0x4005000c
   \   00000278   0260               STR      R2,[R0, #+0]
    340          		
    341          		/* Set Time-Out */
    342          		UART0->TOR 		=sParam->u8TimeOut;
   \   0000027A   207A               LDRB     R0,[R4, #+8]
   \   0000027C   ....               LDR      R1,??DataTable8_1  ;; 0x40050020
   \   0000027E   0860               STR      R0,[R1, #+0]
    343          
    344          		/* Set BaudRate */
    345          		BaudRateCalculator(GetUartCLk(), sParam->u32BaudRate, &UART0->BAUD);
   \   00000280   ........           BL       GetUartCLk
   \   00000284   ....               LDR      R2,??DataTable8_2  ;; 0x40050024
   \   00000286   2168               LDR      R1,[R4, #+0]
   \   00000288   ........           BL       BaudRateCalculator
   \   0000028C   CCE0               B        ??DrvUART_Open_22
    346          	}
    347          	else if(port == UART_PORT1)
   \                     ??DrvUART_Open_17:
   \   0000028E   8021               MOVS     R1,#+128
   \   00000290   4903               LSLS     R1,R1,#+13       ;; #+1048576
   \   00000292   8842               CMP      R0,R1
   \   00000294   5FD1               BNE      ??DrvUART_Open_23
    348          	{
    349          	 	/* Set Rx Trigger Level */
    350          		UART1->FCR.RFITL = sParam->u8cRxTriggerLevel;  
   \   00000296   ....               LDR      R0,??DataTable7_2  ;; 0x40150008
   \   00000298   0068               LDR      R0,[R0, #+0]
   \   0000029A   F021               MOVS     R1,#+240
   \   0000029C   8843               BICS     R0,R0,R1
   \   0000029E   E179               LDRB     R1,[R4, #+7]
   \   000002A0   0901               LSLS     R1,R1,#+4
   \   000002A2   F022               MOVS     R2,#+240
   \   000002A4   0A40               ANDS     R2,R2,R1
   \   000002A6   0243               ORRS     R2,R2,R0
   \   000002A8   ....               LDR      R0,??DataTable7_2  ;; 0x40150008
   \   000002AA   0260               STR      R2,[R0, #+0]
    351          	
    352          		/* Set Parity & Data bits & Stop bits */
    353          		UART1->LCR.SPE	=((sParam->u8cParity)&0x4)?1:0;
   \   000002AC   A079               LDRB     R0,[R4, #+6]
   \   000002AE   4007               LSLS     R0,R0,#+29
   \   000002B0   01D5               BPL      ??DrvUART_Open_24
   \   000002B2   0120               MOVS     R0,#+1
   \   000002B4   00E0               B        ??DrvUART_Open_25
   \                     ??DrvUART_Open_24:
   \   000002B6   0020               MOVS     R0,#+0
   \                     ??DrvUART_Open_25:
   \   000002B8   ....               LDR      R1,??DataTable8_3  ;; 0x4015000c
   \   000002BA   0968               LDR      R1,[R1, #+0]
   \   000002BC   2022               MOVS     R2,#+32
   \   000002BE   9143               BICS     R1,R1,R2
   \   000002C0   C0B2               UXTB     R0,R0
   \   000002C2   4001               LSLS     R0,R0,#+5
   \   000002C4   2022               MOVS     R2,#+32
   \   000002C6   0240               ANDS     R2,R2,R0
   \   000002C8   0A43               ORRS     R2,R2,R1
   \   000002CA   ....               LDR      R0,??DataTable8_3  ;; 0x4015000c
   \   000002CC   0260               STR      R2,[R0, #+0]
    354          		UART1->LCR.EPE	=((sParam->u8cParity)&0x2)?1:0;
   \   000002CE   A079               LDRB     R0,[R4, #+6]
   \   000002D0   8007               LSLS     R0,R0,#+30
   \   000002D2   07D5               BPL      ??DrvUART_Open_26
   \   000002D4   0120               MOVS     R0,#+1
   \   000002D6   06E0               B        ??DrvUART_Open_27
   \                     ??DrvUART_Open_2:
   \   000002D8   0298FFFF           DC32     0xffff9802
   \   000002DC   0498FFFF           DC32     0xffff9804
   \   000002E0   0598FFFF           DC32     0xffff9805
   \                     ??DrvUART_Open_26:
   \   000002E4   0020               MOVS     R0,#+0
   \                     ??DrvUART_Open_27:
   \   000002E6   ....               LDR      R1,??DataTable8_3  ;; 0x4015000c
   \   000002E8   0968               LDR      R1,[R1, #+0]
   \   000002EA   1022               MOVS     R2,#+16
   \   000002EC   9143               BICS     R1,R1,R2
   \   000002EE   C0B2               UXTB     R0,R0
   \   000002F0   0001               LSLS     R0,R0,#+4
   \   000002F2   1022               MOVS     R2,#+16
   \   000002F4   0240               ANDS     R2,R2,R0
   \   000002F6   0A43               ORRS     R2,R2,R1
   \   000002F8   ....               LDR      R0,??DataTable8_3  ;; 0x4015000c
   \   000002FA   0260               STR      R2,[R0, #+0]
    355          		UART1->LCR.PBE	=((sParam->u8cParity)&0x1)?1:0;
   \   000002FC   ....               LDR      R0,??DataTable8_3  ;; 0x4015000c
   \   000002FE   0068               LDR      R0,[R0, #+0]
   \   00000300   0821               MOVS     R1,#+8
   \   00000302   8843               BICS     R0,R0,R1
   \   00000304   A179               LDRB     R1,[R4, #+6]
   \   00000306   0A00               MOVS     R2,R1
   \   00000308   D207               LSLS     R2,R2,#+31       ;; ZeroExtS R2,R2,#+31,#+31
   \   0000030A   D20F               LSRS     R2,R2,#+31
   \   0000030C   D100               LSLS     R1,R2,#+3
   \   0000030E   0822               MOVS     R2,#+8
   \   00000310   0A40               ANDS     R2,R2,R1
   \   00000312   0243               ORRS     R2,R2,R0
   \   00000314   ....               LDR      R0,??DataTable8_3  ;; 0x4015000c
   \   00000316   0260               STR      R2,[R0, #+0]
    356          		
    357          		UART1->LCR.WLS	=sParam->u8cDataBits;
   \   00000318   ....               LDR      R0,??DataTable8_3  ;; 0x4015000c
   \   0000031A   0068               LDR      R0,[R0, #+0]
   \   0000031C   0321               MOVS     R1,#+3
   \   0000031E   8843               BICS     R0,R0,R1
   \   00000320   2179               LDRB     R1,[R4, #+4]
   \   00000322   8907               LSLS     R1,R1,#+30       ;; ZeroExtS R1,R1,#+30,#+30
   \   00000324   890F               LSRS     R1,R1,#+30
   \   00000326   0143               ORRS     R1,R1,R0
   \   00000328   ....               LDR      R0,??DataTable8_3  ;; 0x4015000c
   \   0000032A   0160               STR      R1,[R0, #+0]
    358          		UART1->LCR.NSB	=sParam->u8cStopBits;
   \   0000032C   ....               LDR      R0,??DataTable8_3  ;; 0x4015000c
   \   0000032E   0068               LDR      R0,[R0, #+0]
   \   00000330   0421               MOVS     R1,#+4
   \   00000332   8843               BICS     R0,R0,R1
   \   00000334   6179               LDRB     R1,[R4, #+5]
   \   00000336   8900               LSLS     R1,R1,#+2
   \   00000338   0422               MOVS     R2,#+4
   \   0000033A   0A40               ANDS     R2,R2,R1
   \   0000033C   0243               ORRS     R2,R2,R0
   \   0000033E   ....               LDR      R0,??DataTable8_3  ;; 0x4015000c
   \   00000340   0260               STR      R2,[R0, #+0]
    359          		
    360          		/* Set Time-Out */
    361          		UART1->TOR 		=sParam->u8TimeOut;
   \   00000342   207A               LDRB     R0,[R4, #+8]
   \   00000344   ....               LDR      R1,??DataTable8_4  ;; 0x40150020
   \   00000346   0860               STR      R0,[R1, #+0]
    362          	    
    363          		/* Set BaudRate */
    364          		BaudRateCalculator(GetUartCLk(), sParam->u32BaudRate, &UART1->BAUD);
   \   00000348   ........           BL       GetUartCLk
   \   0000034C   ....               LDR      R2,??DataTable8_5  ;; 0x40150024
   \   0000034E   2168               LDR      R1,[R4, #+0]
   \   00000350   ........           BL       BaudRateCalculator
   \   00000354   68E0               B        ??DrvUART_Open_22
    365          	}
    366          	else 
    367          	{
    368          	 	/* Set Rx Trigger Level */
    369          		UART2->FCR.RFITL = sParam->u8cRxTriggerLevel;  
   \                     ??DrvUART_Open_23:
   \   00000356   ....               LDR      R0,??DataTable7_3  ;; 0x40154008
   \   00000358   0068               LDR      R0,[R0, #+0]
   \   0000035A   F021               MOVS     R1,#+240
   \   0000035C   8843               BICS     R0,R0,R1
   \   0000035E   E179               LDRB     R1,[R4, #+7]
   \   00000360   0901               LSLS     R1,R1,#+4
   \   00000362   F022               MOVS     R2,#+240
   \   00000364   0A40               ANDS     R2,R2,R1
   \   00000366   0243               ORRS     R2,R2,R0
   \   00000368   ....               LDR      R0,??DataTable7_3  ;; 0x40154008
   \   0000036A   0260               STR      R2,[R0, #+0]
    370          	
    371          		/* Set Parity & Data bits & Stop bits */
    372          		UART2->LCR.SPE	=((sParam->u8cParity)&0x4)?1:0;
   \   0000036C   A079               LDRB     R0,[R4, #+6]
   \   0000036E   4007               LSLS     R0,R0,#+29
   \   00000370   04D5               BPL      ??DrvUART_Open_28
   \   00000372   0120               MOVS     R0,#+1
   \   00000374   03E0               B        ??DrvUART_Open_29
   \   00000376   00BF               Nop      
   \                     ??DrvUART_Open_5:
   \   00000378   0398FFFF           DC32     0xffff9803
   \                     ??DrvUART_Open_28:
   \   0000037C   0020               MOVS     R0,#+0
   \                     ??DrvUART_Open_29:
   \   0000037E   ....               LDR      R1,??DataTable8_6  ;; 0x4015400c
   \   00000380   0968               LDR      R1,[R1, #+0]
   \   00000382   2022               MOVS     R2,#+32
   \   00000384   9143               BICS     R1,R1,R2
   \   00000386   C0B2               UXTB     R0,R0
   \   00000388   4001               LSLS     R0,R0,#+5
   \   0000038A   2022               MOVS     R2,#+32
   \   0000038C   0240               ANDS     R2,R2,R0
   \   0000038E   0A43               ORRS     R2,R2,R1
   \   00000390   ....               LDR      R0,??DataTable8_6  ;; 0x4015400c
   \   00000392   0260               STR      R2,[R0, #+0]
    373          		UART2->LCR.EPE	=((sParam->u8cParity)&0x2)?1:0;
   \   00000394   A079               LDRB     R0,[R4, #+6]
   \   00000396   8007               LSLS     R0,R0,#+30
   \   00000398   0ED5               BPL      ??DrvUART_Open_30
   \   0000039A   0120               MOVS     R0,#+1
   \   0000039C   0DE0               B        ??DrvUART_Open_31
   \   0000039E   00BF               Nop      
   \                     ??DrvUART_Open_9:
   \   000003A0   0698FFFF           DC32     0xffff9806
   \   000003A4   0C000050           DC32     0x5000000c
   \   000003A8   08020050           DC32     0x50000208
   \   000003AC   FFFFFFFC           DC32     0xfcffffff
   \   000003B0   00020050           DC32     0x50000200
   \   000003B4   FFFFFDFF           DC32     0xfffdffff
   \                     ??DrvUART_Open_30:
   \   000003B8   0020               MOVS     R0,#+0
   \                     ??DrvUART_Open_31:
   \   000003BA   ....               LDR      R1,??DataTable8_6  ;; 0x4015400c
   \   000003BC   0968               LDR      R1,[R1, #+0]
   \   000003BE   1022               MOVS     R2,#+16
   \   000003C0   9143               BICS     R1,R1,R2
   \   000003C2   C0B2               UXTB     R0,R0
   \   000003C4   0001               LSLS     R0,R0,#+4
   \   000003C6   1022               MOVS     R2,#+16
   \   000003C8   0240               ANDS     R2,R2,R0
   \   000003CA   0A43               ORRS     R2,R2,R1
   \   000003CC   ....               LDR      R0,??DataTable8_6  ;; 0x4015400c
   \   000003CE   0260               STR      R2,[R0, #+0]
    374          		UART2->LCR.PBE	=((sParam->u8cParity)&0x1)?1:0;
   \   000003D0   ....               LDR      R0,??DataTable8_6  ;; 0x4015400c
   \   000003D2   0068               LDR      R0,[R0, #+0]
   \   000003D4   0821               MOVS     R1,#+8
   \   000003D6   8843               BICS     R0,R0,R1
   \   000003D8   A179               LDRB     R1,[R4, #+6]
   \   000003DA   0A00               MOVS     R2,R1
   \   000003DC   D207               LSLS     R2,R2,#+31       ;; ZeroExtS R2,R2,#+31,#+31
   \   000003DE   D20F               LSRS     R2,R2,#+31
   \   000003E0   D100               LSLS     R1,R2,#+3
   \   000003E2   0822               MOVS     R2,#+8
   \   000003E4   0A40               ANDS     R2,R2,R1
   \   000003E6   0243               ORRS     R2,R2,R0
   \   000003E8   ....               LDR      R0,??DataTable8_6  ;; 0x4015400c
   \   000003EA   0260               STR      R2,[R0, #+0]
    375          		UART2->LCR.WLS	=sParam->u8cDataBits;
   \   000003EC   ....               LDR      R0,??DataTable8_6  ;; 0x4015400c
   \   000003EE   0068               LDR      R0,[R0, #+0]
   \   000003F0   0321               MOVS     R1,#+3
   \   000003F2   8843               BICS     R0,R0,R1
   \   000003F4   2179               LDRB     R1,[R4, #+4]
   \   000003F6   8907               LSLS     R1,R1,#+30       ;; ZeroExtS R1,R1,#+30,#+30
   \   000003F8   890F               LSRS     R1,R1,#+30
   \   000003FA   0143               ORRS     R1,R1,R0
   \   000003FC   ....               LDR      R0,??DataTable8_6  ;; 0x4015400c
   \   000003FE   0160               STR      R1,[R0, #+0]
    376          		UART2->LCR.NSB	=sParam->u8cStopBits;
   \   00000400   ....               LDR      R0,??DataTable8_6  ;; 0x4015400c
   \   00000402   0068               LDR      R0,[R0, #+0]
   \   00000404   0421               MOVS     R1,#+4
   \   00000406   8843               BICS     R0,R0,R1
   \   00000408   6179               LDRB     R1,[R4, #+5]
   \   0000040A   8900               LSLS     R1,R1,#+2
   \   0000040C   0422               MOVS     R2,#+4
   \   0000040E   0A40               ANDS     R2,R2,R1
   \   00000410   0243               ORRS     R2,R2,R0
   \   00000412   ....               LDR      R0,??DataTable8_6  ;; 0x4015400c
   \   00000414   0260               STR      R2,[R0, #+0]
    377          		
    378          		/* Set Time-Out */
    379          		UART2->TOR 		=sParam->u8TimeOut;
   \   00000416   207A               LDRB     R0,[R4, #+8]
   \   00000418   ....               LDR      R1,??DataTable8_7  ;; 0x40154020
   \   0000041A   0860               STR      R0,[R1, #+0]
    380          	    
    381          		/* Set BaudRate */
    382          		BaudRateCalculator(GetUartCLk(), sParam->u32BaudRate, &UART2->BAUD);
   \   0000041C   ........           BL       GetUartCLk
   \   00000420   ....               LDR      R2,??DataTable8_8  ;; 0x40154024
   \   00000422   2168               LDR      R1,[R4, #+0]
   \   00000424   ........           BL       BaudRateCalculator
    383          	}
    384          	
    385          	return E_SUCCESS;
   \                     ??DrvUART_Open_22:
   \   00000428   0020               MOVS     R0,#+0
   \                     ??DrvUART_Open_3:
   \   0000042A   10BD               POP      {R4,PC}          ;; return
   \                     ??DrvUART_Open_11:
   \   0000042C   FFFFFEFF           DC32     0xfffeffff
    386          }
    387          
    388          
    389          
    390          /*---------------------------------------------------------------------------------------------------------*/
    391          /* Function:        DrvUART_Close                                                                          */
    392          /*                                                                                                         */
    393          /* Parameters:                                                                                             */
    394          /*				 	Port 	 -[in] UART Channel:  UART_PORT0 / UART_PORT1                         		   */
    395          /* RETURN                                                                                                  */
    396          /*                  None                                                                                   */
    397          /* Description:                                                                                            */
    398          /*                  The function is used disable UART clock, disable ISR and close UART function.  		   */
    399          /*---------------------------------------------------------------------------------------------------------*/
    400          

   \                                 In section .text, align 2, keep-with-next
    401          void DrvUART_Close(UART_PORT Port)
    402          {
   \                     DrvUART_Close:
   \   00000000   80B5               PUSH     {R7,LR}
    403          	if(Port == UART_PORT1)	
   \   00000002   8021               MOVS     R1,#+128
   \   00000004   4903               LSLS     R1,R1,#+13       ;; #+1048576
   \   00000006   8842               CMP      R0,R1
   \   00000008   16D1               BNE      ??DrvUART_Close_0
    404          	{
    405          		while(!UART1->FSR.TX_EMPTY);
   \                     ??DrvUART_Close_1:
   \   0000000A   ....               LDR      R0,??DataTable8_9  ;; 0x40150018
   \   0000000C   0068               LDR      R0,[R0, #+0]
   \   0000000E   4002               LSLS     R0,R0,#+9
   \   00000010   FBD5               BPL      ??DrvUART_Close_1
    406          		
    407          		SYSCLK->APBCLK.UART1_EN = 0;
   \   00000012   ....               LDR      R0,??DataTable8_10  ;; 0x50000208
   \   00000014   0068               LDR      R0,[R0, #+0]
   \   00000016   ....               LDR      R1,??DataTable8_11  ;; 0xfffdffff
   \   00000018   0140               ANDS     R1,R1,R0
   \   0000001A   ....               LDR      R0,??DataTable8_10  ;; 0x50000208
   \   0000001C   0160               STR      R1,[R0, #+0]
    408          		SYSCLK->APBCLK.UART1_EN = 0;
   \   0000001E   ....               LDR      R0,??DataTable8_10  ;; 0x50000208
   \   00000020   0068               LDR      R0,[R0, #+0]
   \   00000022   ....               LDR      R1,??DataTable8_11  ;; 0xfffdffff
   \   00000024   0140               ANDS     R1,R1,R0
   \   00000026   ....               LDR      R0,??DataTable8_10  ;; 0x50000208
   \   00000028   0160               STR      R1,[R0, #+0]
    409          		g_pfnUART1callback = NULL;
   \   0000002A   ....               LDR      R0,??DataTable8_12  ;; g_pfnUART1callback
   \   0000002C   0021               MOVS     R1,#+0
   \   0000002E   0160               STR      R1,[R0, #+0]
    410                  NVIC_DisableIRQ (UART1_IRQn); 
   \   00000030   0D20               MOVS     R0,#+13
   \   00000032   ........           BL       NVIC_DisableIRQ
   \   00000036   2AE0               B        ??DrvUART_Close_2
    411          	}
    412          	else if(Port == UART_PORT2)	
   \                     ??DrvUART_Close_0:
   \   00000038   A021               MOVS     R1,#+160
   \   0000003A   4903               LSLS     R1,R1,#+13       ;; #+1310720
   \   0000003C   8842               CMP      R0,R1
   \   0000003E   16D1               BNE      ??DrvUART_Close_3
    413          	{
    414          		while(!UART2->FSR.TX_EMPTY);
   \                     ??DrvUART_Close_4:
   \   00000040   ....               LDR      R0,??DataTable8_13  ;; 0x40154018
   \   00000042   0068               LDR      R0,[R0, #+0]
   \   00000044   4002               LSLS     R0,R0,#+9
   \   00000046   FBD5               BPL      ??DrvUART_Close_4
    415          		
    416          		SYSCLK->APBCLK.UART2_EN = 0;
   \   00000048   ....               LDR      R0,??DataTable8_10  ;; 0x50000208
   \   0000004A   0068               LDR      R0,[R0, #+0]
   \   0000004C   ....               LDR      R1,??DataTable8_14  ;; 0xfffbffff
   \   0000004E   0140               ANDS     R1,R1,R0
   \   00000050   ....               LDR      R0,??DataTable8_10  ;; 0x50000208
   \   00000052   0160               STR      R1,[R0, #+0]
    417          		SYSCLK->APBCLK.UART2_EN = 0;
   \   00000054   ....               LDR      R0,??DataTable8_10  ;; 0x50000208
   \   00000056   0068               LDR      R0,[R0, #+0]
   \   00000058   ....               LDR      R1,??DataTable8_14  ;; 0xfffbffff
   \   0000005A   0140               ANDS     R1,R1,R0
   \   0000005C   ....               LDR      R0,??DataTable8_10  ;; 0x50000208
   \   0000005E   0160               STR      R1,[R0, #+0]
    418          		g_pfnUART2callback = NULL;
   \   00000060   ....               LDR      R0,??DataTable8_15  ;; g_pfnUART2callback
   \   00000062   0021               MOVS     R1,#+0
   \   00000064   0160               STR      R1,[R0, #+0]
    419                  NVIC_DisableIRQ (UART0_IRQn); 
   \   00000066   0C20               MOVS     R0,#+12
   \   00000068   ........           BL       NVIC_DisableIRQ
   \   0000006C   0FE0               B        ??DrvUART_Close_2
    420          	}
    421          	else
    422          	{
    423          		while(!UART0->FSR.TX_EMPTY);
   \                     ??DrvUART_Close_3:
   \   0000006E   ....               LDR      R0,??DataTable8_16  ;; 0x40050018
   \   00000070   0068               LDR      R0,[R0, #+0]
   \   00000072   4002               LSLS     R0,R0,#+9
   \   00000074   FBD5               BPL      ??DrvUART_Close_3
    424          		SYSCLK->APBCLK.UART0_EN = 0;
   \   00000076   ....               LDR      R0,??DataTable8_10  ;; 0x50000208
   \   00000078   0068               LDR      R0,[R0, #+0]
   \   0000007A   ....               LDR      R1,??DataTable8_17  ;; 0xfffeffff
   \   0000007C   0140               ANDS     R1,R1,R0
   \   0000007E   ....               LDR      R0,??DataTable8_10  ;; 0x50000208
   \   00000080   0160               STR      R1,[R0, #+0]
    425          		g_pfnUART0callback = NULL;
   \   00000082   ....               LDR      R0,??DataTable8_18  ;; g_pfnUART0callback
   \   00000084   0021               MOVS     R1,#+0
   \   00000086   0160               STR      R1,[R0, #+0]
    426                  NVIC_DisableIRQ(UART0_IRQn);      
   \   00000088   0C20               MOVS     R0,#+12
   \   0000008A   ........           BL       NVIC_DisableIRQ
    427          	}
    428          }
   \                     ??DrvUART_Close_2:
   \   0000008E   01BD               POP      {R0,PC}          ;; return
    429          
    430          
    431          
    432          /*---------------------------------------------------------------------------------------------------------*/
    433          /* Function:     DrvUART_EnableInt                                                                     	   */
    434          /*                                                                                                         */
    435          /* Parameter:                                                                                              */
    436          /*				 Port 			  -[in] UART Channel:  UART_PORT0 / UART_PORT1                         	   */
    437          /*               u32InterruptFlag -[in]	DRVUART_LININT/DRVUART_WAKEUPINT/DRVUART_BUFERRINT/DRVUART_RLSNT   */
    438          /*										DRVUART_MOSINT/DRVUART_THREINT/DRVUART_RDAINT/DRVUART_TOUTINT      */
    439          /*               pfncallback      -[in] A function pointer for callback function                           */
    440          /* Returns:                                                                                                */
    441          /*                                                                                                         */
    442          /* Side effects:                                                                                           */
    443          /*                                                                                                         */
    444          /* Description:                                                                                            */
    445          /*               The function is used to enable UART Interrupt and Install the call back function          */
    446          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
    447          int32_t
    448          DrvUART_EnableInt(
    449          	UART_PORT   port,
    450          	uint32_t  u32InterruptFlag,
    451          	PFN_DRVUART_CALLBACK pfncallback
    452          )
    453          {
   \                     DrvUART_EnableInt:
   \   00000000   38B5               PUSH     {R3-R5,LR}
    454              if((port != UART_PORT0) && (port != UART_PORT1)&& (port != UART_PORT2))
   \   00000002   0028               CMP      R0,#+0
   \   00000004   09D0               BEQ      ??DrvUART_EnableInt_0
   \   00000006   8023               MOVS     R3,#+128
   \   00000008   5B03               LSLS     R3,R3,#+13       ;; #+1048576
   \   0000000A   9842               CMP      R0,R3
   \   0000000C   05D0               BEQ      ??DrvUART_EnableInt_0
   \   0000000E   A023               MOVS     R3,#+160
   \   00000010   5B03               LSLS     R3,R3,#+13       ;; #+1310720
   \   00000012   9842               CMP      R0,R3
   \   00000014   01D0               BEQ      ??DrvUART_EnableInt_0
    455              {
    456                  return E_DRVUART_ARGUMENT;
   \   00000016   9D48               LDR      R0,??DrvUART_EnableInt_1  ;; 0xffff9807
   \   00000018   EBE1               B        ??DrvUART_EnableInt_2
    457              }
    458          
    459           	if(port == UART_PORT0)											   	/* Set Specified Interrupt */
   \                     ??DrvUART_EnableInt_0:
   \   0000001A   0028               CMP      R0,#+0
   \   0000001C   00D0               BEQ      .+4
   \   0000001E   97E0               B        ??DrvUART_EnableInt_3
    460          	{
    461          		UART0->IER.RDA_IEN		=(u32InterruptFlag & DRVUART_RDAINT)?1:0 ;
   \   00000020   9B4B               LDR      R3,??DrvUART_EnableInt_1+0x4  ;; 0x40050004
   \   00000022   1B68               LDR      R3,[R3, #+0]
   \   00000024   0124               MOVS     R4,#+1
   \   00000026   A343               BICS     R3,R3,R4
   \   00000028   0C00               MOVS     R4,R1
   \   0000002A   2500               MOVS     R5,R4
   \   0000002C   ED07               LSLS     R5,R5,#+31       ;; ZeroExtS R5,R5,#+31,#+31
   \   0000002E   ED0F               LSRS     R5,R5,#+31
   \   00000030   2C00               MOVS     R4,R5
   \   00000032   E407               LSLS     R4,R4,#+31       ;; ZeroExtS R4,R4,#+31,#+31
   \   00000034   E40F               LSRS     R4,R4,#+31
   \   00000036   1C43               ORRS     R4,R4,R3
   \   00000038   954B               LDR      R3,??DrvUART_EnableInt_1+0x4  ;; 0x40050004
   \   0000003A   1C60               STR      R4,[R3, #+0]
    462          		UART0->IER.THRE_IEN		=(u32InterruptFlag & DRVUART_THREINT)?1:0;
   \   0000003C   0B00               MOVS     R3,R1
   \   0000003E   9B07               LSLS     R3,R3,#+30
   \   00000040   01D5               BPL      ??DrvUART_EnableInt_4
   \   00000042   0123               MOVS     R3,#+1
   \   00000044   00E0               B        ??DrvUART_EnableInt_5
   \                     ??DrvUART_EnableInt_4:
   \   00000046   0023               MOVS     R3,#+0
   \                     ??DrvUART_EnableInt_5:
   \   00000048   914C               LDR      R4,??DrvUART_EnableInt_1+0x4  ;; 0x40050004
   \   0000004A   2468               LDR      R4,[R4, #+0]
   \   0000004C   0225               MOVS     R5,#+2
   \   0000004E   AC43               BICS     R4,R4,R5
   \   00000050   DBB2               UXTB     R3,R3
   \   00000052   5B00               LSLS     R3,R3,#+1
   \   00000054   0225               MOVS     R5,#+2
   \   00000056   1D40               ANDS     R5,R5,R3
   \   00000058   2543               ORRS     R5,R5,R4
   \   0000005A   8D4B               LDR      R3,??DrvUART_EnableInt_1+0x4  ;; 0x40050004
   \   0000005C   1D60               STR      R5,[R3, #+0]
    463          		UART0->IER.RLS_IEN		=(u32InterruptFlag & DRVUART_RLSNT)?1:0;
   \   0000005E   0B00               MOVS     R3,R1
   \   00000060   5B07               LSLS     R3,R3,#+29
   \   00000062   01D5               BPL      ??DrvUART_EnableInt_6
   \   00000064   0123               MOVS     R3,#+1
   \   00000066   00E0               B        ??DrvUART_EnableInt_7
   \                     ??DrvUART_EnableInt_6:
   \   00000068   0023               MOVS     R3,#+0
   \                     ??DrvUART_EnableInt_7:
   \   0000006A   894C               LDR      R4,??DrvUART_EnableInt_1+0x4  ;; 0x40050004
   \   0000006C   2468               LDR      R4,[R4, #+0]
   \   0000006E   0425               MOVS     R5,#+4
   \   00000070   AC43               BICS     R4,R4,R5
   \   00000072   DBB2               UXTB     R3,R3
   \   00000074   9B00               LSLS     R3,R3,#+2
   \   00000076   0425               MOVS     R5,#+4
   \   00000078   1D40               ANDS     R5,R5,R3
   \   0000007A   2543               ORRS     R5,R5,R4
   \   0000007C   844B               LDR      R3,??DrvUART_EnableInt_1+0x4  ;; 0x40050004
   \   0000007E   1D60               STR      R5,[R3, #+0]
    464          		UART0->IER.MS_IEN		=(u32InterruptFlag & DRVUART_MOSINT)?1:0;
   \   00000080   0B00               MOVS     R3,R1
   \   00000082   1B07               LSLS     R3,R3,#+28
   \   00000084   01D5               BPL      ??DrvUART_EnableInt_8
   \   00000086   0123               MOVS     R3,#+1
   \   00000088   00E0               B        ??DrvUART_EnableInt_9
   \                     ??DrvUART_EnableInt_8:
   \   0000008A   0023               MOVS     R3,#+0
   \                     ??DrvUART_EnableInt_9:
   \   0000008C   804C               LDR      R4,??DrvUART_EnableInt_1+0x4  ;; 0x40050004
   \   0000008E   2468               LDR      R4,[R4, #+0]
   \   00000090   0825               MOVS     R5,#+8
   \   00000092   AC43               BICS     R4,R4,R5
   \   00000094   DBB2               UXTB     R3,R3
   \   00000096   DB00               LSLS     R3,R3,#+3
   \   00000098   0825               MOVS     R5,#+8
   \   0000009A   1D40               ANDS     R5,R5,R3
   \   0000009C   2543               ORRS     R5,R5,R4
   \   0000009E   7C4B               LDR      R3,??DrvUART_EnableInt_1+0x4  ;; 0x40050004
   \   000000A0   1D60               STR      R5,[R3, #+0]
    465          		
    466          		UART0->IER.TOC_EN		=(u32InterruptFlag & DRVUART_TOUTINT)?1:0;   	/* Time-out count enable */
   \   000000A2   0B00               MOVS     R3,R1
   \   000000A4   DB06               LSLS     R3,R3,#+27
   \   000000A6   01D5               BPL      ??DrvUART_EnableInt_10
   \   000000A8   0123               MOVS     R3,#+1
   \   000000AA   00E0               B        ??DrvUART_EnableInt_11
   \                     ??DrvUART_EnableInt_10:
   \   000000AC   0023               MOVS     R3,#+0
   \                     ??DrvUART_EnableInt_11:
   \   000000AE   784C               LDR      R4,??DrvUART_EnableInt_1+0x4  ;; 0x40050004
   \   000000B0   2468               LDR      R4,[R4, #+0]
   \   000000B2   ....               LDR      R5,??DataTable9  ;; 0xfffff7ff
   \   000000B4   2540               ANDS     R5,R5,R4
   \   000000B6   DBB2               UXTB     R3,R3
   \   000000B8   DB02               LSLS     R3,R3,#+11
   \   000000BA   8024               MOVS     R4,#+128
   \   000000BC   2401               LSLS     R4,R4,#+4        ;; #+2048
   \   000000BE   1C40               ANDS     R4,R4,R3
   \   000000C0   2C43               ORRS     R4,R4,R5
   \   000000C2   734B               LDR      R3,??DrvUART_EnableInt_1+0x4  ;; 0x40050004
   \   000000C4   1C60               STR      R4,[R3, #+0]
    467          		UART0->IER.RTO_IEN		=(u32InterruptFlag & DRVUART_TOUTINT)?1:0;		/* Time-out INT enable */
   \   000000C6   0B00               MOVS     R3,R1
   \   000000C8   DB06               LSLS     R3,R3,#+27
   \   000000CA   01D5               BPL      ??DrvUART_EnableInt_12
   \   000000CC   0123               MOVS     R3,#+1
   \   000000CE   00E0               B        ??DrvUART_EnableInt_13
   \                     ??DrvUART_EnableInt_12:
   \   000000D0   0023               MOVS     R3,#+0
   \                     ??DrvUART_EnableInt_13:
   \   000000D2   6F4C               LDR      R4,??DrvUART_EnableInt_1+0x4  ;; 0x40050004
   \   000000D4   2468               LDR      R4,[R4, #+0]
   \   000000D6   1025               MOVS     R5,#+16
   \   000000D8   AC43               BICS     R4,R4,R5
   \   000000DA   DBB2               UXTB     R3,R3
   \   000000DC   1B01               LSLS     R3,R3,#+4
   \   000000DE   1025               MOVS     R5,#+16
   \   000000E0   1D40               ANDS     R5,R5,R3
   \   000000E2   2543               ORRS     R5,R5,R4
   \   000000E4   6A4B               LDR      R3,??DrvUART_EnableInt_1+0x4  ;; 0x40050004
   \   000000E6   1D60               STR      R5,[R3, #+0]
    468          
    469          		UART0->IER.BUF_ERR_IEN	=(u32InterruptFlag & DRVUART_BUFERRINT)?1:0;
   \   000000E8   0B00               MOVS     R3,R1
   \   000000EA   9B06               LSLS     R3,R3,#+26
   \   000000EC   01D5               BPL      ??DrvUART_EnableInt_14
   \   000000EE   0123               MOVS     R3,#+1
   \   000000F0   00E0               B        ??DrvUART_EnableInt_15
   \                     ??DrvUART_EnableInt_14:
   \   000000F2   0023               MOVS     R3,#+0
   \                     ??DrvUART_EnableInt_15:
   \   000000F4   664C               LDR      R4,??DrvUART_EnableInt_1+0x4  ;; 0x40050004
   \   000000F6   2468               LDR      R4,[R4, #+0]
   \   000000F8   2025               MOVS     R5,#+32
   \   000000FA   AC43               BICS     R4,R4,R5
   \   000000FC   DBB2               UXTB     R3,R3
   \   000000FE   5B01               LSLS     R3,R3,#+5
   \   00000100   2025               MOVS     R5,#+32
   \   00000102   1D40               ANDS     R5,R5,R3
   \   00000104   2543               ORRS     R5,R5,R4
   \   00000106   624B               LDR      R3,??DrvUART_EnableInt_1+0x4  ;; 0x40050004
   \   00000108   1D60               STR      R5,[R3, #+0]
    470          		UART0->IER.WAKE_IEN		=(u32InterruptFlag & DRVUART_WAKEUPINT)?1:0;
   \   0000010A   0B00               MOVS     R3,R1
   \   0000010C   5B06               LSLS     R3,R3,#+25
   \   0000010E   01D5               BPL      ??DrvUART_EnableInt_16
   \   00000110   0123               MOVS     R3,#+1
   \   00000112   00E0               B        ??DrvUART_EnableInt_17
   \                     ??DrvUART_EnableInt_16:
   \   00000114   0023               MOVS     R3,#+0
   \                     ??DrvUART_EnableInt_17:
   \   00000116   5E4C               LDR      R4,??DrvUART_EnableInt_1+0x4  ;; 0x40050004
   \   00000118   2468               LDR      R4,[R4, #+0]
   \   0000011A   4025               MOVS     R5,#+64
   \   0000011C   AC43               BICS     R4,R4,R5
   \   0000011E   DBB2               UXTB     R3,R3
   \   00000120   9B01               LSLS     R3,R3,#+6
   \   00000122   4025               MOVS     R5,#+64
   \   00000124   1D40               ANDS     R5,R5,R3
   \   00000126   2543               ORRS     R5,R5,R4
   \   00000128   594B               LDR      R3,??DrvUART_EnableInt_1+0x4  ;; 0x40050004
   \   0000012A   1D60               STR      R5,[R3, #+0]
    471          		UART0->IER.LIN_RX_BRK_IEN=(u32InterruptFlag & DRVUART_LININT)?1:0;
   \   0000012C   C905               LSLS     R1,R1,#+23
   \   0000012E   01D5               BPL      ??DrvUART_EnableInt_18
   \   00000130   0121               MOVS     R1,#+1
   \   00000132   00E0               B        ??DrvUART_EnableInt_19
   \                     ??DrvUART_EnableInt_18:
   \   00000134   0021               MOVS     R1,#+0
   \                     ??DrvUART_EnableInt_19:
   \   00000136   564B               LDR      R3,??DrvUART_EnableInt_1+0x4  ;; 0x40050004
   \   00000138   1B68               LDR      R3,[R3, #+0]
   \   0000013A   ....               LDR      R4,??DataTable10  ;; 0xfffffeff
   \   0000013C   1C40               ANDS     R4,R4,R3
   \   0000013E   C9B2               UXTB     R1,R1
   \   00000140   0902               LSLS     R1,R1,#+8
   \   00000142   8023               MOVS     R3,#+128
   \   00000144   5B00               LSLS     R3,R3,#+1        ;; #+256
   \   00000146   0B40               ANDS     R3,R3,R1
   \   00000148   2343               ORRS     R3,R3,R4
   \   0000014A   5149               LDR      R1,??DrvUART_EnableInt_1+0x4  ;; 0x40050004
   \   0000014C   0B60               STR      R3,[R1, #+0]
   \   0000014E   38E1               B        ??DrvUART_EnableInt_20
    472          
    473          	}
    474          	else if(port == UART_PORT1)
   \                     ??DrvUART_EnableInt_3:
   \   00000150   8023               MOVS     R3,#+128
   \   00000152   5B03               LSLS     R3,R3,#+13       ;; #+1048576
   \   00000154   9842               CMP      R0,R3
   \   00000156   00D0               BEQ      .+4
   \   00000158   9CE0               B        ??DrvUART_EnableInt_21
    475          	{
    476          		UART1->IER.RDA_IEN		=(u32InterruptFlag & DRVUART_RDAINT)?1:0 ;
   \   0000015A   ....               LDR      R3,??DataTable10_1  ;; 0x40150004
   \   0000015C   1B68               LDR      R3,[R3, #+0]
   \   0000015E   0124               MOVS     R4,#+1
   \   00000160   A343               BICS     R3,R3,R4
   \   00000162   0C00               MOVS     R4,R1
   \   00000164   2500               MOVS     R5,R4
   \   00000166   ED07               LSLS     R5,R5,#+31       ;; ZeroExtS R5,R5,#+31,#+31
   \   00000168   ED0F               LSRS     R5,R5,#+31
   \   0000016A   2C00               MOVS     R4,R5
   \   0000016C   E407               LSLS     R4,R4,#+31       ;; ZeroExtS R4,R4,#+31,#+31
   \   0000016E   E40F               LSRS     R4,R4,#+31
   \   00000170   1C43               ORRS     R4,R4,R3
   \   00000172   ....               LDR      R3,??DataTable10_1  ;; 0x40150004
   \   00000174   1C60               STR      R4,[R3, #+0]
    477          		UART1->IER.THRE_IEN		=(u32InterruptFlag & DRVUART_THREINT)?1:0;
   \   00000176   0B00               MOVS     R3,R1
   \   00000178   9B07               LSLS     R3,R3,#+30
   \   0000017A   01D5               BPL      ??DrvUART_EnableInt_22
   \   0000017C   0123               MOVS     R3,#+1
   \   0000017E   00E0               B        ??DrvUART_EnableInt_23
   \                     ??DrvUART_EnableInt_22:
   \   00000180   0023               MOVS     R3,#+0
   \                     ??DrvUART_EnableInt_23:
   \   00000182   ....               LDR      R4,??DataTable10_1  ;; 0x40150004
   \   00000184   2468               LDR      R4,[R4, #+0]
   \   00000186   0225               MOVS     R5,#+2
   \   00000188   AC43               BICS     R4,R4,R5
   \   0000018A   DBB2               UXTB     R3,R3
   \   0000018C   5B00               LSLS     R3,R3,#+1
   \   0000018E   0225               MOVS     R5,#+2
   \   00000190   1D40               ANDS     R5,R5,R3
   \   00000192   2543               ORRS     R5,R5,R4
   \   00000194   ....               LDR      R3,??DataTable10_1  ;; 0x40150004
   \   00000196   1D60               STR      R5,[R3, #+0]
    478          		UART1->IER.RLS_IEN		=(u32InterruptFlag & DRVUART_RLSNT)?1:0;
   \   00000198   0B00               MOVS     R3,R1
   \   0000019A   5B07               LSLS     R3,R3,#+29
   \   0000019C   01D5               BPL      ??DrvUART_EnableInt_24
   \   0000019E   0123               MOVS     R3,#+1
   \   000001A0   00E0               B        ??DrvUART_EnableInt_25
   \                     ??DrvUART_EnableInt_24:
   \   000001A2   0023               MOVS     R3,#+0
   \                     ??DrvUART_EnableInt_25:
   \   000001A4   ....               LDR      R4,??DataTable10_1  ;; 0x40150004
   \   000001A6   2468               LDR      R4,[R4, #+0]
   \   000001A8   0425               MOVS     R5,#+4
   \   000001AA   AC43               BICS     R4,R4,R5
   \   000001AC   DBB2               UXTB     R3,R3
   \   000001AE   9B00               LSLS     R3,R3,#+2
   \   000001B0   0425               MOVS     R5,#+4
   \   000001B2   1D40               ANDS     R5,R5,R3
   \   000001B4   2543               ORRS     R5,R5,R4
   \   000001B6   ....               LDR      R3,??DataTable10_1  ;; 0x40150004
   \   000001B8   1D60               STR      R5,[R3, #+0]
    479          		UART1->IER.MS_IEN		=(u32InterruptFlag & DRVUART_MOSINT)?1:0;
   \   000001BA   0B00               MOVS     R3,R1
   \   000001BC   1B07               LSLS     R3,R3,#+28
   \   000001BE   01D5               BPL      ??DrvUART_EnableInt_26
   \   000001C0   0123               MOVS     R3,#+1
   \   000001C2   00E0               B        ??DrvUART_EnableInt_27
   \                     ??DrvUART_EnableInt_26:
   \   000001C4   0023               MOVS     R3,#+0
   \                     ??DrvUART_EnableInt_27:
   \   000001C6   ....               LDR      R4,??DataTable10_1  ;; 0x40150004
   \   000001C8   2468               LDR      R4,[R4, #+0]
   \   000001CA   0825               MOVS     R5,#+8
   \   000001CC   AC43               BICS     R4,R4,R5
   \   000001CE   DBB2               UXTB     R3,R3
   \   000001D0   DB00               LSLS     R3,R3,#+3
   \   000001D2   0825               MOVS     R5,#+8
   \   000001D4   1D40               ANDS     R5,R5,R3
   \   000001D6   2543               ORRS     R5,R5,R4
   \   000001D8   ....               LDR      R3,??DataTable10_1  ;; 0x40150004
   \   000001DA   1D60               STR      R5,[R3, #+0]
    480          		
    481          		UART1->IER.TOC_EN		=(u32InterruptFlag & DRVUART_TOUTINT)?1:0;		/* Time-out count enable */
   \   000001DC   0B00               MOVS     R3,R1
   \   000001DE   DB06               LSLS     R3,R3,#+27
   \   000001E0   01D5               BPL      ??DrvUART_EnableInt_28
   \   000001E2   0123               MOVS     R3,#+1
   \   000001E4   00E0               B        ??DrvUART_EnableInt_29
   \                     ??DrvUART_EnableInt_28:
   \   000001E6   0023               MOVS     R3,#+0
   \                     ??DrvUART_EnableInt_29:
   \   000001E8   ....               LDR      R4,??DataTable10_1  ;; 0x40150004
   \   000001EA   2468               LDR      R4,[R4, #+0]
   \   000001EC   ....               LDR      R5,??DataTable9  ;; 0xfffff7ff
   \   000001EE   2540               ANDS     R5,R5,R4
   \   000001F0   DBB2               UXTB     R3,R3
   \   000001F2   DB02               LSLS     R3,R3,#+11
   \   000001F4   8024               MOVS     R4,#+128
   \   000001F6   2401               LSLS     R4,R4,#+4        ;; #+2048
   \   000001F8   1C40               ANDS     R4,R4,R3
   \   000001FA   2C43               ORRS     R4,R4,R5
   \   000001FC   ....               LDR      R3,??DataTable10_1  ;; 0x40150004
   \   000001FE   1C60               STR      R4,[R3, #+0]
    482          		UART1->IER.RTO_IEN		=(u32InterruptFlag & DRVUART_TOUTINT)?1:0;		/* Time-out INT enable */
   \   00000200   0B00               MOVS     R3,R1
   \   00000202   DB06               LSLS     R3,R3,#+27
   \   00000204   01D5               BPL      ??DrvUART_EnableInt_30
   \   00000206   0123               MOVS     R3,#+1
   \   00000208   00E0               B        ??DrvUART_EnableInt_31
   \                     ??DrvUART_EnableInt_30:
   \   0000020A   0023               MOVS     R3,#+0
   \                     ??DrvUART_EnableInt_31:
   \   0000020C   ....               LDR      R4,??DataTable10_1  ;; 0x40150004
   \   0000020E   2468               LDR      R4,[R4, #+0]
   \   00000210   1025               MOVS     R5,#+16
   \   00000212   AC43               BICS     R4,R4,R5
   \   00000214   DBB2               UXTB     R3,R3
   \   00000216   1B01               LSLS     R3,R3,#+4
   \   00000218   1025               MOVS     R5,#+16
   \   0000021A   1D40               ANDS     R5,R5,R3
   \   0000021C   2543               ORRS     R5,R5,R4
   \   0000021E   ....               LDR      R3,??DataTable10_1  ;; 0x40150004
   \   00000220   1D60               STR      R5,[R3, #+0]
    483          		
    484          		UART1->IER.BUF_ERR_IEN	=(u32InterruptFlag & DRVUART_BUFERRINT)?1:0;
   \   00000222   0B00               MOVS     R3,R1
   \   00000224   9B06               LSLS     R3,R3,#+26
   \   00000226   01D5               BPL      ??DrvUART_EnableInt_32
   \   00000228   0123               MOVS     R3,#+1
   \   0000022A   00E0               B        ??DrvUART_EnableInt_33
   \                     ??DrvUART_EnableInt_32:
   \   0000022C   0023               MOVS     R3,#+0
   \                     ??DrvUART_EnableInt_33:
   \   0000022E   ....               LDR      R4,??DataTable10_1  ;; 0x40150004
   \   00000230   2468               LDR      R4,[R4, #+0]
   \   00000232   2025               MOVS     R5,#+32
   \   00000234   AC43               BICS     R4,R4,R5
   \   00000236   DBB2               UXTB     R3,R3
   \   00000238   5B01               LSLS     R3,R3,#+5
   \   0000023A   2025               MOVS     R5,#+32
   \   0000023C   1D40               ANDS     R5,R5,R3
   \   0000023E   2543               ORRS     R5,R5,R4
   \   00000240   ....               LDR      R3,??DataTable10_1  ;; 0x40150004
   \   00000242   1D60               STR      R5,[R3, #+0]
    485          		UART1->IER.WAKE_IEN		=(u32InterruptFlag & DRVUART_WAKEUPINT)?1:0;
   \   00000244   0B00               MOVS     R3,R1
   \   00000246   5B06               LSLS     R3,R3,#+25
   \   00000248   01D5               BPL      ??DrvUART_EnableInt_34
   \   0000024A   0123               MOVS     R3,#+1
   \   0000024C   00E0               B        ??DrvUART_EnableInt_35
   \                     ??DrvUART_EnableInt_34:
   \   0000024E   0023               MOVS     R3,#+0
   \                     ??DrvUART_EnableInt_35:
   \   00000250   ....               LDR      R4,??DataTable10_1  ;; 0x40150004
   \   00000252   2468               LDR      R4,[R4, #+0]
   \   00000254   4025               MOVS     R5,#+64
   \   00000256   AC43               BICS     R4,R4,R5
   \   00000258   DBB2               UXTB     R3,R3
   \   0000025A   9B01               LSLS     R3,R3,#+6
   \   0000025C   4025               MOVS     R5,#+64
   \   0000025E   1D40               ANDS     R5,R5,R3
   \   00000260   2543               ORRS     R5,R5,R4
   \   00000262   ....               LDR      R3,??DataTable10_1  ;; 0x40150004
   \   00000264   1D60               STR      R5,[R3, #+0]
    486          		UART1->IER.LIN_RX_BRK_IEN=(u32InterruptFlag & DRVUART_LININT)?1:0;
   \   00000266   C905               LSLS     R1,R1,#+23
   \   00000268   01D5               BPL      ??DrvUART_EnableInt_36
   \   0000026A   0121               MOVS     R1,#+1
   \   0000026C   00E0               B        ??DrvUART_EnableInt_37
   \                     ??DrvUART_EnableInt_36:
   \   0000026E   0021               MOVS     R1,#+0
   \                     ??DrvUART_EnableInt_37:
   \   00000270   ....               LDR      R3,??DataTable10_1  ;; 0x40150004
   \   00000272   1B68               LDR      R3,[R3, #+0]
   \   00000274   ....               LDR      R4,??DataTable10  ;; 0xfffffeff
   \   00000276   1C40               ANDS     R4,R4,R3
   \   00000278   C9B2               UXTB     R1,R1
   \   0000027A   0902               LSLS     R1,R1,#+8
   \   0000027C   8023               MOVS     R3,#+128
   \   0000027E   5B00               LSLS     R3,R3,#+1        ;; #+256
   \   00000280   0B40               ANDS     R3,R3,R1
   \   00000282   2343               ORRS     R3,R3,R4
   \   00000284   ....               LDR      R1,??DataTable10_1  ;; 0x40150004
   \   00000286   0B60               STR      R3,[R1, #+0]
   \   00000288   9BE0               B        ??DrvUART_EnableInt_20
   \   0000028A   00BF               Nop      
   \                     ??DrvUART_EnableInt_1:
   \   0000028C   0798FFFF           DC32     0xffff9807
   \   00000290   04000540           DC32     0x40050004
    487          	}
    488          	else
    489          	{
    490          		UART2->IER.RDA_IEN		=(u32InterruptFlag & DRVUART_RDAINT)?1:0 ;
   \                     ??DrvUART_EnableInt_21:
   \   00000294   ....               LDR      R3,??DataTable12  ;; 0x40154004
   \   00000296   1B68               LDR      R3,[R3, #+0]
   \   00000298   0124               MOVS     R4,#+1
   \   0000029A   A343               BICS     R3,R3,R4
   \   0000029C   0C00               MOVS     R4,R1
   \   0000029E   2500               MOVS     R5,R4
   \   000002A0   ED07               LSLS     R5,R5,#+31       ;; ZeroExtS R5,R5,#+31,#+31
   \   000002A2   ED0F               LSRS     R5,R5,#+31
   \   000002A4   2C00               MOVS     R4,R5
   \   000002A6   E407               LSLS     R4,R4,#+31       ;; ZeroExtS R4,R4,#+31,#+31
   \   000002A8   E40F               LSRS     R4,R4,#+31
   \   000002AA   1C43               ORRS     R4,R4,R3
   \   000002AC   ....               LDR      R3,??DataTable12  ;; 0x40154004
   \   000002AE   1C60               STR      R4,[R3, #+0]
    491          		UART2->IER.THRE_IEN		=(u32InterruptFlag & DRVUART_THREINT)?1:0;
   \   000002B0   0B00               MOVS     R3,R1
   \   000002B2   9B07               LSLS     R3,R3,#+30
   \   000002B4   01D5               BPL      ??DrvUART_EnableInt_38
   \   000002B6   0123               MOVS     R3,#+1
   \   000002B8   00E0               B        ??DrvUART_EnableInt_39
   \                     ??DrvUART_EnableInt_38:
   \   000002BA   0023               MOVS     R3,#+0
   \                     ??DrvUART_EnableInt_39:
   \   000002BC   ....               LDR      R4,??DataTable12  ;; 0x40154004
   \   000002BE   2468               LDR      R4,[R4, #+0]
   \   000002C0   0225               MOVS     R5,#+2
   \   000002C2   AC43               BICS     R4,R4,R5
   \   000002C4   DBB2               UXTB     R3,R3
   \   000002C6   5B00               LSLS     R3,R3,#+1
   \   000002C8   0225               MOVS     R5,#+2
   \   000002CA   1D40               ANDS     R5,R5,R3
   \   000002CC   2543               ORRS     R5,R5,R4
   \   000002CE   ....               LDR      R3,??DataTable12  ;; 0x40154004
   \   000002D0   1D60               STR      R5,[R3, #+0]
    492          		UART2->IER.RLS_IEN		=(u32InterruptFlag & DRVUART_RLSNT)?1:0;
   \   000002D2   0B00               MOVS     R3,R1
   \   000002D4   5B07               LSLS     R3,R3,#+29
   \   000002D6   01D5               BPL      ??DrvUART_EnableInt_40
   \   000002D8   0123               MOVS     R3,#+1
   \   000002DA   00E0               B        ??DrvUART_EnableInt_41
   \                     ??DrvUART_EnableInt_40:
   \   000002DC   0023               MOVS     R3,#+0
   \                     ??DrvUART_EnableInt_41:
   \   000002DE   ....               LDR      R4,??DataTable12  ;; 0x40154004
   \   000002E0   2468               LDR      R4,[R4, #+0]
   \   000002E2   0425               MOVS     R5,#+4
   \   000002E4   AC43               BICS     R4,R4,R5
   \   000002E6   DBB2               UXTB     R3,R3
   \   000002E8   9B00               LSLS     R3,R3,#+2
   \   000002EA   0425               MOVS     R5,#+4
   \   000002EC   1D40               ANDS     R5,R5,R3
   \   000002EE   2543               ORRS     R5,R5,R4
   \   000002F0   ....               LDR      R3,??DataTable12  ;; 0x40154004
   \   000002F2   1D60               STR      R5,[R3, #+0]
    493          		UART2->IER.MS_IEN		=(u32InterruptFlag & DRVUART_MOSINT)?1:0;
   \   000002F4   0B00               MOVS     R3,R1
   \   000002F6   1B07               LSLS     R3,R3,#+28
   \   000002F8   01D5               BPL      ??DrvUART_EnableInt_42
   \   000002FA   0123               MOVS     R3,#+1
   \   000002FC   00E0               B        ??DrvUART_EnableInt_43
   \                     ??DrvUART_EnableInt_42:
   \   000002FE   0023               MOVS     R3,#+0
   \                     ??DrvUART_EnableInt_43:
   \   00000300   ....               LDR      R4,??DataTable12  ;; 0x40154004
   \   00000302   2468               LDR      R4,[R4, #+0]
   \   00000304   0825               MOVS     R5,#+8
   \   00000306   AC43               BICS     R4,R4,R5
   \   00000308   DBB2               UXTB     R3,R3
   \   0000030A   DB00               LSLS     R3,R3,#+3
   \   0000030C   0825               MOVS     R5,#+8
   \   0000030E   1D40               ANDS     R5,R5,R3
   \   00000310   2543               ORRS     R5,R5,R4
   \   00000312   ....               LDR      R3,??DataTable12  ;; 0x40154004
   \   00000314   1D60               STR      R5,[R3, #+0]
    494          		
    495          		UART2->IER.TOC_EN		=(u32InterruptFlag & DRVUART_TOUTINT)?1:0;		/* Time-out count enable */
   \   00000316   0B00               MOVS     R3,R1
   \   00000318   DB06               LSLS     R3,R3,#+27
   \   0000031A   01D5               BPL      ??DrvUART_EnableInt_44
   \   0000031C   0123               MOVS     R3,#+1
   \   0000031E   00E0               B        ??DrvUART_EnableInt_45
   \                     ??DrvUART_EnableInt_44:
   \   00000320   0023               MOVS     R3,#+0
   \                     ??DrvUART_EnableInt_45:
   \   00000322   ....               LDR      R4,??DataTable12  ;; 0x40154004
   \   00000324   2468               LDR      R4,[R4, #+0]
   \   00000326   ....               LDR      R5,??DataTable9  ;; 0xfffff7ff
   \   00000328   2540               ANDS     R5,R5,R4
   \   0000032A   DBB2               UXTB     R3,R3
   \   0000032C   DB02               LSLS     R3,R3,#+11
   \   0000032E   8024               MOVS     R4,#+128
   \   00000330   2401               LSLS     R4,R4,#+4        ;; #+2048
   \   00000332   1C40               ANDS     R4,R4,R3
   \   00000334   2C43               ORRS     R4,R4,R5
   \   00000336   ....               LDR      R3,??DataTable12  ;; 0x40154004
   \   00000338   1C60               STR      R4,[R3, #+0]
    496          		UART2->IER.RTO_IEN		=(u32InterruptFlag & DRVUART_TOUTINT)?1:0;		/* Time-out INT enable */
   \   0000033A   0B00               MOVS     R3,R1
   \   0000033C   DB06               LSLS     R3,R3,#+27
   \   0000033E   01D5               BPL      ??DrvUART_EnableInt_46
   \   00000340   0123               MOVS     R3,#+1
   \   00000342   00E0               B        ??DrvUART_EnableInt_47
   \                     ??DrvUART_EnableInt_46:
   \   00000344   0023               MOVS     R3,#+0
   \                     ??DrvUART_EnableInt_47:
   \   00000346   ....               LDR      R4,??DataTable12  ;; 0x40154004
   \   00000348   2468               LDR      R4,[R4, #+0]
   \   0000034A   1025               MOVS     R5,#+16
   \   0000034C   AC43               BICS     R4,R4,R5
   \   0000034E   DBB2               UXTB     R3,R3
   \   00000350   1B01               LSLS     R3,R3,#+4
   \   00000352   1025               MOVS     R5,#+16
   \   00000354   1D40               ANDS     R5,R5,R3
   \   00000356   2543               ORRS     R5,R5,R4
   \   00000358   ....               LDR      R3,??DataTable12  ;; 0x40154004
   \   0000035A   1D60               STR      R5,[R3, #+0]
    497          		
    498          		UART2->IER.BUF_ERR_IEN	=(u32InterruptFlag & DRVUART_BUFERRINT)?1:0;
   \   0000035C   0B00               MOVS     R3,R1
   \   0000035E   9B06               LSLS     R3,R3,#+26
   \   00000360   01D5               BPL      ??DrvUART_EnableInt_48
   \   00000362   0123               MOVS     R3,#+1
   \   00000364   00E0               B        ??DrvUART_EnableInt_49
   \                     ??DrvUART_EnableInt_48:
   \   00000366   0023               MOVS     R3,#+0
   \                     ??DrvUART_EnableInt_49:
   \   00000368   ....               LDR      R4,??DataTable12  ;; 0x40154004
   \   0000036A   2468               LDR      R4,[R4, #+0]
   \   0000036C   2025               MOVS     R5,#+32
   \   0000036E   AC43               BICS     R4,R4,R5
   \   00000370   DBB2               UXTB     R3,R3
   \   00000372   5B01               LSLS     R3,R3,#+5
   \   00000374   2025               MOVS     R5,#+32
   \   00000376   1D40               ANDS     R5,R5,R3
   \   00000378   2543               ORRS     R5,R5,R4
   \   0000037A   ....               LDR      R3,??DataTable12  ;; 0x40154004
   \   0000037C   1D60               STR      R5,[R3, #+0]
    499          		UART2->IER.WAKE_IEN		=(u32InterruptFlag & DRVUART_WAKEUPINT)?1:0;
   \   0000037E   0B00               MOVS     R3,R1
   \   00000380   5B06               LSLS     R3,R3,#+25
   \   00000382   01D5               BPL      ??DrvUART_EnableInt_50
   \   00000384   0123               MOVS     R3,#+1
   \   00000386   00E0               B        ??DrvUART_EnableInt_51
   \                     ??DrvUART_EnableInt_50:
   \   00000388   0023               MOVS     R3,#+0
   \                     ??DrvUART_EnableInt_51:
   \   0000038A   ....               LDR      R4,??DataTable12  ;; 0x40154004
   \   0000038C   2468               LDR      R4,[R4, #+0]
   \   0000038E   4025               MOVS     R5,#+64
   \   00000390   AC43               BICS     R4,R4,R5
   \   00000392   DBB2               UXTB     R3,R3
   \   00000394   9B01               LSLS     R3,R3,#+6
   \   00000396   4025               MOVS     R5,#+64
   \   00000398   1D40               ANDS     R5,R5,R3
   \   0000039A   2543               ORRS     R5,R5,R4
   \   0000039C   ....               LDR      R3,??DataTable12  ;; 0x40154004
   \   0000039E   1D60               STR      R5,[R3, #+0]
    500          		UART2->IER.LIN_RX_BRK_IEN=(u32InterruptFlag & DRVUART_LININT)?1:0;
   \   000003A0   C905               LSLS     R1,R1,#+23
   \   000003A2   01D5               BPL      ??DrvUART_EnableInt_52
   \   000003A4   0121               MOVS     R1,#+1
   \   000003A6   00E0               B        ??DrvUART_EnableInt_53
   \                     ??DrvUART_EnableInt_52:
   \   000003A8   0021               MOVS     R1,#+0
   \                     ??DrvUART_EnableInt_53:
   \   000003AA   ....               LDR      R3,??DataTable12  ;; 0x40154004
   \   000003AC   1B68               LDR      R3,[R3, #+0]
   \   000003AE   ....               LDR      R4,??DataTable10  ;; 0xfffffeff
   \   000003B0   1C40               ANDS     R4,R4,R3
   \   000003B2   C9B2               UXTB     R1,R1
   \   000003B4   0902               LSLS     R1,R1,#+8
   \   000003B6   8023               MOVS     R3,#+128
   \   000003B8   5B00               LSLS     R3,R3,#+1        ;; #+256
   \   000003BA   0B40               ANDS     R3,R3,R1
   \   000003BC   2343               ORRS     R3,R3,R4
   \   000003BE   ....               LDR      R1,??DataTable12  ;; 0x40154004
   \   000003C0   0B60               STR      R3,[R1, #+0]
    501          	}
    502          
    503              if(port == UART_PORT0)											   	/* Install Callback function */
   \                     ??DrvUART_EnableInt_20:
   \   000003C2   0028               CMP      R0,#+0
   \   000003C4   05D1               BNE      ??DrvUART_EnableInt_54
    504              {
    505          		g_pfnUART0callback = pfncallback;        
   \   000003C6   ....               LDR      R0,??DataTable15  ;; g_pfnUART0callback
   \   000003C8   0260               STR      R2,[R0, #+0]
    506          		NVIC_EnableIRQ(UART0_IRQn); 
   \   000003CA   0C20               MOVS     R0,#+12
   \   000003CC   ........           BL       NVIC_EnableIRQ
   \   000003D0   0EE0               B        ??DrvUART_EnableInt_55
    507              }
    508          	else if(port == UART_PORT1)										   	/* Install Callback function */
   \                     ??DrvUART_EnableInt_54:
   \   000003D2   8021               MOVS     R1,#+128
   \   000003D4   4903               LSLS     R1,R1,#+13       ;; #+1048576
   \   000003D6   8842               CMP      R0,R1
   \   000003D8   05D1               BNE      ??DrvUART_EnableInt_56
    509          	{
    510          		g_pfnUART1callback = pfncallback;
   \   000003DA   ....               LDR      R0,??DataTable15_1  ;; g_pfnUART1callback
   \   000003DC   0260               STR      R2,[R0, #+0]
    511          		NVIC_EnableIRQ(UART1_IRQn); 
   \   000003DE   0D20               MOVS     R0,#+13
   \   000003E0   ........           BL       NVIC_EnableIRQ
   \   000003E4   04E0               B        ??DrvUART_EnableInt_55
    512          	}
    513          	else																/* Install Callback function */
    514              {
    515          		g_pfnUART2callback = pfncallback;
   \                     ??DrvUART_EnableInt_56:
   \   000003E6   ....               LDR      R0,??DataTable16  ;; g_pfnUART2callback
   \   000003E8   0260               STR      R2,[R0, #+0]
    516          		NVIC_EnableIRQ(UART0_IRQn); 
   \   000003EA   0C20               MOVS     R0,#+12
   \   000003EC   ........           BL       NVIC_EnableIRQ
    517              }
    518          
    519          
    520          	return E_SUCCESS;
   \                     ??DrvUART_EnableInt_55:
   \   000003F0   0020               MOVS     R0,#+0
   \                     ??DrvUART_EnableInt_2:
   \   000003F2   32BD               POP      {R1,R4,R5,PC}    ;; return
    521          
    522          }
    523          
    524          																  
    525          /*---------------------------------------------------------------------------------------------------------*/
    526          /* Function:     DrvUART_IsIntEnabled                                                                 	   */
    527          /*                                                                                                         */
    528          /* Parameter:                                                                                              */
    529          /*				 u16Por		   	  -[in] UART Channel:  UART_PORT0 / UART_PORT0                         	   */
    530          /*               u32InterruptFlag -[in]	DRVUART_LININT/DRVUART_WAKEUPINT/DRVUART_BUFERRINT/DRVUART_RLSNT   */
    531          /*										DRVUART_MOSINT/DRVUART_THREINT/DRVUART_RDAINT/DRVUART_TOUTINT      */
    532          /* Returns:                                                                                                */
    533          /*               Specified Interrupt Flag Set or clear                                                     */
    534          /* Description:                                                                                            */
    535          /*               The function is used to get the interrupt enable status								   */
    536          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    537          uint32_t DrvUART_IsIntEnabled(UART_PORT	u16Port,uint32_t u32InterruptFlag)
    538          {
   \                     DrvUART_IsIntEnabled:
   \   00000000   00B5               PUSH     {LR}
    539          	if(u16Port == UART_PORT0)					/* Read IER Register and check specified flag is enable */
   \   00000002   0028               CMP      R0,#+0
   \   00000004   0AD1               BNE      ??DrvUART_IsIntEnabled_0
    540          		return ((inpw(&UART0->IER) &
    541          		 (u32InterruptFlag & (DRVUART_LININT | DRVUART_WAKEUPINT | DRVUART_BUFERRINT | 
    542          		 		DRVUART_TOUTINT | DRVUART_MOSINT | DRVUART_RLSNT | DRVUART_THREINT | DRVUART_RDAINT))))?1:0;
   \   00000006   ....               LDR      R0,??DataTable16_1  ;; 0x40050004
   \   00000008   0068               LDR      R0,[R0, #+0]
   \   0000000A   0140               ANDS     R1,R1,R0
   \   0000000C   FF20               MOVS     R0,#+255
   \   0000000E   8030               ADDS     R0,R0,#+128      ;; #+383
   \   00000010   0142               TST      R1,R0
   \   00000012   01D0               BEQ      ??DrvUART_IsIntEnabled_1
   \   00000014   0120               MOVS     R0,#+1
   \   00000016   00E0               B        ??DrvUART_IsIntEnabled_2
   \                     ??DrvUART_IsIntEnabled_1:
   \   00000018   0020               MOVS     R0,#+0
   \                     ??DrvUART_IsIntEnabled_2:
   \   0000001A   18E0               B        ??DrvUART_IsIntEnabled_3
    543          	else if(u16Port == UART_PORT1)
   \                     ??DrvUART_IsIntEnabled_0:
   \   0000001C   8022               MOVS     R2,#+128
   \   0000001E   5203               LSLS     R2,R2,#+13       ;; #+1048576
   \   00000020   9042               CMP      R0,R2
   \   00000022   0AD1               BNE      ??DrvUART_IsIntEnabled_4
    544          		return ((inpw(&UART1->IER) & 
    545          		(u32InterruptFlag & (DRVUART_LININT | DRVUART_WAKEUPINT | DRVUART_BUFERRINT | 
    546          		 		DRVUART_TOUTINT | DRVUART_MOSINT | DRVUART_RLSNT | DRVUART_THREINT | DRVUART_RDAINT))))?1:0;
   \   00000024   ....               LDR      R0,??DataTable10_1  ;; 0x40150004
   \   00000026   0068               LDR      R0,[R0, #+0]
   \   00000028   0140               ANDS     R1,R1,R0
   \   0000002A   FF20               MOVS     R0,#+255
   \   0000002C   8030               ADDS     R0,R0,#+128      ;; #+383
   \   0000002E   0142               TST      R1,R0
   \   00000030   01D0               BEQ      ??DrvUART_IsIntEnabled_5
   \   00000032   0120               MOVS     R0,#+1
   \   00000034   00E0               B        ??DrvUART_IsIntEnabled_6
   \                     ??DrvUART_IsIntEnabled_5:
   \   00000036   0020               MOVS     R0,#+0
   \                     ??DrvUART_IsIntEnabled_6:
   \   00000038   09E0               B        ??DrvUART_IsIntEnabled_3
    547          	else 
    548          		return ((inpw(&UART2->IER) & 
    549          		(u32InterruptFlag & (DRVUART_LININT | DRVUART_WAKEUPINT | DRVUART_BUFERRINT | 
    550          		 		DRVUART_TOUTINT | DRVUART_MOSINT | DRVUART_RLSNT | DRVUART_THREINT | DRVUART_RDAINT))))?1:0;
   \                     ??DrvUART_IsIntEnabled_4:
   \   0000003A   ....               LDR      R0,??DataTable12  ;; 0x40154004
   \   0000003C   0068               LDR      R0,[R0, #+0]
   \   0000003E   0140               ANDS     R1,R1,R0
   \   00000040   FF20               MOVS     R0,#+255
   \   00000042   8030               ADDS     R0,R0,#+128      ;; #+383
   \   00000044   0142               TST      R1,R0
   \   00000046   01D0               BEQ      ??DrvUART_IsIntEnabled_7
   \   00000048   0120               MOVS     R0,#+1
   \   0000004A   00E0               B        ??DrvUART_IsIntEnabled_8
   \                     ??DrvUART_IsIntEnabled_7:
   \   0000004C   0020               MOVS     R0,#+0
   \                     ??DrvUART_IsIntEnabled_8:
   \                     ??DrvUART_IsIntEnabled_3:
   \   0000004E   00BD               POP      {PC}             ;; return
    551          
    552          
    553          }
    554          
    555          
    556          /*---------------------------------------------------------------------------------------------------------*/
    557          /* Function:     DrvUART_DisableInt                                                                   	   */
    558          /*                                                                                                         */
    559          /* Parameter:                                                                                              */
    560          /*				 u16Por		   	  -[in] UART Channel:  UART_PORT0 / UART_PORT1  /  UART_PORT2              */
    561          /*               u32InterruptFlag -[in]	DRVUART_LININT/DRVUART_WAKEUPINT/DRVUART_BUFERRINT/DRVUART_RLSNT   */
    562          /*										DRVUART_MOSINT/DRVUART_THREINT/DRVUART_RDAINT/DRVUART_TOUTINT      */
    563          /* Returns:                                                                                                */
    564          /*               None                                                                                      */
    565          /* Description:                                                                                            */
    566          /*               The function is used to disable UART Interrupt and uninstall the call back function       */
    567          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    568          void DrvUART_DisableInt(UART_PORT u16Port,uint32_t u32InterruptFlag)
    569          {
   \                     DrvUART_DisableInt:
   \   00000000   10B5               PUSH     {R4,LR}
    570          	if(u16Port == UART_PORT0)			   
   \   00000002   0028               CMP      R0,#+0
   \   00000004   08D1               BNE      ??DrvUART_DisableInt_0
    571          	{
    572          		outpw(&UART0->IER + u16Port,inpw(&UART0->IER + u16Port) &~u32InterruptFlag);	   /* Disable INT  */
   \   00000006   0422               MOVS     R2,#+4
   \   00000008   4243               MULS     R2,R0,R2
   \   0000000A   ....               LDR      R3,??DataTable16_1  ;; 0x40050004
   \   0000000C   9A58               LDR      R2,[R3, R2]
   \   0000000E   8A43               BICS     R2,R2,R1
   \   00000010   0423               MOVS     R3,#+4
   \   00000012   4343               MULS     R3,R0,R3
   \   00000014   ....               LDR      R4,??DataTable16_1  ;; 0x40050004
   \   00000016   E250               STR      R2,[R4, R3]
    573          	}
    574          	
    575          	if(u32InterruptFlag & DRVUART_TOUTINT)			  							 /* Disable Counter Enable */
   \                     ??DrvUART_DisableInt_0:
   \   00000018   C906               LSLS     R1,R1,#+27
   \   0000001A   0ED5               BPL      ??DrvUART_DisableInt_1
    576          	{
    577          		if(u16Port == DRVUART_PORT0)
   \   0000001C   0028               CMP      R0,#+0
   \   0000001E   06D1               BNE      ??DrvUART_DisableInt_2
    578          			UART0->IER.RTO_IEN = 0;
   \   00000020   ....               LDR      R1,??DataTable16_1  ;; 0x40050004
   \   00000022   0968               LDR      R1,[R1, #+0]
   \   00000024   1022               MOVS     R2,#+16
   \   00000026   9143               BICS     R1,R1,R2
   \   00000028   ....               LDR      R2,??DataTable16_1  ;; 0x40050004
   \   0000002A   1160               STR      R1,[R2, #+0]
   \   0000002C   05E0               B        ??DrvUART_DisableInt_1
    579          		else
    580          			UART1->IER.RTO_IEN = 0;
   \                     ??DrvUART_DisableInt_2:
   \   0000002E   ....               LDR      R1,??DataTable16_2  ;; 0x40150004
   \   00000030   0968               LDR      R1,[R1, #+0]
   \   00000032   1022               MOVS     R2,#+16
   \   00000034   9143               BICS     R1,R1,R2
   \   00000036   ....               LDR      R2,??DataTable16_2  ;; 0x40150004
   \   00000038   1160               STR      R1,[R2, #+0]
    581          	}
    582          	
    583          	switch (u16Port)									   			 /* Disable Callback function and NVIC */
   \                     ??DrvUART_DisableInt_1:
   \   0000003A   0028               CMP      R0,#+0
   \   0000003C   08D0               BEQ      ??DrvUART_DisableInt_3
   \   0000003E   8021               MOVS     R1,#+128
   \   00000040   4903               LSLS     R1,R1,#+13       ;; #+1048576
   \   00000042   401A               SUBS     R0,R0,R1
   \   00000044   0BD0               BEQ      ??DrvUART_DisableInt_4
   \   00000046   8021               MOVS     R1,#+128
   \   00000048   C902               LSLS     R1,R1,#+11       ;; #+262144
   \   0000004A   401A               SUBS     R0,R0,R1
   \   0000004C   0ED0               BEQ      ??DrvUART_DisableInt_5
   \   0000004E   14E0               B        ??DrvUART_DisableInt_6
    584              {
    585                  case UART_PORT0:
    586          			g_pfnUART0callback = NULL;
   \                     ??DrvUART_DisableInt_3:
   \   00000050   ....               LDR      R0,??DataTable15  ;; g_pfnUART0callback
   \   00000052   0021               MOVS     R1,#+0
   \   00000054   0160               STR      R1,[R0, #+0]
    587                      NVIC_DisableIRQ(UART0_IRQn);   
   \   00000056   0C20               MOVS     R0,#+12
   \   00000058   ........           BL       NVIC_DisableIRQ
   \   0000005C   0DE0               B        ??DrvUART_DisableInt_7
    588                      break;
    589          
    590                  case UART_PORT1:
    591          			g_pfnUART1callback = NULL;
   \                     ??DrvUART_DisableInt_4:
   \   0000005E   ....               LDR      R0,??DataTable15_1  ;; g_pfnUART1callback
   \   00000060   0021               MOVS     R1,#+0
   \   00000062   0160               STR      R1,[R0, #+0]
    592                     	NVIC_DisableIRQ(UART1_IRQn);    
   \   00000064   0D20               MOVS     R0,#+13
   \   00000066   ........           BL       NVIC_DisableIRQ
   \   0000006A   06E0               B        ??DrvUART_DisableInt_7
    593                      break;
    594                  
    595          		case UART_PORT2:
    596          			g_pfnUART2callback = NULL;
   \                     ??DrvUART_DisableInt_5:
   \   0000006C   ....               LDR      R0,??DataTable16  ;; g_pfnUART2callback
   \   0000006E   0021               MOVS     R1,#+0
   \   00000070   0160               STR      R1,[R0, #+0]
    597                     	NVIC_DisableIRQ(UART0_IRQn);    
   \   00000072   0C20               MOVS     R0,#+12
   \   00000074   ........           BL       NVIC_DisableIRQ
   \   00000078   FFE7               B        ??DrvUART_DisableInt_7
    598                      break;
    599          
    600                  default:
    601                      break;
    602              }
    603          
    604          }
   \                     ??DrvUART_DisableInt_6:
   \                     ??DrvUART_DisableInt_7:
   \   0000007A   10BD               POP      {R4,PC}          ;; return
    605          
    606          
    607          /*---------------------------------------------------------------------------------------------------------*/
    608          /* Function:     DrvUART_ClearInt                                                                     	   */
    609          /*                                                                                                         */
    610          /* Parameter:                                                                                              */
    611          /*				 u16Por		   		  -[in]   UART Channel:  UART_PORT0 / UART_PORT1  /UART_PORT2          */
    612          /*               u32InterruptFlag     -[in]   DRVUART_MOSINT/DRVUART_RLSNT/DRVUART_THREINT 		  		   */
    613          /*											  DRVUART_RDAINT/DRVUART_TOUTINT                               */
    614          /* Returns:                                                                                                */
    615          /*               None                                                                                      */
    616          /* Description:                                                                                            */
    617          /*               The function is used to clear UART Interrupt								        	   */
    618          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    619          uint32_t DrvUART_ClearInt(UART_PORT	u16Port,uint32_t u32InterruptFlag)
    620          {
   \                     DrvUART_ClearInt:
   \   00000000   10B5               PUSH     {R4,LR}
    621          	if((u32InterruptFlag & DRVUART_RDAINT) == DRVUART_RDAINT)    			/* clear Rx read Interrupt */	   
   \   00000002   CA07               LSLS     R2,R1,#+31
   \   00000004   03D5               BPL      ??DrvUART_ClearInt_0
    622          		inpw(&UART0->DATA + u16Port);
   \   00000006   0422               MOVS     R2,#+4
   \   00000008   4243               MULS     R2,R0,R2
   \   0000000A   ....               LDR      R3,??DataTable17  ;; 0x40050000
   \   0000000C   9A58               LDR      R2,[R3, R2]
    623          
    624          	if((u32InterruptFlag & DRVUART_RLSNT) == DRVUART_RLSNT)					/* clear Receive Line Status Interrupt */	   
   \                     ??DrvUART_ClearInt_0:
   \   0000000E   4A07               LSLS     R2,R1,#+29
   \   00000010   09D5               BPL      ??DrvUART_ClearInt_1
    625          		outpw(&UART0->FSR + u16Port , inpw(&UART0->FSR + u16Port) | 0x70); 
   \   00000012   0422               MOVS     R2,#+4
   \   00000014   4243               MULS     R2,R0,R2
   \   00000016   ....               LDR      R3,??DataTable17_1  ;; 0x40050018
   \   00000018   9A58               LDR      R2,[R3, R2]
   \   0000001A   7023               MOVS     R3,#+112
   \   0000001C   1343               ORRS     R3,R3,R2
   \   0000001E   0422               MOVS     R2,#+4
   \   00000020   4243               MULS     R2,R0,R2
   \   00000022   ....               LDR      R4,??DataTable17_1  ;; 0x40050018
   \   00000024   A350               STR      R3,[R4, R2]
    626          	
    627          	if((u32InterruptFlag & DRVUART_MOSINT) == DRVUART_MOSINT)				/* clear Modem Interrupt */	   
   \                     ??DrvUART_ClearInt_1:
   \   00000026   0A07               LSLS     R2,R1,#+28
   \   00000028   09D5               BPL      ??DrvUART_ClearInt_2
    628          		outpw(&UART0->MSR + u16Port,inpw(&UART0->MSR + u16Port) | 0x1);	   
   \   0000002A   0422               MOVS     R2,#+4
   \   0000002C   4243               MULS     R2,R0,R2
   \   0000002E   ....               LDR      R3,??DataTable17_2  ;; 0x40050014
   \   00000030   9A58               LDR      R2,[R3, R2]
   \   00000032   0123               MOVS     R3,#+1
   \   00000034   1343               ORRS     R3,R3,R2
   \   00000036   0422               MOVS     R2,#+4
   \   00000038   4243               MULS     R2,R0,R2
   \   0000003A   ....               LDR      R4,??DataTable17_2  ;; 0x40050014
   \   0000003C   A350               STR      R3,[R4, R2]
    629          
    630          	if((u32InterruptFlag & DRVUART_TOUTINT) == DRVUART_TOUTINT)				/* clear Time-out Interrupt */	   
   \                     ??DrvUART_ClearInt_2:
   \   0000003E   C906               LSLS     R1,R1,#+27
   \   00000040   03D5               BPL      ??DrvUART_ClearInt_3
    631          	{
    632          		inpw(&UART0->DATA + u16Port);
   \   00000042   0421               MOVS     R1,#+4
   \   00000044   4843               MULS     R0,R1,R0
   \   00000046   ....               LDR      R1,??DataTable17  ;; 0x40050000
   \   00000048   0858               LDR      R0,[R1, R0]
    633          	}
    634          
    635          	return E_SUCCESS;
   \                     ??DrvUART_ClearInt_3:
   \   0000004A   0020               MOVS     R0,#+0
   \   0000004C   10BD               POP      {R4,PC}          ;; return
    636          
    637          
    638          }	
    639          
    640          
    641          /*---------------------------------------------------------------------------------------------------------*/
    642          /* Function:     DrvUART_GetIntStatus                                                                 	   */
    643          /*                                                                                                         */
    644          /* Parameter:                                                                                              */
    645          /*				 u16Port	   	  	  -[in]   UART Channel:  UART_PORT0 / UART_PORT1                       */
    646          /*               u32InterruptFlag     -[in]   DRVUART_MOSINT / DRVUART_RLSNT / DRVUART_THREINT 		   	   */
    647          /*											  DRVUART_RDAINT/DRVUART_TOUTINT                               */
    648          /* Returns:                                                                                                */
    649          /*               0: None                                                                                   */
    650          /*               1: Interrupt occurs                                                                       */
    651          /* Description:                                                                                            */
    652          /*               The function is used to get the interrupt  status										   */
    653          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    654          int8_t DrvUART_GetIntStatus(UART_PORT u16Port,uint32_t u32InterruptFlag)
    655          {
   \                     DrvUART_GetIntStatus:
   \   00000000   00B5               PUSH     {LR}
    656          	
    657          	switch(u32InterruptFlag)
   \   00000002   491E               SUBS     R1,R1,#+1
   \   00000004   29D0               BEQ      ??DrvUART_GetIntStatus_0
   \   00000006   491E               SUBS     R1,R1,#+1
   \   00000008   1CD0               BEQ      ??DrvUART_GetIntStatus_1
   \   0000000A   891E               SUBS     R1,R1,#+2
   \   0000000C   0FD0               BEQ      ??DrvUART_GetIntStatus_2
   \   0000000E   091F               SUBS     R1,R1,#+4
   \   00000010   02D0               BEQ      ??DrvUART_GetIntStatus_3
   \   00000012   0839               SUBS     R1,R1,#+8
   \   00000014   2AD0               BEQ      ??DrvUART_GetIntStatus_4
   \   00000016   34E0               B        ??DrvUART_GetIntStatus_5
    658          	{
    659          		case DRVUART_MOSINT:				  	/* MODEM Status Interrupt */
    660          				return (inpw(&UART0->ISR + u16Port) & DRVUART_MOSINT)?TRUE:FALSE;
   \                     ??DrvUART_GetIntStatus_3:
   \   00000018   0421               MOVS     R1,#+4
   \   0000001A   4843               MULS     R0,R1,R0
   \   0000001C   ....               LDR      R1,??DataTable18  ;; 0x4005001c
   \   0000001E   0858               LDR      R0,[R1, R0]
   \   00000020   0007               LSLS     R0,R0,#+28
   \   00000022   01D5               BPL      ??DrvUART_GetIntStatus_6
   \   00000024   0120               MOVS     R0,#+1
   \   00000026   00E0               B        ??DrvUART_GetIntStatus_7
   \                     ??DrvUART_GetIntStatus_6:
   \   00000028   0020               MOVS     R0,#+0
   \                     ??DrvUART_GetIntStatus_7:
   \   0000002A   40B2               SXTB     R0,R0
   \   0000002C   2AE0               B        ??DrvUART_GetIntStatus_8
    661          		
    662          		case DRVUART_RLSNT:						/* Receive Line Status Interrupt */
    663          				return (inpw(&UART0->ISR + u16Port) & DRVUART_RLSNT)?TRUE:FALSE;
   \                     ??DrvUART_GetIntStatus_2:
   \   0000002E   0421               MOVS     R1,#+4
   \   00000030   4843               MULS     R0,R1,R0
   \   00000032   ....               LDR      R1,??DataTable18  ;; 0x4005001c
   \   00000034   0858               LDR      R0,[R1, R0]
   \   00000036   4007               LSLS     R0,R0,#+29
   \   00000038   01D5               BPL      ??DrvUART_GetIntStatus_9
   \   0000003A   0120               MOVS     R0,#+1
   \   0000003C   00E0               B        ??DrvUART_GetIntStatus_10
   \                     ??DrvUART_GetIntStatus_9:
   \   0000003E   0020               MOVS     R0,#+0
   \                     ??DrvUART_GetIntStatus_10:
   \   00000040   40B2               SXTB     R0,R0
   \   00000042   1FE0               B        ??DrvUART_GetIntStatus_8
    664          
    665          		case DRVUART_THREINT:					/* Transmit Holding Register Empty Interrupt */
    666          				return (inpw(&UART0->ISR + u16Port) & DRVUART_THREINT)?TRUE:FALSE;
   \                     ??DrvUART_GetIntStatus_1:
   \   00000044   0421               MOVS     R1,#+4
   \   00000046   4843               MULS     R0,R1,R0
   \   00000048   ....               LDR      R1,??DataTable18  ;; 0x4005001c
   \   0000004A   0858               LDR      R0,[R1, R0]
   \   0000004C   8007               LSLS     R0,R0,#+30
   \   0000004E   01D5               BPL      ??DrvUART_GetIntStatus_11
   \   00000050   0120               MOVS     R0,#+1
   \   00000052   00E0               B        ??DrvUART_GetIntStatus_12
   \                     ??DrvUART_GetIntStatus_11:
   \   00000054   0020               MOVS     R0,#+0
   \                     ??DrvUART_GetIntStatus_12:
   \   00000056   40B2               SXTB     R0,R0
   \   00000058   14E0               B        ??DrvUART_GetIntStatus_8
    667          
    668          		case DRVUART_RDAINT:					/* Receive Data Available Interrupt */
    669          				return (inpw(&UART0->ISR + u16Port) & DRVUART_RDAINT)?TRUE:FALSE;
   \                     ??DrvUART_GetIntStatus_0:
   \   0000005A   0421               MOVS     R1,#+4
   \   0000005C   4843               MULS     R0,R1,R0
   \   0000005E   ....               LDR      R1,??DataTable18  ;; 0x4005001c
   \   00000060   0958               LDR      R1,[R1, R0]
   \   00000062   0800               MOVS     R0,R1
   \   00000064   C007               LSLS     R0,R0,#+31       ;; ZeroExtS R0,R0,#+31,#+31
   \   00000066   C00F               LSRS     R0,R0,#+31
   \   00000068   40B2               SXTB     R0,R0
   \   0000006A   0BE0               B        ??DrvUART_GetIntStatus_8
    670          
    671          		case DRVUART_TOUTINT:					/* Time-out Interrupt */
    672          				return (inpw(&UART0->ISR + u16Port) & DRVUART_TOUTINT)?TRUE:FALSE;
   \                     ??DrvUART_GetIntStatus_4:
   \   0000006C   0421               MOVS     R1,#+4
   \   0000006E   4843               MULS     R0,R1,R0
   \   00000070   ....               LDR      R1,??DataTable18  ;; 0x4005001c
   \   00000072   0858               LDR      R0,[R1, R0]
   \   00000074   C006               LSLS     R0,R0,#+27
   \   00000076   01D5               BPL      ??DrvUART_GetIntStatus_13
   \   00000078   0120               MOVS     R0,#+1
   \   0000007A   00E0               B        ??DrvUART_GetIntStatus_14
   \                     ??DrvUART_GetIntStatus_13:
   \   0000007C   0020               MOVS     R0,#+0
   \                     ??DrvUART_GetIntStatus_14:
   \   0000007E   40B2               SXTB     R0,R0
   \   00000080   00E0               B        ??DrvUART_GetIntStatus_8
    673          
    674          		default:
    675          			return FALSE;
   \                     ??DrvUART_GetIntStatus_5:
   \   00000082   0020               MOVS     R0,#+0
   \                     ??DrvUART_GetIntStatus_8:
   \   00000084   00BD               POP      {PC}             ;; return
    676          	}
    677          	
    678          }
    679          
    680          
    681          /*---------------------------------------------------------------------------------------------------------*/
    682          /* Function:     DrvUART_SetFIFOTriggerLevel                                                               */
    683          /*                                                                                                         */
    684          /* Parameter:        																					   */	
    685          /*				 u16Port	   	  	  -[in]   UART Channel:  UART_PORT0 / UART_PORT1 / UART_PORT2          */
    686          /*               u32TriggerLevel     - [in]   FIFO Trigger Level :LEVEL_1_BYTE to LEVEL_62_BYTES    	   */
    687          /*                                                                                                         */
    688          /* Returns:                                                                                                */
    689          /*               None                                                                                      */
    690          /* Description:                                                                                            */
    691          /*               The function is used to set Rx FIFO Trigger Level                                         */
    692          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    693          void DrvUART_SetFIFOTriggerLevel(UART_PORT	u16Port,uint16_t u32TriggerLevel)
    694          {
   \                     DrvUART_SetFIFOTriggerLevel:
   \   00000000   00B5               PUSH     {LR}
    695          	if(u16Port == UART_PORT0)
   \   00000002   0028               CMP      R0,#+0
   \   00000004   0BD1               BNE      ??DrvUART_SetFIFOTriggerLevel_0
    696          		UART0->FCR.RFITL = u32TriggerLevel;
   \   00000006   ....               LDR      R0,??DataTable18_1  ;; 0x40050008
   \   00000008   0068               LDR      R0,[R0, #+0]
   \   0000000A   F022               MOVS     R2,#+240
   \   0000000C   9043               BICS     R0,R0,R2
   \   0000000E   89B2               UXTH     R1,R1
   \   00000010   0901               LSLS     R1,R1,#+4
   \   00000012   F022               MOVS     R2,#+240
   \   00000014   0A40               ANDS     R2,R2,R1
   \   00000016   0243               ORRS     R2,R2,R0
   \   00000018   ....               LDR      R0,??DataTable18_1  ;; 0x40050008
   \   0000001A   0260               STR      R2,[R0, #+0]
   \   0000001C   1AE0               B        ??DrvUART_SetFIFOTriggerLevel_1
    697          
    698          	else if(u16Port == UART_PORT1)
   \                     ??DrvUART_SetFIFOTriggerLevel_0:
   \   0000001E   8022               MOVS     R2,#+128
   \   00000020   5203               LSLS     R2,R2,#+13       ;; #+1048576
   \   00000022   9042               CMP      R0,R2
   \   00000024   0BD1               BNE      ??DrvUART_SetFIFOTriggerLevel_2
    699          		UART1->FCR.RFITL = u32TriggerLevel;
   \   00000026   ....               LDR      R0,??DataTable18_2  ;; 0x40150008
   \   00000028   0068               LDR      R0,[R0, #+0]
   \   0000002A   F022               MOVS     R2,#+240
   \   0000002C   9043               BICS     R0,R0,R2
   \   0000002E   89B2               UXTH     R1,R1
   \   00000030   0901               LSLS     R1,R1,#+4
   \   00000032   F022               MOVS     R2,#+240
   \   00000034   0A40               ANDS     R2,R2,R1
   \   00000036   0243               ORRS     R2,R2,R0
   \   00000038   ....               LDR      R0,??DataTable18_2  ;; 0x40150008
   \   0000003A   0260               STR      R2,[R0, #+0]
   \   0000003C   0AE0               B        ??DrvUART_SetFIFOTriggerLevel_1
    700          	else
    701          		UART2->FCR.RFITL = u32TriggerLevel;
   \                     ??DrvUART_SetFIFOTriggerLevel_2:
   \   0000003E   ....               LDR      R0,??DataTable18_3  ;; 0x40154008
   \   00000040   0068               LDR      R0,[R0, #+0]
   \   00000042   F022               MOVS     R2,#+240
   \   00000044   9043               BICS     R0,R0,R2
   \   00000046   89B2               UXTH     R1,R1
   \   00000048   0901               LSLS     R1,R1,#+4
   \   0000004A   F022               MOVS     R2,#+240
   \   0000004C   0A40               ANDS     R2,R2,R1
   \   0000004E   0243               ORRS     R2,R2,R0
   \   00000050   ....               LDR      R0,??DataTable18_3  ;; 0x40154008
   \   00000052   0260               STR      R2,[R0, #+0]
    702          		
    703          }
   \                     ??DrvUART_SetFIFOTriggerLevel_1:
   \   00000054   00BD               POP      {PC}             ;; return
    704          
    705          
    706          
    707          /*---------------------------------------------------------------------------------------------------------*/
    708          /* Function:     DrvUART_GetCTS				                                                               */
    709          /*                                                                                                         */
    710          /* Parameter:        																					   */	
    711          /*				 UART_PORT	   	  	  -[in]   UART Channel:  UART_PORT0 / UART_PORT1                       */
    712          /*               pu8CTSValue   		  -[in]   Buffer to store the CTS Value           	         		   */
    713          /*				 pu8CTSChangeState	  -[in]   Buffer to store the CTS Change State                         */
    714          /* Returns:                                                                                                */
    715          /*               None                                                                                      */
    716          /* Description:                                                                                            */
    717          /*               The function is used to get CTS value and change state                                    */
    718          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    719          void DrvUART_GetCTS(UART_PORT u16Port,uint8_t *pu8CTSValue,	uint8_t	*pu8CTSChangeState)
    720          {
   \                     DrvUART_GetCTS:
   \   00000000   00B5               PUSH     {LR}
    721          	if(u16Port == UART_PORT0)
   \   00000002   0028               CMP      R0,#+0
   \   00000004   0DD1               BNE      ??DrvUART_GetCTS_0
    722          	{
    723          		*pu8CTSValue 		= UART0->MSR.CTS;
   \   00000006   ....               LDR      R0,??DataTable17_2  ;; 0x40050014
   \   00000008   0068               LDR      R0,[R0, #+0]
   \   0000000A   1023               MOVS     R3,#+16
   \   0000000C   0340               ANDS     R3,R3,R0
   \   0000000E   1800               MOVS     R0,R3
   \   00000010   0009               LSRS     R0,R0,#+4
   \   00000012   0870               STRB     R0,[R1, #+0]
    724          		*pu8CTSChangeState 	= UART0->MSR.DCTS;
   \   00000014   ....               LDR      R0,??DataTable17_2  ;; 0x40050014
   \   00000016   0068               LDR      R0,[R0, #+0]
   \   00000018   0100               MOVS     R1,R0
   \   0000001A   C907               LSLS     R1,R1,#+31       ;; ZeroExtS R1,R1,#+31,#+31
   \   0000001C   C90F               LSRS     R1,R1,#+31
   \   0000001E   1170               STRB     R1,[R2, #+0]
    725          	}
    726          	else if(u16Port == UART_PORT1)
    727          	{
    728          		*pu8CTSValue 		= UART1->MSR.CTS;
    729          		*pu8CTSChangeState 	= UART1->MSR.DCTS;	
    730          	}
    731          	else
    732          		return;   /* CTS */
    733          }	
   \                     ??DrvUART_GetCTS_1:
   \                     ??DrvUART_GetCTS_2:
   \   00000020   00BD               POP      {PC}             ;; return
   \                     ??DrvUART_GetCTS_0:
   \   00000022   8023               MOVS     R3,#+128
   \   00000024   5B03               LSLS     R3,R3,#+13       ;; #+1048576
   \   00000026   9842               CMP      R0,R3
   \   00000028   0DD1               BNE      ??DrvUART_GetCTS_3
   \   0000002A   ....               LDR      R0,??DataTable18_4  ;; 0x40150014
   \   0000002C   0068               LDR      R0,[R0, #+0]
   \   0000002E   1023               MOVS     R3,#+16
   \   00000030   0340               ANDS     R3,R3,R0
   \   00000032   1800               MOVS     R0,R3
   \   00000034   0009               LSRS     R0,R0,#+4
   \   00000036   0870               STRB     R0,[R1, #+0]
   \   00000038   ....               LDR      R0,??DataTable18_4  ;; 0x40150014
   \   0000003A   0068               LDR      R0,[R0, #+0]
   \   0000003C   0100               MOVS     R1,R0
   \   0000003E   C907               LSLS     R1,R1,#+31       ;; ZeroExtS R1,R1,#+31,#+31
   \   00000040   C90F               LSRS     R1,R1,#+31
   \   00000042   1170               STRB     R1,[R2, #+0]
   \   00000044   ECE7               B        ??DrvUART_GetCTS_1
   \                     ??DrvUART_GetCTS_3:
   \   00000046   EBE7               B        ??DrvUART_GetCTS_2
    734          
    735          /*---------------------------------------------------------------------------------------------------------*/
    736          /* Function:     DrvUART_SetRxTimeOut                                                                      */
    737          /*                                                                                                         */
    738          /* Parameter:        																					   */	
    739          /*				 u16Port	   	  	  -[in]   UART Channel:  UART_PORT0 / UART_PORT1  / UART_PORT2         */
    740          /*               u8TimeOut   		  -[in]   Time out value	           	         		               */
    741          /*                                                                                                         */
    742          /* Returns:                                                                                                */
    743          /*               None                                                                                      */
    744          /* Description:                                                                                            */
    745          /*               The function is used to set Rx Time Out Value                                             */
    746          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    747          void DrvUART_SetRxTimeOut(UART_PORT	u16Port, uint8_t u8TimeOut)
    748          {
   \                     DrvUART_SetRxTimeOut:
   \   00000000   00B5               PUSH     {LR}
    749          	if(u16Port == UART_PORT0)
   \   00000002   0028               CMP      R0,#+0
   \   00000004   0AD1               BNE      ??DrvUART_SetRxTimeOut_0
    750          	{
    751          		UART0->TOR = u8TimeOut;							/* Set Time out value */
   \   00000006   ....               LDR      R0,??DataTable18_5  ;; 0x40050020
   \   00000008   C9B2               UXTB     R1,R1
   \   0000000A   0160               STR      R1,[R0, #+0]
    752          		UART0->IER.TOC_EN =1;							/* Enable Time-out count  */
   \   0000000C   ....               LDR      R0,??DataTable16_1  ;; 0x40050004
   \   0000000E   0068               LDR      R0,[R0, #+0]
   \   00000010   8021               MOVS     R1,#+128
   \   00000012   0901               LSLS     R1,R1,#+4        ;; #+2048
   \   00000014   0143               ORRS     R1,R1,R0
   \   00000016   ....               LDR      R0,??DataTable16_1  ;; 0x40050004
   \   00000018   0160               STR      R1,[R0, #+0]
   \   0000001A   18E0               B        ??DrvUART_SetRxTimeOut_1
    753          	}
    754          	else if(u16Port == UART_PORT1)
   \                     ??DrvUART_SetRxTimeOut_0:
   \   0000001C   8022               MOVS     R2,#+128
   \   0000001E   5203               LSLS     R2,R2,#+13       ;; #+1048576
   \   00000020   9042               CMP      R0,R2
   \   00000022   0AD1               BNE      ??DrvUART_SetRxTimeOut_2
    755          	{
    756          		UART1->TOR = u8TimeOut;
   \   00000024   ....               LDR      R0,??DataTable18_6  ;; 0x40150020
   \   00000026   C9B2               UXTB     R1,R1
   \   00000028   0160               STR      R1,[R0, #+0]
    757          		UART1->IER.TOC_EN = 1;
   \   0000002A   ....               LDR      R0,??DataTable16_2  ;; 0x40150004
   \   0000002C   0068               LDR      R0,[R0, #+0]
   \   0000002E   8021               MOVS     R1,#+128
   \   00000030   0901               LSLS     R1,R1,#+4        ;; #+2048
   \   00000032   0143               ORRS     R1,R1,R0
   \   00000034   ....               LDR      R0,??DataTable16_2  ;; 0x40150004
   \   00000036   0160               STR      R1,[R0, #+0]
   \   00000038   09E0               B        ??DrvUART_SetRxTimeOut_1
    758          	}
    759          	else 
    760          	{
    761          		UART2->TOR = u8TimeOut;
   \                     ??DrvUART_SetRxTimeOut_2:
   \   0000003A   ....               LDR      R0,??DataTable18_7  ;; 0x40154020
   \   0000003C   C9B2               UXTB     R1,R1
   \   0000003E   0160               STR      R1,[R0, #+0]
    762          		UART2->IER.TOC_EN = 1;
   \   00000040   ....               LDR      R0,??DataTable19  ;; 0x40154004
   \   00000042   0068               LDR      R0,[R0, #+0]
   \   00000044   8021               MOVS     R1,#+128
   \   00000046   0901               LSLS     R1,R1,#+4        ;; #+2048
   \   00000048   0143               ORRS     R1,R1,R0
   \   0000004A   ....               LDR      R0,??DataTable19  ;; 0x40154004
   \   0000004C   0160               STR      R1,[R0, #+0]
    763          	}
    764          }	
   \                     ??DrvUART_SetRxTimeOut_1:
   \   0000004E   00BD               POP      {PC}             ;; return
    765          
    766           
    767          /*---------------------------------------------------------------------------------------------------------*/
    768          /* Function:     DrvUART_Read                                                                              */
    769          /*                                                                                                         */
    770          /* Parameter:                                                                                              */
    771          /*				 u16Port	   	  	  -[in]   UART Channel:  UART_PORT0 / UART_PORT1  / UART_PORT2         */
    772          /*               pu8RxBuf   		  -[in]   Specify the buffer to receive the data of receive FIFO       */
    773          /*               u32ReadBytes  		  -[in]   Specify the bytes number of data.     		               */
    774          /* Returns:                                                                                                */
    775          /*               E_SUCCESS                                                                          	   */
    776          /* Description:                                                                                            */
    777          /*               The function is used to read Rx data from RX buffer   	                                   */
    778          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    779          int32_t DrvUART_Read(UART_PORT	u16Port,uint8_t	*pu8RxBuf, uint32_t	u32ReadBytes)
    780          {
   \                     DrvUART_Read:
   \   00000000   30B5               PUSH     {R4,R5,LR}
    781              uint32_t  u32Count, u32delayno;
    782              
    783          	if(u16Port == UART_PORT0)
   \   00000002   0028               CMP      R0,#+0
   \   00000004   18D1               BNE      ??DrvUART_Read_0
    784          	{
    785          	    for (u32Count=0; u32Count < u32ReadBytes; u32Count++)
   \   00000006   0020               MOVS     R0,#+0
   \   00000008   03E0               B        ??DrvUART_Read_1
    786          	    {
    787          	    	 u32delayno = 0;
    788          	         while (UART0->FSR.RX_EMPTY ==1)					  /* Check RX empty => failed */	   
    789          	         {
    790          	             u32delayno++;        
    791          	             if ( u32delayno >= 0x40000000 )        
    792          	                return E_DRVUART_ERR_TIMEOUT;               
    793          					
    794          	         }
    795          	         pu8RxBuf[u32Count] = UART0->DATA;					  /* Get Data from UART RX  */
   \                     ??DrvUART_Read_2:
   \   0000000A   ....               LDR      R3,??DataTable17  ;; 0x40050000
   \   0000000C   1B68               LDR      R3,[R3, #+0]
   \   0000000E   0B54               STRB     R3,[R1, R0]
   \   00000010   401C               ADDS     R0,R0,#+1
   \                     ??DrvUART_Read_1:
   \   00000012   9042               CMP      R0,R2
   \   00000014   46D2               BCS      ??DrvUART_Read_3
   \   00000016   0023               MOVS     R3,#+0
   \                     ??DrvUART_Read_4:
   \   00000018   ....               LDR      R4,??DataTable17_1  ;; 0x40050018
   \   0000001A   2468               LDR      R4,[R4, #+0]
   \   0000001C   8025               MOVS     R5,#+128
   \   0000001E   ED01               LSLS     R5,R5,#+7        ;; #+16384
   \   00000020   2540               ANDS     R5,R5,R4
   \   00000022   2C00               MOVS     R4,R5
   \   00000024   A40B               LSRS     R4,R4,#+14
   \   00000026   012C               CMP      R4,#+1
   \   00000028   EFD1               BNE      ??DrvUART_Read_2
   \   0000002A   5B1C               ADDS     R3,R3,#+1
   \   0000002C   8024               MOVS     R4,#+128
   \   0000002E   E405               LSLS     R4,R4,#+23       ;; #+1073741824
   \   00000030   A342               CMP      R3,R4
   \   00000032   F1D3               BCC      ??DrvUART_Read_4
   \   00000034   ....               LDR      R0,??DataTable19_1  ;; 0xffff9801
   \   00000036   36E0               B        ??DrvUART_Read_5
    796          	    }
    797          	}
    798          	else if(u16Port == UART_PORT1)   
   \                     ??DrvUART_Read_0:
   \   00000038   8023               MOVS     R3,#+128
   \   0000003A   5B03               LSLS     R3,R3,#+13       ;; #+1048576
   \   0000003C   9842               CMP      R0,R3
   \   0000003E   18D1               BNE      ??DrvUART_Read_6
    799          	{
    800          		for (u32Count=0; u32Count < u32ReadBytes; u32Count++)
   \   00000040   0020               MOVS     R0,#+0
   \   00000042   03E0               B        ??DrvUART_Read_7
    801          	    {
    802          	    	 u32delayno = 0;
    803          	         while (UART1->FSR.RX_EMPTY ==1)
    804          	         {
    805          	             u32delayno++;        
    806          	             if ( u32delayno >= 0x40000000 )        
    807          	                return E_DRVUART_ERR_TIMEOUT;               
    808          					
    809          	         }
    810          	         pu8RxBuf[u32Count] = UART1->DATA;
   \                     ??DrvUART_Read_8:
   \   00000044   ....               LDR      R3,??DataTable19_2  ;; 0x40150000
   \   00000046   1B68               LDR      R3,[R3, #+0]
   \   00000048   0B54               STRB     R3,[R1, R0]
   \   0000004A   401C               ADDS     R0,R0,#+1
   \                     ??DrvUART_Read_7:
   \   0000004C   9042               CMP      R0,R2
   \   0000004E   29D2               BCS      ??DrvUART_Read_3
   \   00000050   0023               MOVS     R3,#+0
   \                     ??DrvUART_Read_9:
   \   00000052   ....               LDR      R4,??DataTable19_3  ;; 0x40150018
   \   00000054   2468               LDR      R4,[R4, #+0]
   \   00000056   8025               MOVS     R5,#+128
   \   00000058   ED01               LSLS     R5,R5,#+7        ;; #+16384
   \   0000005A   2540               ANDS     R5,R5,R4
   \   0000005C   2C00               MOVS     R4,R5
   \   0000005E   A40B               LSRS     R4,R4,#+14
   \   00000060   012C               CMP      R4,#+1
   \   00000062   EFD1               BNE      ??DrvUART_Read_8
   \   00000064   5B1C               ADDS     R3,R3,#+1
   \   00000066   8024               MOVS     R4,#+128
   \   00000068   E405               LSLS     R4,R4,#+23       ;; #+1073741824
   \   0000006A   A342               CMP      R3,R4
   \   0000006C   F1D3               BCC      ??DrvUART_Read_9
   \   0000006E   ....               LDR      R0,??DataTable19_1  ;; 0xffff9801
   \   00000070   19E0               B        ??DrvUART_Read_5
    811          	    }
    812          	
    813          	}
    814          	else 
    815          	{
    816          		for (u32Count=0; u32Count < u32ReadBytes; u32Count++)
   \                     ??DrvUART_Read_6:
   \   00000072   0020               MOVS     R0,#+0
   \   00000074   03E0               B        ??DrvUART_Read_10
    817          	    {
    818          	    	 u32delayno = 0;
    819          	         while (UART2->FSR.RX_EMPTY ==1)
    820          	         {
    821          	             u32delayno++;        
    822          	             if ( u32delayno >= 0x40000000 )        
    823          	                return E_DRVUART_ERR_TIMEOUT;               
    824          					
    825          	         }
    826          	         pu8RxBuf[u32Count] = UART2->DATA;
   \                     ??DrvUART_Read_11:
   \   00000076   ....               LDR      R3,??DataTable19_4  ;; 0x40154000
   \   00000078   1B68               LDR      R3,[R3, #+0]
   \   0000007A   0B54               STRB     R3,[R1, R0]
   \   0000007C   401C               ADDS     R0,R0,#+1
   \                     ??DrvUART_Read_10:
   \   0000007E   9042               CMP      R0,R2
   \   00000080   10D2               BCS      ??DrvUART_Read_3
   \   00000082   0023               MOVS     R3,#+0
   \                     ??DrvUART_Read_12:
   \   00000084   ....               LDR      R4,??DataTable19_5  ;; 0x40154018
   \   00000086   2468               LDR      R4,[R4, #+0]
   \   00000088   8025               MOVS     R5,#+128
   \   0000008A   ED01               LSLS     R5,R5,#+7        ;; #+16384
   \   0000008C   2540               ANDS     R5,R5,R4
   \   0000008E   2C00               MOVS     R4,R5
   \   00000090   A40B               LSRS     R4,R4,#+14
   \   00000092   012C               CMP      R4,#+1
   \   00000094   EFD1               BNE      ??DrvUART_Read_11
   \   00000096   5B1C               ADDS     R3,R3,#+1
   \   00000098   8024               MOVS     R4,#+128
   \   0000009A   E405               LSLS     R4,R4,#+23       ;; #+1073741824
   \   0000009C   A342               CMP      R3,R4
   \   0000009E   F1D3               BCC      ??DrvUART_Read_12
   \   000000A0   ....               LDR      R0,??DataTable19_1  ;; 0xffff9801
   \   000000A2   00E0               B        ??DrvUART_Read_5
    827          	    }
    828          	
    829          	}
    830              return E_SUCCESS;
   \                     ??DrvUART_Read_3:
   \   000000A4   0020               MOVS     R0,#+0
   \                     ??DrvUART_Read_5:
   \   000000A6   30BD               POP      {R4,R5,PC}       ;; return
    831          	
    832          }
    833          
    834          
    835          
    836          /*---------------------------------------------------------------------------------------------------------*/
    837          /* Function:     DrvUART_Write	                                                                           */
    838          /*                                                                                                         */
    839          /* Parameter:                                                                                              */
    840          /*				 u16Port	   	  	  -[in]   UART Channel:  UART_PORT0 / UART_PORT1 /UART_PORT2           */
    841          /*               pu8RxBuf   		  -[in]   Specify the buffer to send the data to transmission FIFO.    */
    842          /*               u32ReadBytes  		  -[in]   Specify the byte number of data.         		               */
    843          /* Returns:                                                                                                */
    844          /*               E_SUCCESS                                                                          	   */
    845          /*                                                                                                         */
    846          /* Description:                                                                                            */
    847          /*               The function is to write data to TX buffer to transmit data by uart                       */
    848          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    849          int32_t DrvUART_Write(UART_PORT	u16Port,uint8_t	*pu8TxBuf, 	uint32_t u32WriteBytes)
    850          {
   \                     DrvUART_Write:
   \   00000000   30B5               PUSH     {R4,R5,LR}
    851              uint32_t  u32Count, u32delayno;
    852              
    853          	if(u16Port == UART_PORT0)
   \   00000002   0028               CMP      R0,#+0
   \   00000004   18D1               BNE      ??DrvUART_Write_0
    854          	{
    855          	    for (u32Count=0; u32Count<u32WriteBytes; u32Count++)
   \   00000006   0020               MOVS     R0,#+0
   \   00000008   03E0               B        ??DrvUART_Write_1
    856          	    {
    857          	       u32delayno = 0;
    858          		   while (UART0->FSR.TX_EMPTY !=1)							/* Wait Tx empty and Time-out manner */
    859          	       {
    860          	       	    u32delayno++;
    861          	       	    if ( u32delayno >= 0x40000000 )     	    
    862          	       	       return E_DRVUART_ERR_TIMEOUT;     	       
    863          				   
    864          	       }
    865          		   UART0->DATA = pu8TxBuf[u32Count];						/* Send UART Data from buffer */
   \                     ??DrvUART_Write_2:
   \   0000000A   0B5C               LDRB     R3,[R1, R0]
   \   0000000C   ....               LDR      R4,??DataTable18_8  ;; 0x40050000
   \   0000000E   2360               STR      R3,[R4, #+0]
   \   00000010   401C               ADDS     R0,R0,#+1
   \                     ??DrvUART_Write_1:
   \   00000012   9042               CMP      R0,R2
   \   00000014   46D2               BCS      ??DrvUART_Write_3
   \   00000016   0023               MOVS     R3,#+0
   \                     ??DrvUART_Write_4:
   \   00000018   ....               LDR      R4,??DataTable19_6  ;; 0x40050018
   \   0000001A   2468               LDR      R4,[R4, #+0]
   \   0000001C   8025               MOVS     R5,#+128
   \   0000001E   ED03               LSLS     R5,R5,#+15       ;; #+4194304
   \   00000020   2540               ANDS     R5,R5,R4
   \   00000022   2C00               MOVS     R4,R5
   \   00000024   A40D               LSRS     R4,R4,#+22
   \   00000026   012C               CMP      R4,#+1
   \   00000028   EFD0               BEQ      ??DrvUART_Write_2
   \   0000002A   5B1C               ADDS     R3,R3,#+1
   \   0000002C   8024               MOVS     R4,#+128
   \   0000002E   E405               LSLS     R4,R4,#+23       ;; #+1073741824
   \   00000030   A342               CMP      R3,R4
   \   00000032   F1D3               BCC      ??DrvUART_Write_4
   \   00000034   ....               LDR      R0,??DataTable19_1  ;; 0xffff9801
   \   00000036   36E0               B        ??DrvUART_Write_5
    866          	    }
    867          	}
    868          	else if(u16Port == UART_PORT1)
   \                     ??DrvUART_Write_0:
   \   00000038   8023               MOVS     R3,#+128
   \   0000003A   5B03               LSLS     R3,R3,#+13       ;; #+1048576
   \   0000003C   9842               CMP      R0,R3
   \   0000003E   18D1               BNE      ??DrvUART_Write_6
    869          	{
    870          		for (u32Count=0; u32Count<u32WriteBytes; u32Count++)
   \   00000040   0020               MOVS     R0,#+0
   \   00000042   03E0               B        ??DrvUART_Write_7
    871          	    {
    872          	       u32delayno = 0;
    873          	    
    874          		   while (UART1->FSR.TX_EMPTY !=1)
    875          	       {
    876          	       	    u32delayno++;
    877          	       	    if ( u32delayno >= 0x40000000 )     	    
    878          	       	       return E_DRVUART_ERR_TIMEOUT;     	       
    879          	       }
    880          	       
    881          		   UART1->DATA = pu8TxBuf[u32Count];					 	/* Send UART Data from buffer */
   \                     ??DrvUART_Write_8:
   \   00000044   0B5C               LDRB     R3,[R1, R0]
   \   00000046   ....               LDR      R4,??DataTable19_2  ;; 0x40150000
   \   00000048   2360               STR      R3,[R4, #+0]
   \   0000004A   401C               ADDS     R0,R0,#+1
   \                     ??DrvUART_Write_7:
   \   0000004C   9042               CMP      R0,R2
   \   0000004E   29D2               BCS      ??DrvUART_Write_3
   \   00000050   0023               MOVS     R3,#+0
   \                     ??DrvUART_Write_9:
   \   00000052   ....               LDR      R4,??DataTable19_3  ;; 0x40150018
   \   00000054   2468               LDR      R4,[R4, #+0]
   \   00000056   8025               MOVS     R5,#+128
   \   00000058   ED03               LSLS     R5,R5,#+15       ;; #+4194304
   \   0000005A   2540               ANDS     R5,R5,R4
   \   0000005C   2C00               MOVS     R4,R5
   \   0000005E   A40D               LSRS     R4,R4,#+22
   \   00000060   012C               CMP      R4,#+1
   \   00000062   EFD0               BEQ      ??DrvUART_Write_8
   \   00000064   5B1C               ADDS     R3,R3,#+1
   \   00000066   8024               MOVS     R4,#+128
   \   00000068   E405               LSLS     R4,R4,#+23       ;; #+1073741824
   \   0000006A   A342               CMP      R3,R4
   \   0000006C   F1D3               BCC      ??DrvUART_Write_9
   \   0000006E   ....               LDR      R0,??DataTable19_1  ;; 0xffff9801
   \   00000070   19E0               B        ??DrvUART_Write_5
    882          	    }
    883          	
    884          	}
    885          	else 
    886          	{
    887          		for (u32Count=0; u32Count<u32WriteBytes; u32Count++)
   \                     ??DrvUART_Write_6:
   \   00000072   0020               MOVS     R0,#+0
   \   00000074   03E0               B        ??DrvUART_Write_10
    888          	    {
    889          	       u32delayno = 0;
    890          	    
    891          		   while (UART2->FSR.TX_EMPTY !=1)
    892          	       {
    893          	       	    u32delayno++;
    894          	       	    if ( u32delayno >= 0x40000000 )     	    
    895          	       	       return E_DRVUART_ERR_TIMEOUT;     	       
    896          	       }
    897          	       
    898          		   UART2->DATA = pu8TxBuf[u32Count];					 	/* Send UART Data from buffer */
   \                     ??DrvUART_Write_11:
   \   00000076   0B5C               LDRB     R3,[R1, R0]
   \   00000078   ....               LDR      R4,??DataTable19_4  ;; 0x40154000
   \   0000007A   2360               STR      R3,[R4, #+0]
   \   0000007C   401C               ADDS     R0,R0,#+1
   \                     ??DrvUART_Write_10:
   \   0000007E   9042               CMP      R0,R2
   \   00000080   10D2               BCS      ??DrvUART_Write_3
   \   00000082   0023               MOVS     R3,#+0
   \                     ??DrvUART_Write_12:
   \   00000084   ....               LDR      R4,??DataTable19_5  ;; 0x40154018
   \   00000086   2468               LDR      R4,[R4, #+0]
   \   00000088   8025               MOVS     R5,#+128
   \   0000008A   ED03               LSLS     R5,R5,#+15       ;; #+4194304
   \   0000008C   2540               ANDS     R5,R5,R4
   \   0000008E   2C00               MOVS     R4,R5
   \   00000090   A40D               LSRS     R4,R4,#+22
   \   00000092   012C               CMP      R4,#+1
   \   00000094   EFD0               BEQ      ??DrvUART_Write_11
   \   00000096   5B1C               ADDS     R3,R3,#+1
   \   00000098   8024               MOVS     R4,#+128
   \   0000009A   E405               LSLS     R4,R4,#+23       ;; #+1073741824
   \   0000009C   A342               CMP      R3,R4
   \   0000009E   F1D3               BCC      ??DrvUART_Write_12
   \   000000A0   ....               LDR      R0,??DataTable19_1  ;; 0xffff9801
   \   000000A2   00E0               B        ??DrvUART_Write_5
    899          	    }
    900          	
    901          	}
    902              return E_SUCCESS;
   \                     ??DrvUART_Write_3:
   \   000000A4   0020               MOVS     R0,#+0
   \                     ??DrvUART_Write_5:
   \   000000A6   30BD               POP      {R4,R5,PC}       ;; return
    903          	
    904            
    905          }
    906          
    907          
    908          /*---------------------------------------------------------------------------------------------------------*/
    909          /* Function:     DrvUART_OpenIRCR                                                                          */
    910          /*                                                                                                         */
    911          /* Parameter:                                                                                              */
    912          /*				 u16Port	   	  	  -[in]   UART Channel:  UART_PORT0 / UART_PORT1 /UART_PORT2           */
    913          /*               STR_IRCR_T   		  -[in]   Ther stucture of IRCR  	  	         		               */
    914          /*                                            It includes of                                               */
    915          /*                                               u8cTXSelect: Tx select TRUE or FALSE                      */
    916          /*                                               u8cRXSelect: Rx select TRUE or FALSE                      */
    917          /*                                               u8cInvTX: Inverse TX signal                               */
    918          /*                                               u8cInvRX: Inverse RX signal                               */
    919          /*                                                                                                         */
    920          /* Returns:                                                                                                */
    921          /*               E_SUCCESS                                                                          	   */
    922          /*                                                                                                         */
    923          /* Description:                                                                                            */
    924          /*               The function is to Set IRCR Control Register                                              */
    925          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    926          void DrvUART_OpenIRCR(UART_PORT u16Port,STR_IRCR_T str_IRCR )
    927          {
   \                     DrvUART_OpenIRCR:
   \   00000000   02B5               PUSH     {R1,LR}
    928          	if(u16Port == UART_PORT0)
   \   00000002   0028               CMP      R0,#+0
   \   00000004   3ED1               BNE      ??DrvUART_OpenIRCR_0
    929          	{
    930          		UART0->FUNSEL.LIN_EN 	= 0;
   \   00000006   ....               LDR      R0,??DataTable21  ;; 0x40050030
   \   00000008   0068               LDR      R0,[R0, #+0]
   \   0000000A   0321               MOVS     R1,#+3
   \   0000000C   8843               BICS     R0,R0,R1
   \   0000000E   ....               LDR      R1,??DataTable21  ;; 0x40050030
   \   00000010   0860               STR      R0,[R1, #+0]
    931          		UART0->FUNSEL.IrDA_EN 	= 1;	
   \   00000012   ....               LDR      R0,??DataTable21  ;; 0x40050030
   \   00000014   0068               LDR      R0,[R0, #+0]
   \   00000016   0C21               MOVS     R1,#+12
   \   00000018   8843               BICS     R0,R0,R1
   \   0000001A   0421               MOVS     R1,#+4
   \   0000001C   0143               ORRS     R1,R1,R0
   \   0000001E   ....               LDR      R0,??DataTable21  ;; 0x40050030
   \   00000020   0160               STR      R1,[R0, #+0]
    932          		UART0->IRCR.RX_EN 		= str_IRCR.u8cRXSelect ;
   \   00000022   ....               LDR      R0,??DataTable21_1  ;; 0x40050028
   \   00000024   0068               LDR      R0,[R0, #+0]
   \   00000026   0821               MOVS     R1,#+8
   \   00000028   8843               BICS     R0,R0,R1
   \   0000002A   6946               MOV      R1,SP
   \   0000002C   0978               LDRB     R1,[R1, #+0]
   \   0000002E   C900               LSLS     R1,R1,#+3
   \   00000030   0822               MOVS     R2,#+8
   \   00000032   0A40               ANDS     R2,R2,R1
   \   00000034   0243               ORRS     R2,R2,R0
   \   00000036   ....               LDR      R0,??DataTable21_1  ;; 0x40050028
   \   00000038   0260               STR      R2,[R0, #+0]
    933          		UART0->IRCR.TX_EN 		= str_IRCR.u8cTXSelect ;
   \   0000003A   ....               LDR      R0,??DataTable21_1  ;; 0x40050028
   \   0000003C   0068               LDR      R0,[R0, #+0]
   \   0000003E   1021               MOVS     R1,#+16
   \   00000040   8843               BICS     R0,R0,R1
   \   00000042   6946               MOV      R1,SP
   \   00000044   4978               LDRB     R1,[R1, #+1]
   \   00000046   0901               LSLS     R1,R1,#+4
   \   00000048   1022               MOVS     R2,#+16
   \   0000004A   0A40               ANDS     R2,R2,R1
   \   0000004C   0243               ORRS     R2,R2,R0
   \   0000004E   ....               LDR      R0,??DataTable21_1  ;; 0x40050028
   \   00000050   0260               STR      R2,[R0, #+0]
    934          		UART0->IRCR.TX_INV_EN	= str_IRCR.u8cInvTX ;
   \   00000052   ....               LDR      R0,??DataTable21_1  ;; 0x40050028
   \   00000054   0068               LDR      R0,[R0, #+0]
   \   00000056   2021               MOVS     R1,#+32
   \   00000058   8843               BICS     R0,R0,R1
   \   0000005A   6946               MOV      R1,SP
   \   0000005C   8978               LDRB     R1,[R1, #+2]
   \   0000005E   4901               LSLS     R1,R1,#+5
   \   00000060   2022               MOVS     R2,#+32
   \   00000062   0A40               ANDS     R2,R2,R1
   \   00000064   0243               ORRS     R2,R2,R0
   \   00000066   ....               LDR      R0,??DataTable21_1  ;; 0x40050028
   \   00000068   0260               STR      R2,[R0, #+0]
    935          		UART0->IRCR.RX_INV_EN	= str_IRCR.u8cInvRX ;
   \   0000006A   ....               LDR      R0,??DataTable21_1  ;; 0x40050028
   \   0000006C   0068               LDR      R0,[R0, #+0]
   \   0000006E   4021               MOVS     R1,#+64
   \   00000070   8843               BICS     R0,R0,R1
   \   00000072   6946               MOV      R1,SP
   \   00000074   C978               LDRB     R1,[R1, #+3]
   \   00000076   8901               LSLS     R1,R1,#+6
   \   00000078   4022               MOVS     R2,#+64
   \   0000007A   0A40               ANDS     R2,R2,R1
   \   0000007C   0243               ORRS     R2,R2,R0
   \   0000007E   ....               LDR      R0,??DataTable21_1  ;; 0x40050028
   \   00000080   0260               STR      R2,[R0, #+0]
   \   00000082   80E0               B        ??DrvUART_OpenIRCR_1
    936          		
    937          	}
    938          	else if(u16Port == UART_PORT1)
   \                     ??DrvUART_OpenIRCR_0:
   \   00000084   8021               MOVS     R1,#+128
   \   00000086   4903               LSLS     R1,R1,#+13       ;; #+1048576
   \   00000088   8842               CMP      R0,R1
   \   0000008A   3ED1               BNE      ??DrvUART_OpenIRCR_2
    939          	{
    940          	   	UART1->FUNSEL.LIN_EN 	= 0;
   \   0000008C   ....               LDR      R0,??DataTable23  ;; 0x40150030
   \   0000008E   0068               LDR      R0,[R0, #+0]
   \   00000090   0321               MOVS     R1,#+3
   \   00000092   8843               BICS     R0,R0,R1
   \   00000094   ....               LDR      R1,??DataTable23  ;; 0x40150030
   \   00000096   0860               STR      R0,[R1, #+0]
    941          		UART1->FUNSEL.IrDA_EN 	= 1;
   \   00000098   ....               LDR      R0,??DataTable23  ;; 0x40150030
   \   0000009A   0068               LDR      R0,[R0, #+0]
   \   0000009C   0C21               MOVS     R1,#+12
   \   0000009E   8843               BICS     R0,R0,R1
   \   000000A0   0421               MOVS     R1,#+4
   \   000000A2   0143               ORRS     R1,R1,R0
   \   000000A4   ....               LDR      R0,??DataTable23  ;; 0x40150030
   \   000000A6   0160               STR      R1,[R0, #+0]
    942          		UART1->IRCR.RX_EN 		= str_IRCR.u8cRXSelect ;
   \   000000A8   ....               LDR      R0,??DataTable23_1  ;; 0x40150028
   \   000000AA   0068               LDR      R0,[R0, #+0]
   \   000000AC   0821               MOVS     R1,#+8
   \   000000AE   8843               BICS     R0,R0,R1
   \   000000B0   6946               MOV      R1,SP
   \   000000B2   0978               LDRB     R1,[R1, #+0]
   \   000000B4   C900               LSLS     R1,R1,#+3
   \   000000B6   0822               MOVS     R2,#+8
   \   000000B8   0A40               ANDS     R2,R2,R1
   \   000000BA   0243               ORRS     R2,R2,R0
   \   000000BC   ....               LDR      R0,??DataTable23_1  ;; 0x40150028
   \   000000BE   0260               STR      R2,[R0, #+0]
    943          		UART1->IRCR.TX_EN 		= str_IRCR.u8cTXSelect ;
   \   000000C0   ....               LDR      R0,??DataTable23_1  ;; 0x40150028
   \   000000C2   0068               LDR      R0,[R0, #+0]
   \   000000C4   1021               MOVS     R1,#+16
   \   000000C6   8843               BICS     R0,R0,R1
   \   000000C8   6946               MOV      R1,SP
   \   000000CA   4978               LDRB     R1,[R1, #+1]
   \   000000CC   0901               LSLS     R1,R1,#+4
   \   000000CE   1022               MOVS     R2,#+16
   \   000000D0   0A40               ANDS     R2,R2,R1
   \   000000D2   0243               ORRS     R2,R2,R0
   \   000000D4   ....               LDR      R0,??DataTable23_1  ;; 0x40150028
   \   000000D6   0260               STR      R2,[R0, #+0]
    944          		UART1->IRCR.TX_INV_EN	= str_IRCR.u8cInvTX ;
   \   000000D8   ....               LDR      R0,??DataTable23_1  ;; 0x40150028
   \   000000DA   0068               LDR      R0,[R0, #+0]
   \   000000DC   2021               MOVS     R1,#+32
   \   000000DE   8843               BICS     R0,R0,R1
   \   000000E0   6946               MOV      R1,SP
   \   000000E2   8978               LDRB     R1,[R1, #+2]
   \   000000E4   4901               LSLS     R1,R1,#+5
   \   000000E6   2022               MOVS     R2,#+32
   \   000000E8   0A40               ANDS     R2,R2,R1
   \   000000EA   0243               ORRS     R2,R2,R0
   \   000000EC   ....               LDR      R0,??DataTable23_1  ;; 0x40150028
   \   000000EE   0260               STR      R2,[R0, #+0]
    945          		UART1->IRCR.RX_INV_EN	= str_IRCR.u8cInvRX ;			
   \   000000F0   ....               LDR      R0,??DataTable23_1  ;; 0x40150028
   \   000000F2   0068               LDR      R0,[R0, #+0]
   \   000000F4   4021               MOVS     R1,#+64
   \   000000F6   8843               BICS     R0,R0,R1
   \   000000F8   6946               MOV      R1,SP
   \   000000FA   C978               LDRB     R1,[R1, #+3]
   \   000000FC   8901               LSLS     R1,R1,#+6
   \   000000FE   4022               MOVS     R2,#+64
   \   00000100   0A40               ANDS     R2,R2,R1
   \   00000102   0243               ORRS     R2,R2,R0
   \   00000104   ....               LDR      R0,??DataTable23_1  ;; 0x40150028
   \   00000106   0260               STR      R2,[R0, #+0]
   \   00000108   3DE0               B        ??DrvUART_OpenIRCR_1
    946          	}
    947          
    948          	else
    949          	{
    950          	   	UART2->FUNSEL.LIN_EN 	= 0;
   \                     ??DrvUART_OpenIRCR_2:
   \   0000010A   ....               LDR      R0,??DataTable23_2  ;; 0x40154030
   \   0000010C   0068               LDR      R0,[R0, #+0]
   \   0000010E   0321               MOVS     R1,#+3
   \   00000110   8843               BICS     R0,R0,R1
   \   00000112   ....               LDR      R1,??DataTable23_2  ;; 0x40154030
   \   00000114   0860               STR      R0,[R1, #+0]
    951          		UART2->FUNSEL.IrDA_EN 	= 1;
   \   00000116   ....               LDR      R0,??DataTable23_2  ;; 0x40154030
   \   00000118   0068               LDR      R0,[R0, #+0]
   \   0000011A   0C21               MOVS     R1,#+12
   \   0000011C   8843               BICS     R0,R0,R1
   \   0000011E   0421               MOVS     R1,#+4
   \   00000120   0143               ORRS     R1,R1,R0
   \   00000122   ....               LDR      R0,??DataTable23_2  ;; 0x40154030
   \   00000124   0160               STR      R1,[R0, #+0]
    952          		UART2->IRCR.RX_EN 		= str_IRCR.u8cRXSelect ;
   \   00000126   ....               LDR      R0,??DataTable23_3  ;; 0x40154028
   \   00000128   0068               LDR      R0,[R0, #+0]
   \   0000012A   0821               MOVS     R1,#+8
   \   0000012C   8843               BICS     R0,R0,R1
   \   0000012E   6946               MOV      R1,SP
   \   00000130   0978               LDRB     R1,[R1, #+0]
   \   00000132   C900               LSLS     R1,R1,#+3
   \   00000134   0822               MOVS     R2,#+8
   \   00000136   0A40               ANDS     R2,R2,R1
   \   00000138   0243               ORRS     R2,R2,R0
   \   0000013A   ....               LDR      R0,??DataTable23_3  ;; 0x40154028
   \   0000013C   0260               STR      R2,[R0, #+0]
    953          		UART2->IRCR.TX_EN 		= str_IRCR.u8cTXSelect ;
   \   0000013E   ....               LDR      R0,??DataTable23_3  ;; 0x40154028
   \   00000140   0068               LDR      R0,[R0, #+0]
   \   00000142   1021               MOVS     R1,#+16
   \   00000144   8843               BICS     R0,R0,R1
   \   00000146   6946               MOV      R1,SP
   \   00000148   4978               LDRB     R1,[R1, #+1]
   \   0000014A   0901               LSLS     R1,R1,#+4
   \   0000014C   1022               MOVS     R2,#+16
   \   0000014E   0A40               ANDS     R2,R2,R1
   \   00000150   0243               ORRS     R2,R2,R0
   \   00000152   ....               LDR      R0,??DataTable23_3  ;; 0x40154028
   \   00000154   0260               STR      R2,[R0, #+0]
    954          		UART2->IRCR.TX_INV_EN	= str_IRCR.u8cInvTX ;
   \   00000156   ....               LDR      R0,??DataTable23_3  ;; 0x40154028
   \   00000158   0068               LDR      R0,[R0, #+0]
   \   0000015A   2021               MOVS     R1,#+32
   \   0000015C   8843               BICS     R0,R0,R1
   \   0000015E   6946               MOV      R1,SP
   \   00000160   8978               LDRB     R1,[R1, #+2]
   \   00000162   4901               LSLS     R1,R1,#+5
   \   00000164   2022               MOVS     R2,#+32
   \   00000166   0A40               ANDS     R2,R2,R1
   \   00000168   0243               ORRS     R2,R2,R0
   \   0000016A   ....               LDR      R0,??DataTable23_3  ;; 0x40154028
   \   0000016C   0260               STR      R2,[R0, #+0]
    955          		UART2->IRCR.RX_INV_EN	= str_IRCR.u8cInvRX ;			
   \   0000016E   ....               LDR      R0,??DataTable23_3  ;; 0x40154028
   \   00000170   0068               LDR      R0,[R0, #+0]
   \   00000172   4021               MOVS     R1,#+64
   \   00000174   8843               BICS     R0,R0,R1
   \   00000176   6946               MOV      R1,SP
   \   00000178   C978               LDRB     R1,[R1, #+3]
   \   0000017A   8901               LSLS     R1,R1,#+6
   \   0000017C   4022               MOVS     R2,#+64
   \   0000017E   0A40               ANDS     R2,R2,R1
   \   00000180   0243               ORRS     R2,R2,R0
   \   00000182   ....               LDR      R0,??DataTable23_3  ;; 0x40154028
   \   00000184   0260               STR      R2,[R0, #+0]
    956          	}
    957          }
   \                     ??DrvUART_OpenIRCR_1:
   \   00000186   01BD               POP      {R0,PC}          ;; return
    958          
    959          
    960          /*---------------------------------------------------------------------------------------------------------*/
    961          /* Function:     DrvUART_OpenLIN	                                                                       */
    962          /*                                                                                                         */
    963          /* Parameter:                                                                                              */
    964          /*				 u16Port	   	  	  -[in]   UART Channel:  UART_PORT0 / UART_PORT1  /UART_PORT2          */
    965          /*               DIRECTION            -[in]   MODE_TX or MODE_RX                                           */
    966          /*               BCNT       		  -[in]	  Break Count                                                  */
    967          /* Returns:                                                                                                */
    968          /*               E_SUCCESS                                                                          	   */
    969          /*                                                                                                         */
    970          /* Description:                                                                                            */
    971          /*               The function is used to set LIN relative setting                                          */
    972          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    973          void DrvUART_OpenLIN(UART_PORT u16Port,uint16_t DIRECTION,uint16_t BCNT)
    974          {
   \                     DrvUART_OpenLIN:
   \   00000000   00B5               PUSH     {LR}
    975          
    976          	if(u16Port == UART_PORT0)
   \   00000002   0028               CMP      R0,#+0
   \   00000004   34D1               BNE      ??DrvUART_OpenLIN_0
    977          	{
    978          		UART0->FUNSEL.LIN_EN 	= 1;
   \   00000006   ....               LDR      R0,??DataTable21  ;; 0x40050030
   \   00000008   0068               LDR      R0,[R0, #+0]
   \   0000000A   0323               MOVS     R3,#+3
   \   0000000C   9843               BICS     R0,R0,R3
   \   0000000E   0123               MOVS     R3,#+1
   \   00000010   0343               ORRS     R3,R3,R0
   \   00000012   ....               LDR      R0,??DataTable21  ;; 0x40050030
   \   00000014   0360               STR      R3,[R0, #+0]
    979          		UART0->FUNSEL.IrDA_EN 	= 0;	
   \   00000016   ....               LDR      R0,??DataTable21  ;; 0x40050030
   \   00000018   0068               LDR      R0,[R0, #+0]
   \   0000001A   0C23               MOVS     R3,#+12
   \   0000001C   9843               BICS     R0,R0,R3
   \   0000001E   ....               LDR      R3,??DataTable21  ;; 0x40050030
   \   00000020   1860               STR      R0,[R3, #+0]
    980          		if(DIRECTION ==MODE_TX )
   \   00000022   89B2               UXTH     R1,R1
   \   00000024   0029               CMP      R1,#+0
   \   00000026   0CD1               BNE      ??DrvUART_OpenLIN_1
    981          		{
    982          			UART0->LINCON.LINTX_EN	= 1;
   \   00000028   ....               LDR      R0,??DataTable23_4  ;; 0x4005002c
   \   0000002A   0068               LDR      R0,[R0, #+0]
   \   0000002C   8021               MOVS     R1,#+128
   \   0000002E   0143               ORRS     R1,R1,R0
   \   00000030   ....               LDR      R0,??DataTable23_4  ;; 0x4005002c
   \   00000032   0160               STR      R1,[R0, #+0]
    983          			UART0->LINCON.LINRX_EN	= 0;
   \   00000034   ....               LDR      R0,??DataTable23_4  ;; 0x4005002c
   \   00000036   0068               LDR      R0,[R0, #+0]
   \   00000038   4021               MOVS     R1,#+64
   \   0000003A   8843               BICS     R0,R0,R1
   \   0000003C   ....               LDR      R1,??DataTable23_4  ;; 0x4005002c
   \   0000003E   0860               STR      R0,[R1, #+0]
   \   00000040   0BE0               B        ??DrvUART_OpenLIN_2
    984          		}else
    985          		{
    986          			UART0->LINCON.LINTX_EN	= 0;
   \                     ??DrvUART_OpenLIN_1:
   \   00000042   ....               LDR      R0,??DataTable23_4  ;; 0x4005002c
   \   00000044   0068               LDR      R0,[R0, #+0]
   \   00000046   8021               MOVS     R1,#+128
   \   00000048   8843               BICS     R0,R0,R1
   \   0000004A   ....               LDR      R1,??DataTable23_4  ;; 0x4005002c
   \   0000004C   0860               STR      R0,[R1, #+0]
    987          			UART0->LINCON.LINRX_EN	= 1;		
   \   0000004E   ....               LDR      R0,??DataTable23_4  ;; 0x4005002c
   \   00000050   0068               LDR      R0,[R0, #+0]
   \   00000052   4021               MOVS     R1,#+64
   \   00000054   0143               ORRS     R1,R1,R0
   \   00000056   ....               LDR      R0,??DataTable23_4  ;; 0x4005002c
   \   00000058   0160               STR      R1,[R0, #+0]
    988          		}
    989          	    UART0->LINCON.LINBCNT = BCNT;
   \                     ??DrvUART_OpenLIN_2:
   \   0000005A   ....               LDR      R0,??DataTable23_4  ;; 0x4005002c
   \   0000005C   0068               LDR      R0,[R0, #+0]
   \   0000005E   0F21               MOVS     R1,#+15
   \   00000060   8843               BICS     R0,R0,R1
   \   00000062   92B2               UXTH     R2,R2
   \   00000064   1107               LSLS     R1,R2,#+28       ;; ZeroExtS R1,R2,#+28,#+28
   \   00000066   090F               LSRS     R1,R1,#+28
   \   00000068   0143               ORRS     R1,R1,R0
   \   0000006A   ....               LDR      R0,??DataTable23_4  ;; 0x4005002c
   \   0000006C   0160               STR      R1,[R0, #+0]
   \   0000006E   66E0               B        ??DrvUART_OpenLIN_3
    990          	}
    991          	else if(u16Port == UART_PORT1)
   \                     ??DrvUART_OpenLIN_0:
   \   00000070   8023               MOVS     R3,#+128
   \   00000072   5B03               LSLS     R3,R3,#+13       ;; #+1048576
   \   00000074   9842               CMP      R0,R3
   \   00000076   34D1               BNE      ??DrvUART_OpenLIN_4
    992          	{
    993          	   	UART1->FUNSEL.LIN_EN 	= 1;
   \   00000078   ....               LDR      R0,??DataTable23  ;; 0x40150030
   \   0000007A   0068               LDR      R0,[R0, #+0]
   \   0000007C   0323               MOVS     R3,#+3
   \   0000007E   9843               BICS     R0,R0,R3
   \   00000080   0123               MOVS     R3,#+1
   \   00000082   0343               ORRS     R3,R3,R0
   \   00000084   ....               LDR      R0,??DataTable23  ;; 0x40150030
   \   00000086   0360               STR      R3,[R0, #+0]
    994          		UART1->FUNSEL.IrDA_EN 	= 0;
   \   00000088   ....               LDR      R0,??DataTable23  ;; 0x40150030
   \   0000008A   0068               LDR      R0,[R0, #+0]
   \   0000008C   0C23               MOVS     R3,#+12
   \   0000008E   9843               BICS     R0,R0,R3
   \   00000090   ....               LDR      R3,??DataTable23  ;; 0x40150030
   \   00000092   1860               STR      R0,[R3, #+0]
    995          		if(DIRECTION == MODE_TX )
   \   00000094   89B2               UXTH     R1,R1
   \   00000096   0029               CMP      R1,#+0
   \   00000098   0CD1               BNE      ??DrvUART_OpenLIN_5
    996          		{
    997          			UART1->LINCON.LINTX_EN	= 1;
   \   0000009A   ....               LDR      R0,??DataTable23_5  ;; 0x4015002c
   \   0000009C   0068               LDR      R0,[R0, #+0]
   \   0000009E   8021               MOVS     R1,#+128
   \   000000A0   0143               ORRS     R1,R1,R0
   \   000000A2   ....               LDR      R0,??DataTable23_5  ;; 0x4015002c
   \   000000A4   0160               STR      R1,[R0, #+0]
    998          			UART1->LINCON.LINRX_EN	= 0;
   \   000000A6   ....               LDR      R0,??DataTable23_5  ;; 0x4015002c
   \   000000A8   0068               LDR      R0,[R0, #+0]
   \   000000AA   4021               MOVS     R1,#+64
   \   000000AC   8843               BICS     R0,R0,R1
   \   000000AE   ....               LDR      R1,??DataTable23_5  ;; 0x4015002c
   \   000000B0   0860               STR      R0,[R1, #+0]
   \   000000B2   0BE0               B        ??DrvUART_OpenLIN_6
    999          		}
   1000          		else
   1001          		{
   1002          			UART1->LINCON.LINTX_EN	= 0;
   \                     ??DrvUART_OpenLIN_5:
   \   000000B4   ....               LDR      R0,??DataTable23_5  ;; 0x4015002c
   \   000000B6   0068               LDR      R0,[R0, #+0]
   \   000000B8   8021               MOVS     R1,#+128
   \   000000BA   8843               BICS     R0,R0,R1
   \   000000BC   ....               LDR      R1,??DataTable23_5  ;; 0x4015002c
   \   000000BE   0860               STR      R0,[R1, #+0]
   1003          			UART1->LINCON.LINRX_EN	= 1;		
   \   000000C0   ....               LDR      R0,??DataTable23_5  ;; 0x4015002c
   \   000000C2   0068               LDR      R0,[R0, #+0]
   \   000000C4   4021               MOVS     R1,#+64
   \   000000C6   0143               ORRS     R1,R1,R0
   \   000000C8   ....               LDR      R0,??DataTable23_5  ;; 0x4015002c
   \   000000CA   0160               STR      R1,[R0, #+0]
   1004          		}
   1005          
   1006          		UART1->LINCON.LINBCNT = BCNT;
   \                     ??DrvUART_OpenLIN_6:
   \   000000CC   ....               LDR      R0,??DataTable23_5  ;; 0x4015002c
   \   000000CE   0068               LDR      R0,[R0, #+0]
   \   000000D0   0F21               MOVS     R1,#+15
   \   000000D2   8843               BICS     R0,R0,R1
   \   000000D4   92B2               UXTH     R2,R2
   \   000000D6   1107               LSLS     R1,R2,#+28       ;; ZeroExtS R1,R2,#+28,#+28
   \   000000D8   090F               LSRS     R1,R1,#+28
   \   000000DA   0143               ORRS     R1,R1,R0
   \   000000DC   ....               LDR      R0,??DataTable23_5  ;; 0x4015002c
   \   000000DE   0160               STR      R1,[R0, #+0]
   \   000000E0   2DE0               B        ??DrvUART_OpenLIN_3
   1007          	}
   1008          	else if(u16Port == UART_PORT2)
   \                     ??DrvUART_OpenLIN_4:
   \   000000E2   A022               MOVS     R2,#+160
   \   000000E4   5203               LSLS     R2,R2,#+13       ;; #+1310720
   \   000000E6   9042               CMP      R0,R2
   \   000000E8   29D1               BNE      ??DrvUART_OpenLIN_3
   1009          	{
   1010          	   	UART2->FUNSEL.LIN_EN 	= 1;
   \   000000EA   ....               LDR      R0,??DataTable23_2  ;; 0x40154030
   \   000000EC   0068               LDR      R0,[R0, #+0]
   \   000000EE   0322               MOVS     R2,#+3
   \   000000F0   9043               BICS     R0,R0,R2
   \   000000F2   0122               MOVS     R2,#+1
   \   000000F4   0243               ORRS     R2,R2,R0
   \   000000F6   ....               LDR      R0,??DataTable23_2  ;; 0x40154030
   \   000000F8   0260               STR      R2,[R0, #+0]
   1011          		UART2->FUNSEL.IrDA_EN 	= 0;
   \   000000FA   ....               LDR      R0,??DataTable23_2  ;; 0x40154030
   \   000000FC   0068               LDR      R0,[R0, #+0]
   \   000000FE   0C22               MOVS     R2,#+12
   \   00000100   9043               BICS     R0,R0,R2
   \   00000102   ....               LDR      R2,??DataTable23_2  ;; 0x40154030
   \   00000104   1060               STR      R0,[R2, #+0]
   1012          		if(DIRECTION == MODE_TX )
   \   00000106   89B2               UXTH     R1,R1
   \   00000108   0029               CMP      R1,#+0
   \   0000010A   0CD1               BNE      ??DrvUART_OpenLIN_7
   1013          		{
   1014          			UART2->LINCON.LINTX_EN	= 1;
   \   0000010C   ....               LDR      R0,??DataTable23_6  ;; 0x4015402c
   \   0000010E   0068               LDR      R0,[R0, #+0]
   \   00000110   8021               MOVS     R1,#+128
   \   00000112   0143               ORRS     R1,R1,R0
   \   00000114   ....               LDR      R0,??DataTable23_6  ;; 0x4015402c
   \   00000116   0160               STR      R1,[R0, #+0]
   1015          			UART2->LINCON.LINRX_EN	= 0;
   \   00000118   ....               LDR      R0,??DataTable23_6  ;; 0x4015402c
   \   0000011A   0068               LDR      R0,[R0, #+0]
   \   0000011C   4021               MOVS     R1,#+64
   \   0000011E   8843               BICS     R0,R0,R1
   \   00000120   ....               LDR      R1,??DataTable23_6  ;; 0x4015402c
   \   00000122   0860               STR      R0,[R1, #+0]
   \   00000124   0BE0               B        ??DrvUART_OpenLIN_3
   1016          		}
   1017          		else
   1018          		{
   1019          			UART2->LINCON.LINTX_EN	= 0;
   \                     ??DrvUART_OpenLIN_7:
   \   00000126   ....               LDR      R0,??DataTable23_6  ;; 0x4015402c
   \   00000128   0068               LDR      R0,[R0, #+0]
   \   0000012A   8021               MOVS     R1,#+128
   \   0000012C   8843               BICS     R0,R0,R1
   \   0000012E   ....               LDR      R1,??DataTable23_6  ;; 0x4015402c
   \   00000130   0860               STR      R0,[R1, #+0]
   1020          			UART2->LINCON.LINRX_EN	= 1;		
   \   00000132   ....               LDR      R0,??DataTable23_6  ;; 0x4015402c
   \   00000134   0068               LDR      R0,[R0, #+0]
   \   00000136   4021               MOVS     R1,#+64
   \   00000138   0143               ORRS     R1,R1,R0
   \   0000013A   ....               LDR      R0,??DataTable23_6  ;; 0x4015402c
   \   0000013C   0160               STR      R1,[R0, #+0]
   1021          		}
   1022          	}
   1023          
   1024          
   1025          
   1026          }
   \                     ??DrvUART_OpenLIN_3:
   \   0000013E   00BD               POP      {PC}             ;; return
   1027          
   1028          /*---------------------------------------------------------------------------------------------------------*/
   1029          /* Function: DrvUART_kbhit                                                                                 */
   1030          /*                                                                                                         */
   1031          /* Parameters:                                                                                             */
   1032          /*               None                                                                                      */
   1033          /*                                                                                                         */
   1034          /* Returns:      None                                                                                      */
   1035          /* Description:                                                                                            */
   1036          /*               This function returns TRUE  when UART get any character.Default use UART0                 */
   1037          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
   1038          int32_t DrvUART_kbhit(void)
   1039          {
   \                     DrvUART_kbhit:
   \   00000000   00B5               PUSH     {LR}
   1040              
   1041              if(UART0->ISR.RDA_IF ==1)
   \   00000002   ....               LDR      R0,??DataTable23_7  ;; 0x4005001c
   \   00000004   0068               LDR      R0,[R0, #+0]
   \   00000006   0100               MOVS     R1,R0
   \   00000008   C907               LSLS     R1,R1,#+31       ;; ZeroExtS R1,R1,#+31,#+31
   \   0000000A   C90F               LSRS     R1,R1,#+31
   \   0000000C   0129               CMP      R1,#+1
   \   0000000E   01D1               BNE      ??DrvUART_kbhit_0
   1042              {
   1043                  return TRUE;
   \   00000010   0120               MOVS     R0,#+1
   \   00000012   00E0               B        ??DrvUART_kbhit_1
   1044              }
   1045          
   1046              return FALSE;
   \                     ??DrvUART_kbhit_0:
   \   00000014   0020               MOVS     R0,#+0
   \                     ??DrvUART_kbhit_1:
   \   00000016   00BD               POP      {PC}             ;; return
   1047          }
   1048          
   1049          
   1050          /*---------------------------------------------------------------------------------------------------------*/
   1051          /* Function:     DrvUART_SetPDMA   	                                                                       */
   1052          /*                                                                                                         */
   1053          /* Parameter:                                                                                              */
   1054          /*				 u16Port	   	  	  -[in]   UART Channel:  UART_PORT0 / UART_PORT0                       */
   1055          /*               IsEnable      		  -[in]	  Enable TX/RX PDMA TRUE or FASLE                              */
   1056          /* Returns:                                                                                                */
   1057          /*               E_SUCCESS                                                                          	   */
   1058          /*                                                                                                         */
   1059          /* Description:                                                                                            */
   1060          /*               The function is to Enable/Disable PDMA Channel                                            */
   1061          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
   1062          void DrvUART_SetPDMA(UART_PORT u16Port,uint16_t IsEnable)
   1063          {
   \                     DrvUART_SetPDMA:
   \   00000000   00B5               PUSH     {LR}
   1064          	
   1065          	if(u16Port == UART_PORT0)
   \   00000002   0028               CMP      R0,#+0
   \   00000004   22D1               BNE      ??DrvUART_SetPDMA_0
   1066          	{
   1067          		UART0->IER.DMA_TX_EN 	= IsEnable ?1:0;
   \   00000006   89B2               UXTH     R1,R1
   \   00000008   0029               CMP      R1,#+0
   \   0000000A   01D0               BEQ      ??DrvUART_SetPDMA_1
   \   0000000C   0120               MOVS     R0,#+1
   \   0000000E   00E0               B        ??DrvUART_SetPDMA_2
   \                     ??DrvUART_SetPDMA_1:
   \   00000010   0020               MOVS     R0,#+0
   \                     ??DrvUART_SetPDMA_2:
   \   00000012   ....               LDR      R2,??DataTable23_8  ;; 0x40050004
   \   00000014   1268               LDR      R2,[R2, #+0]
   \   00000016   ....               LDR      R3,??DataTable23_9  ;; 0xffffbfff
   \   00000018   1340               ANDS     R3,R3,R2
   \   0000001A   8003               LSLS     R0,R0,#+14
   \   0000001C   8022               MOVS     R2,#+128
   \   0000001E   D201               LSLS     R2,R2,#+7        ;; #+16384
   \   00000020   0240               ANDS     R2,R2,R0
   \   00000022   1A43               ORRS     R2,R2,R3
   \   00000024   ....               LDR      R0,??DataTable23_8  ;; 0x40050004
   \   00000026   0260               STR      R2,[R0, #+0]
   1068          		UART0->IER.DMA_RX_EN	= IsEnable ?1:0;	
   \   00000028   89B2               UXTH     R1,R1
   \   0000002A   0029               CMP      R1,#+0
   \   0000002C   01D0               BEQ      ??DrvUART_SetPDMA_3
   \   0000002E   0120               MOVS     R0,#+1
   \   00000030   00E0               B        ??DrvUART_SetPDMA_4
   \                     ??DrvUART_SetPDMA_3:
   \   00000032   0020               MOVS     R0,#+0
   \                     ??DrvUART_SetPDMA_4:
   \   00000034   ....               LDR      R1,??DataTable23_8  ;; 0x40050004
   \   00000036   0968               LDR      R1,[R1, #+0]
   \   00000038   ....               LDR      R2,??DataTable23_10  ;; 0xffff7fff
   \   0000003A   0A40               ANDS     R2,R2,R1
   \   0000003C   C003               LSLS     R0,R0,#+15
   \   0000003E   8021               MOVS     R1,#+128
   \   00000040   0902               LSLS     R1,R1,#+8        ;; #+32768
   \   00000042   0140               ANDS     R1,R1,R0
   \   00000044   1143               ORRS     R1,R1,R2
   \   00000046   ....               LDR      R0,??DataTable23_8  ;; 0x40050004
   \   00000048   0160               STR      R1,[R0, #+0]
   1069          	}
   1070          	else if(u16Port == UART_PORT1)
   1071          	{
   1072          		UART1->IER.DMA_TX_EN 	= IsEnable ?1:0;
   1073          		UART1->IER.DMA_RX_EN	= IsEnable ?1:0;
   1074          	}
   1075          	else
   1076          		return;					/* UART2 can not support PDMA mode */
   1077          }
   \                     ??DrvUART_SetPDMA_5:
   \                     ??DrvUART_SetPDMA_6:
   \   0000004A   00BD               POP      {PC}             ;; return
   \                     ??DrvUART_SetPDMA_0:
   \   0000004C   8022               MOVS     R2,#+128
   \   0000004E   5203               LSLS     R2,R2,#+13       ;; #+1048576
   \   00000050   9042               CMP      R0,R2
   \   00000052   22D1               BNE      ??DrvUART_SetPDMA_7
   \   00000054   89B2               UXTH     R1,R1
   \   00000056   0029               CMP      R1,#+0
   \   00000058   01D0               BEQ      ??DrvUART_SetPDMA_8
   \   0000005A   0120               MOVS     R0,#+1
   \   0000005C   00E0               B        ??DrvUART_SetPDMA_9
   \                     ??DrvUART_SetPDMA_8:
   \   0000005E   0020               MOVS     R0,#+0
   \                     ??DrvUART_SetPDMA_9:
   \   00000060   ....               LDR      R2,??DataTable23_11  ;; 0x40150004
   \   00000062   1268               LDR      R2,[R2, #+0]
   \   00000064   ....               LDR      R3,??DataTable23_9  ;; 0xffffbfff
   \   00000066   1340               ANDS     R3,R3,R2
   \   00000068   8003               LSLS     R0,R0,#+14
   \   0000006A   8022               MOVS     R2,#+128
   \   0000006C   D201               LSLS     R2,R2,#+7        ;; #+16384
   \   0000006E   0240               ANDS     R2,R2,R0
   \   00000070   1A43               ORRS     R2,R2,R3
   \   00000072   ....               LDR      R0,??DataTable23_11  ;; 0x40150004
   \   00000074   0260               STR      R2,[R0, #+0]
   \   00000076   89B2               UXTH     R1,R1
   \   00000078   0029               CMP      R1,#+0
   \   0000007A   01D0               BEQ      ??DrvUART_SetPDMA_10
   \   0000007C   0120               MOVS     R0,#+1
   \   0000007E   00E0               B        ??DrvUART_SetPDMA_11
   \                     ??DrvUART_SetPDMA_10:
   \   00000080   0020               MOVS     R0,#+0
   \                     ??DrvUART_SetPDMA_11:
   \   00000082   ....               LDR      R1,??DataTable23_11  ;; 0x40150004
   \   00000084   0968               LDR      R1,[R1, #+0]
   \   00000086   ....               LDR      R2,??DataTable23_10  ;; 0xffff7fff
   \   00000088   0A40               ANDS     R2,R2,R1
   \   0000008A   C003               LSLS     R0,R0,#+15
   \   0000008C   8021               MOVS     R1,#+128
   \   0000008E   0902               LSLS     R1,R1,#+8        ;; #+32768
   \   00000090   0140               ANDS     R1,R1,R0
   \   00000092   1143               ORRS     R1,R1,R2
   \   00000094   ....               LDR      R0,??DataTable23_11  ;; 0x40150004
   \   00000096   0160               STR      R1,[R0, #+0]
   \   00000098   D7E7               B        ??DrvUART_SetPDMA_5
   \                     ??DrvUART_SetPDMA_7:
   \   0000009A   D6E7               B        ??DrvUART_SetPDMA_6
   1078           
   1079          /*---------------------------------------------------------------------------------------------------------*/
   1080          /* Function:     DrvUART_GetVersion                                                                        */
   1081          /*                                                                                                         */
   1082          /* Parameter:        																					   */	
   1083          /*	             None                                                                                 	   */
   1084          /* Returns:                                                                                                */
   1085          /*               Version Number                                                                            */
   1086          /* Side effects:                                                                                           */
   1087          /*                                                                                                         */
   1088          /* Description:                                                                                            */
   1089          /*               The function is used to get  DrvUART Version Number                                       */
   1090          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
   1091          int32_t	DrvUART_GetVersion(void)
   1092          {
   1093          	return DRVUART_VERSION_NUM;
   \                     DrvUART_GetVersion:
   \   00000000   ....               LDR      R0,??DataTable23_12  ;; 0x10001
   \   00000002   7047               BX       LR               ;; return
   1094          	
   1095          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   00E100E0           DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   80E100E0           DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   1C000540           DC32     0x4005001c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   1C401540           DC32     0x4015401c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   ........           DC32     g_pfnUART0callback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   ........           DC32     g_pfnUART2callback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   1C001540           DC32     0x4015001c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \   00000000   ........           DC32     g_pfnUART1callback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_8:
   \   00000000   FFFFFFDF           DC32     0xdfffffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_9:
   \   00000000   FFFFFFEF           DC32     0xefffffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_10:
   \   00000000   18020050           DC32     0x50000218

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_11:
   \   00000000   80B14F01           DC32     0x14fb180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_12:
   \   00000000   10000540           DC32     0x40050010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_13:
   \   00000000   10001540           DC32     0x40150010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   FFFFFBFF           DC32     0xfffbffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   08000540           DC32     0x40050008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   08001540           DC32     0x40150008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   08401540           DC32     0x40154008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0C000540           DC32     0x4005000c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   20000540           DC32     0x40050020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   24000540           DC32     0x40050024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \   00000000   0C001540           DC32     0x4015000c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \   00000000   20001540           DC32     0x40150020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \   00000000   24001540           DC32     0x40150024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_6:
   \   00000000   0C401540           DC32     0x4015400c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_7:
   \   00000000   20401540           DC32     0x40154020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_8:
   \   00000000   24401540           DC32     0x40154024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_9:
   \   00000000   18001540           DC32     0x40150018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_10:
   \   00000000   08020050           DC32     0x50000208

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_11:
   \   00000000   FFFFFDFF           DC32     0xfffdffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_12:
   \   00000000   ........           DC32     g_pfnUART1callback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_13:
   \   00000000   18401540           DC32     0x40154018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_14:
   \   00000000   FFFFFBFF           DC32     0xfffbffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_15:
   \   00000000   ........           DC32     g_pfnUART2callback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_16:
   \   00000000   18000540           DC32     0x40050018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_17:
   \   00000000   FFFFFEFF           DC32     0xfffeffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_18:
   \   00000000   ........           DC32     g_pfnUART0callback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   FFF7FFFF           DC32     0xfffff7ff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   FFFEFFFF           DC32     0xfffffeff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \   00000000   04001540           DC32     0x40150004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   04401540           DC32     0x40154004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   ........           DC32     g_pfnUART0callback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_1:
   \   00000000   ........           DC32     g_pfnUART1callback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   ........           DC32     g_pfnUART2callback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_1:
   \   00000000   04000540           DC32     0x40050004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_2:
   \   00000000   04001540           DC32     0x40150004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   00000540           DC32     0x40050000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_1:
   \   00000000   18000540           DC32     0x40050018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_2:
   \   00000000   14000540           DC32     0x40050014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   1C000540           DC32     0x4005001c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_1:
   \   00000000   08000540           DC32     0x40050008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_2:
   \   00000000   08001540           DC32     0x40150008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_3:
   \   00000000   08401540           DC32     0x40154008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_4:
   \   00000000   14001540           DC32     0x40150014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_5:
   \   00000000   20000540           DC32     0x40050020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_6:
   \   00000000   20001540           DC32     0x40150020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_7:
   \   00000000   20401540           DC32     0x40154020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_8:
   \   00000000   00000540           DC32     0x40050000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   04401540           DC32     0x40154004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_1:
   \   00000000   0198FFFF           DC32     0xffff9801

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_2:
   \   00000000   00001540           DC32     0x40150000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_3:
   \   00000000   18001540           DC32     0x40150018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_4:
   \   00000000   00401540           DC32     0x40154000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_5:
   \   00000000   18401540           DC32     0x40154018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19_6:
   \   00000000   18000540           DC32     0x40050018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   30000540           DC32     0x40050030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_1:
   \   00000000   28000540           DC32     0x40050028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23:
   \   00000000   30001540           DC32     0x40150030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_1:
   \   00000000   28001540           DC32     0x40150028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_2:
   \   00000000   30401540           DC32     0x40154030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_3:
   \   00000000   28401540           DC32     0x40154028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_4:
   \   00000000   2C000540           DC32     0x4005002c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_5:
   \   00000000   2C001540           DC32     0x4015002c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_6:
   \   00000000   2C401540           DC32     0x4015402c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_7:
   \   00000000   1C000540           DC32     0x4005001c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_8:
   \   00000000   04000540           DC32     0x40050004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_9:
   \   00000000   FFBFFFFF           DC32     0xffffbfff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_10:
   \   00000000   FF7FFFFF           DC32     0xffff7fff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_11:
   \   00000000   04001540           DC32     0x40150004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_12:
   \   00000000   01000100           DC32     0x10001
   1096          
   1097          
   1098          
   1099          
   1100          
   1101          

   Maximum stack usage in bytes:

     Function                    .cstack
     --------                    -------
     BaudRateCalculator              24
     DrvUART_ClearInt                 8
     DrvUART_Close                    8
     DrvUART_DisableInt               8
     DrvUART_EnableInt               16
     DrvUART_GetCTS                   4
     DrvUART_GetIntStatus             4
     DrvUART_GetVersion               0
     DrvUART_IsIntEnabled             4
     DrvUART_Open                     8
     DrvUART_OpenIRCR                 8
     DrvUART_OpenLIN                  4
     DrvUART_Read                    12
     DrvUART_SetFIFOTriggerLevel      4
     DrvUART_SetPDMA                  4
     DrvUART_SetRTS                   4
     DrvUART_SetRxTimeOut             4
     DrvUART_Write                   12
     DrvUART_kbhit                    4
     GetUartCLk                       8
     NVIC_DisableIRQ                  0
     NVIC_EnableIRQ                   0
     UART02_IRQHandler                8
     UART1_IRQHandler                 8


   Section sizes:

     Function/Label              Bytes
     --------------              -----
     NVIC_EnableIRQ                24
     NVIC_DisableIRQ               24
     g_pfnUART0callback             4
     g_pfnUART1callback             4
     g_pfnUART2callback             4
     UART02_IRQHandler             42
     UART1_IRQHandler              22
     BaudRateCalculator           188
     GetUartCLk                    90
     DrvUART_SetRTS                64
     DrvUART_Open                1072
     DrvUART_Close                144
     DrvUART_EnableInt           1012
     DrvUART_IsIntEnabled          80
     DrvUART_DisableInt           124
     DrvUART_ClearInt              78
     DrvUART_GetIntStatus         134
     DrvUART_SetFIFOTriggerLevel   86
     DrvUART_GetCTS                72
     DrvUART_SetRxTimeOut          80
     DrvUART_Read                 168
     DrvUART_Write                168
     DrvUART_OpenIRCR             392
     DrvUART_OpenLIN              320
     DrvUART_kbhit                 24
     DrvUART_SetPDMA              156
     DrvUART_GetVersion             4
     ??DataTable6                   4
     ??DataTable6_1                 4
     ??DataTable6_2                 4
     ??DataTable6_3                 4
     ??DataTable6_4                 4
     ??DataTable6_5                 4
     ??DataTable6_6                 4
     ??DataTable6_7                 4
     ??DataTable6_8                 4
     ??DataTable6_9                 4
     ??DataTable6_10                4
     ??DataTable6_11                4
     ??DataTable6_12                4
     ??DataTable6_13                4
     ??DataTable7                   4
     ??DataTable7_1                 4
     ??DataTable7_2                 4
     ??DataTable7_3                 4
     ??DataTable8                   4
     ??DataTable8_1                 4
     ??DataTable8_2                 4
     ??DataTable8_3                 4
     ??DataTable8_4                 4
     ??DataTable8_5                 4
     ??DataTable8_6                 4
     ??DataTable8_7                 4
     ??DataTable8_8                 4
     ??DataTable8_9                 4
     ??DataTable8_10                4
     ??DataTable8_11                4
     ??DataTable8_12                4
     ??DataTable8_13                4
     ??DataTable8_14                4
     ??DataTable8_15                4
     ??DataTable8_16                4
     ??DataTable8_17                4
     ??DataTable8_18                4
     ??DataTable9                   4
     ??DataTable10                  4
     ??DataTable10_1                4
     ??DataTable12                  4
     ??DataTable15                  4
     ??DataTable15_1                4
     ??DataTable16                  4
     ??DataTable16_1                4
     ??DataTable16_2                4
     ??DataTable17                  4
     ??DataTable17_1                4
     ??DataTable17_2                4
     ??DataTable18                  4
     ??DataTable18_1                4
     ??DataTable18_2                4
     ??DataTable18_3                4
     ??DataTable18_4                4
     ??DataTable18_5                4
     ??DataTable18_6                4
     ??DataTable18_7                4
     ??DataTable18_8                4
     ??DataTable19                  4
     ??DataTable19_1                4
     ??DataTable19_2                4
     ??DataTable19_3                4
     ??DataTable19_4                4
     ??DataTable19_5                4
     ??DataTable19_6                4
     ??DataTable21                  4
     ??DataTable21_1                4
     ??DataTable23                  4
     ??DataTable23_1                4
     ??DataTable23_2                4
     ??DataTable23_3                4
     ??DataTable23_4                4
     ??DataTable23_5                4
     ??DataTable23_6                4
     ??DataTable23_7                4
     ??DataTable23_8                4
     ??DataTable23_9                4
     ??DataTable23_10               4
     ??DataTable23_11               4
     ??DataTable23_12               4

 
    12 bytes in section .bss
 4 888 bytes in section .text
 
 4 888 bytes of CODE memory
    12 bytes of DATA memory

Errors: none
Warnings: none
