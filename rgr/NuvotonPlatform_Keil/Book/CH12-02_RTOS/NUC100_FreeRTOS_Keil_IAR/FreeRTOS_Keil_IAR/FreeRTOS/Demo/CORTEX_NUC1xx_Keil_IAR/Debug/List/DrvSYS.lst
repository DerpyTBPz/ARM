###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V5.41.2.51793/W32 for ARM     28/Jun/2010  13:54:11 #
# Copyright (C) 1999-2010 IAR Systems AB.                                     #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  \\10.130.11.37\FreeRTOS\FreeRTOS\Demo\CORTEX_NUC1xx_Keil #
#                    _IAR\NUC1xxBSP\NuvotonPlatform_Keil\Src\Driver\DrvSYS.c  #
#    Command line =  \\10.130.11.37\FreeRTOS\FreeRTOS\Demo\CORTEX_NUC1xx_Keil #
#                    _IAR\NUC1xxBSP\NuvotonPlatform_Keil\Src\Driver\DrvSYS.c  #
#                    -D IAR_ARM_CM0 -lCN \\10.130.11.37\FreeRTOS\FreeRTOS\Dem #
#                    o\CORTEX_NUC1xx_Keil_IAR\Debug\List\ --diag_suppress     #
#                    Pe550,Pa082,Pa039 -o \\10.130.11.37\FreeRTOS\FreeRTOS\De #
#                    mo\CORTEX_NUC1xx_Keil_IAR\Debug\Obj\ --no_cse            #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M0 -e --fpu=None --dlib_config "D:\Program  #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    5.4\arm\INC\DLib_Config_Full.h" -I                       #
#                    \\10.130.11.37\FreeRTOS\FreeRTOS\Demo\CORTEX_NUC1xx_Keil #
#                    _IAR\..\common\include\ -I \\10.130.11.37\FreeRTOS\FreeR #
#                    TOS\Demo\CORTEX_NUC1xx_Keil_IAR\..\..\source\include\    #
#                    -I \\10.130.11.37\FreeRTOS\FreeRTOS\Demo\CORTEX_NUC1xx_K #
#                    eil_IAR\ -I \\10.130.11.37\FreeRTOS\FreeRTOS\Demo\CORTEX #
#                    _NUC1xx_Keil_IAR\NUC1xxBSP\NuvotonPlatform_Keil\Include\ #
#                     -I \\10.130.11.37\FreeRTOS\FreeRTOS\Demo\CORTEX_NUC1xx_ #
#                    Keil_IAR\NUC1xxBSP\NuvotonPlatform_Keil\Include\Driver\  #
#                    -I \\10.130.11.37\FreeRTOS\FreeRTOS\Demo\CORTEX_NUC1xx_K #
#                    eil_IAR\NUC1xxBSP\CMSIS\CM0\ -I                          #
#                    \\10.130.11.37\FreeRTOS\FreeRTOS\Demo\CORTEX_NUC1xx_Keil #
#                    _IAR\User_Demo\include\ -I "D:\Program Files\IAR         #
#                    Systems\Embedded Workbench 5.4\arm\INC\" -Ol             #
#    List file    =  \\10.130.11.37\FreeRTOS\FreeRTOS\Demo\CORTEX_NUC1xx_Keil #
#                    _IAR\Debug\List\DrvSYS.lst                               #
#    Object file  =  \\10.130.11.37\FreeRTOS\FreeRTOS\Demo\CORTEX_NUC1xx_Keil #
#                    _IAR\Debug\Obj\DrvSYS.o                                  #
#                                                                             #
#                                                                             #
###############################################################################

\\10.130.11.37\FreeRTOS\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IAR\NUC1xxBSP\NuvotonPlatform_Keil\Src\Driver\DrvSYS.c
      1          /*---------------------------------------------------------------------------------------------------------*/
      2          /*                                                                                                         */
      3          /* Copyright(c) 2009 Nuvoton Technology Corp. All rights reserved.                                         */
      4          /*                                                                                                         */
      5          /*---------------------------------------------------------------------------------------------------------*/
      6          #include <stdio.h>
      7          #include "NUC1xx.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __??Code16?? __code __interwork void NVIC_EnableIRQ(IRQn_Type)
   \                     NVIC_EnableIRQ:
   \   00000000   40B2               SXTB     R0,R0
   \   00000002   0100               MOVS     R1,R0
   \   00000004   4909               LSRS     R1,R1,#+5
   \   00000006   0422               MOVS     R2,#+4
   \   00000008   5143               MULS     R1,R2,R1
   \   0000000A   ....               LDR      R2,??DataTable21  ;; 0xe000e100
   \   0000000C   0123               MOVS     R3,#+1
   \   0000000E   C006               LSLS     R0,R0,#+27       ;; ZeroExtS R0,R0,#+27,#+27
   \   00000010   C00E               LSRS     R0,R0,#+27
   \   00000012   8340               LSLS     R3,R3,R0
   \   00000014   5350               STR      R3,[R2, R1]
   \   00000016   7047               BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __??Code16?? __code __interwork void NVIC_DisableIRQ(IRQn_Type)
   \                     NVIC_DisableIRQ:
   \   00000000   40B2               SXTB     R0,R0
   \   00000002   0100               MOVS     R1,R0
   \   00000004   4909               LSRS     R1,R1,#+5
   \   00000006   0422               MOVS     R2,#+4
   \   00000008   5143               MULS     R1,R2,R1
   \   0000000A   ....               LDR      R2,??DataTable21_1  ;; 0xe000e180
   \   0000000C   0123               MOVS     R3,#+1
   \   0000000E   C006               LSLS     R0,R0,#+27       ;; ZeroExtS R0,R0,#+27,#+27
   \   00000010   C00E               LSRS     R0,R0,#+27
   \   00000012   8340               LSLS     R3,R3,R0
   \   00000014   5350               STR      R3,[R2, R1]
   \   00000016   7047               BX       LR               ;; return
      8          #include "DrvSYS.h"
      9          
     10          /*---------------------------------------------------------------------------------------------------------*/
     11          /* Global file scope (static) variables                                                                    */
     12          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .data, align 4
     13          static uint32_t s_u32ExtClockKHz = 12000;
   \                     s_u32ExtClockKHz:
   \   00000000   E02E0000           DC32 12000
     14          

   \                                 In section .bss, align 4
     15          static BOD_CALLBACK BOD_callbackFn;
   \                     BOD_callbackFn:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     16          static PWRWU_CALLBACK PWRWU_callbackFn;
   \                     PWRWU_callbackFn:
   \   00000000                      DS8 4
     17          
     18          /*---------------------------------------------------------------------------------------------------------*/
     19          /* Function: DrvSYS_GetVersion                                                                             */
     20          /*                                                                                                         */
     21          /* Parameters:        	                                                                                   */
     22          /*               None	                                                         						   */
     23          /*                                                                                                         */
     24          /* Returns:                                                                                                */
     25          /*               The DrvSYS version number                                                                 */
     26          /*                                                                                                         */
     27          /* Description:                                                                                            */
     28          /*               This function is used to get the DrvSYS version number                                    */
     29          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
     30          uint32_t DrvSYS_GetVersion(void)
     31          {
     32          	return DRVSYS_VERSION_NUM;
   \                     DrvSYS_GetVersion:
   \   00000000   ....               LDR      R0,??DataTable21_2  ;; 0x10001
   \   00000002   7047               BX       LR               ;; return
     33          }
     34          
     35          /*---------------------------------------------------------------------------------------------------------*/
     36          /* Function: DrvSYS_ReadProductID				                                               	   		   */
     37          /*                                                                                                         */
     38          /* Parameters:                                                                                             */
     39          /*               None    				   										   						   */
     40          /*                     		                           	   												   */
     41          /*               									      		                           				   */
     42          /* Returns:                                                                                                */
     43          /*               Product ID																		   		   */
     44          /*               							                                                               */
     45          /* Description:                                                                                            */
     46          /*               Read Product ID                             	                       					   */
     47          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
     48          uint32_t DrvSYS_ReadProductID(void)
     49          {	
     50          	return SYS->PDID;
   \                     DrvSYS_ReadProductID:
   \   00000000   A020               MOVS     R0,#+160
   \   00000002   C005               LSLS     R0,R0,#+23       ;; #+1342177280
   \   00000004   0068               LDR      R0,[R0, #+0]
   \   00000006   7047               BX       LR               ;; return
     51          }
     52          
     53          /*---------------------------------------------------------------------------------------------------------*/
     54          /* Function: DrvSYS_UnlockKeyAddr				                                               	   		   */
     55          /*                                                                                                         */
     56          /* Parameters:                                                                                             */
     57          /*               None    				   										   						   */
     58          /*                     		                           	   												   */
     59          /* Returns:                                                                                                */
     60          /*               0 		Success																		   	   */
     61          /*              <0		Failed					                                                           */
     62          /* Description:                                                                                            */
     63          /*               Unlock protected registers                             	                   			   */
     64          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
     65          int32_t DrvSYS_UnlockKeyAddr(void)
     66          {
   \                     DrvSYS_UnlockKeyAddr:
   \   00000000   00B5               PUSH     {LR}
     67          	uint32_t lockbit;
     68          	
     69          	SYS->REGLOCK = 0x59;
   \   00000002   ....               LDR      R0,??DataTable21_3  ;; 0x50000100
   \   00000004   5921               MOVS     R1,#+89
   \   00000006   0160               STR      R1,[R0, #+0]
     70          	SYS->REGLOCK = 0x16;
   \   00000008   ....               LDR      R0,??DataTable21_3  ;; 0x50000100
   \   0000000A   1621               MOVS     R1,#+22
   \   0000000C   0160               STR      R1,[R0, #+0]
     71          	SYS->REGLOCK = 0x88;
   \   0000000E   ....               LDR      R0,??DataTable21_3  ;; 0x50000100
   \   00000010   8821               MOVS     R1,#+136
   \   00000012   0160               STR      R1,[R0, #+0]
     72          
     73          	lockbit = SYS->REGLOCK & 0x01;
   \   00000014   ....               LDR      R0,??DataTable21_3  ;; 0x50000100
   \   00000016   0168               LDR      R1,[R0, #+0]
   \   00000018   0800               MOVS     R0,R1
   \   0000001A   C007               LSLS     R0,R0,#+31       ;; ZeroExtS R0,R0,#+31,#+31
   \   0000001C   C00F               LSRS     R0,R0,#+31
     74          	return (lockbit)? 0:E_DRVSYS_ERR_UNLOCK_FAIL;
   \   0000001E   0028               CMP      R0,#+0
   \   00000020   01D0               BEQ      ??DrvSYS_UnlockKeyAddr_0
   \   00000022   0020               MOVS     R0,#+0
   \   00000024   00E0               B        ??DrvSYS_UnlockKeyAddr_1
   \                     ??DrvSYS_UnlockKeyAddr_0:
   \   00000026   ....               LDR      R0,??DataTable21_4  ;; 0xffff9601
   \                     ??DrvSYS_UnlockKeyAddr_1:
   \   00000028   00BD               POP      {PC}             ;; return
     75          } 
     76           
     77          /*---------------------------------------------------------------------------------------------------------*/
     78          /* Function: DrvSYS_LockKeyAddr				                                               	   		   	   */
     79          /*                                                                                                         */
     80          /* Parameters:                                                                                             */
     81          /*               None    				   										   						   */
     82          /*                     		                           	   												   */
     83          /* Returns:                                                                                                */
     84          /*               0 		Success																		   	   */
     85          /*              <0		Failed					                                                           */
     86          /* Description:                                                                                            */
     87          /*               Lock protected registers                             	                   			   	   */
     88          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
     89          int32_t DrvSYS_LockKeyAddr(void)
     90          {
   \                     DrvSYS_LockKeyAddr:
   \   00000000   00B5               PUSH     {LR}
     91          	uint32_t lockbit;
     92          	
     93          	SYS->REGLOCK = 0x00;
   \   00000002   ....               LDR      R0,??DataTable21_3  ;; 0x50000100
   \   00000004   0021               MOVS     R1,#+0
   \   00000006   0160               STR      R1,[R0, #+0]
     94          
     95          	lockbit = SYS->REGLOCK & 0x01;
   \   00000008   ....               LDR      R0,??DataTable21_3  ;; 0x50000100
   \   0000000A   0168               LDR      R1,[R0, #+0]
   \   0000000C   0800               MOVS     R0,R1
   \   0000000E   C007               LSLS     R0,R0,#+31       ;; ZeroExtS R0,R0,#+31,#+31
   \   00000010   C00F               LSRS     R0,R0,#+31
     96          	return (lockbit)? E_DRVSYS_ERR_LOCK_FAIL:0;
   \   00000012   0028               CMP      R0,#+0
   \   00000014   01D0               BEQ      ??DrvSYS_LockKeyAddr_0
   \   00000016   ....               LDR      R0,??DataTable21_5  ;; 0xffff9602
   \   00000018   00E0               B        ??DrvSYS_LockKeyAddr_1
   \                     ??DrvSYS_LockKeyAddr_0:
   \   0000001A   0020               MOVS     R0,#+0
   \                     ??DrvSYS_LockKeyAddr_1:
   \   0000001C   00BD               POP      {PC}             ;; return
     97          }
     98          
     99          /*---------------------------------------------------------------------------------------------------------*/
    100          /* Function: DrvSYS_GetRstSrc				                                               	   		   	   */
    101          /*                                                                                                         */
    102          /* Parameters:                                                                                             */
    103          /*               None    				   										   						   */
    104          /*                     		                           	   												   */
    105          /* Returns:                                                                                                */
    106          /*               Reset source																		   	   */
    107          /*              					                                                           			   */
    108          /* Description:                                                                                            */
    109          /*               Get reset source from last operation                             	           		   	   */
    110          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    111          uint32_t DrvSYS_GetRstSrc(void)
    112          {
    113          	return *((__IO uint32_t *) &SYS->RSTSRC);
   \                     DrvSYS_GetRstSrc:
   \   00000000   ....               LDR      R0,??DataTable21_6  ;; 0x50000004
   \   00000002   0068               LDR      R0,[R0, #+0]
   \   00000004   7047               BX       LR               ;; return
    114          }
    115          
    116          /*---------------------------------------------------------------------------------------------------------*/
    117          /* Function: DrvSYS_ClearRstSrc				                                               	   		   	   */
    118          /*                                                                                                         */
    119          /* Parameters:                                                                                             */
    120          /*               u32Src    	- [in]    The corresponding bit of reset source			   					   */
    121          /*                     		                           	   												   */
    122          /* Returns:                                                                                                */
    123          /*               0																		   	   			   */
    124          /*              					                                                           			   */
    125          /* Description:                                                                                            */
    126          /*               Clear reset source by write 1                             	           		   	   		   */
    127          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    128          uint32_t DrvSYS_ClearRstSrc(uint32_t u32Src)
    129          {
    130          	*((__IO uint32_t *) &SYS->RSTSRC) = u32Src;
   \                     DrvSYS_ClearRstSrc:
   \   00000000   ....               LDR      R1,??DataTable21_6  ;; 0x50000004
   \   00000002   0860               STR      R0,[R1, #+0]
    131          	return 0;
   \   00000004   0020               MOVS     R0,#+0
   \   00000006   7047               BX       LR               ;; return
    132          }
    133          
    134          /*---------------------------------------------------------------------------------------------------------*/
    135          /* Function: DrvSYS_ResetIP				                                               	   		   	   	   */
    136          /*                                                                                                         */
    137          /* Parameters:                                                                                             */
    138          /*               eIpRst  - [in]  	E_SYS_GPIO_RST  / E_SYS_TMR0_RST / E_SYS_TMR1_RST / E_SYS_TMR2_RST	   */
    139          /*	 					    		E_SYS_TMR3_RST  / E_SYS_I2C0_RST / E_SYS_I2C1_RST / E_SYS_SPI0_RST	   */
    140          /*									E_SYS_SPI1_RST  / E_SYS_SPI2_RST / E_SYS_SPI3_RST / E_SYS_UART0_RST	   */
    141          /*									E_SYS_UART1_RST	/ E_SYS_UART2_RST/ E_SYS_PWM03_RST/ E_SYS_PWM47_RST	   */
    142          /*									E_SYS_ACMP_RST  / E_SYS_PS2_RST  / E_SYS_CAN0_RST / E_SYS_USBD_RST 	   */
    143          /*									E_SYS_ADC_RST   / E_SYS_I2S_RST  / E_SYS_PDMA_RST			   		   */
    144          /*                     		                           	   												   */
    145          /* Returns:                                                                                                */
    146          /*               None																		   	   		   */
    147          /*              					                                                           			   */
    148          /* Description:                                                                                            */
    149          /*               Reset coresponding IP                            	           		   	   		   		   */
    150          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    151          void DrvSYS_ResetIP(E_SYS_IP_RST eIpRst)
    152          {	
   \                     DrvSYS_ResetIP:
   \   00000000   00B5               PUSH     {LR}
    153          	uint32_t u32Reg;
    154          
    155          	if (eIpRst == E_SYS_PDMA_RST)
   \   00000002   C0B2               UXTB     R0,R0
   \   00000004   2028               CMP      R0,#+32
   \   00000006   0CD1               BNE      ??DrvSYS_ResetIP_0
    156          	{
    157          		SYS->IPRSTC1.PDMA_RST = 1;
   \   00000008   ....               LDR      R0,??DataTable21_7  ;; 0x50000008
   \   0000000A   0068               LDR      R0,[R0, #+0]
   \   0000000C   0421               MOVS     R1,#+4
   \   0000000E   0143               ORRS     R1,R1,R0
   \   00000010   ....               LDR      R0,??DataTable21_7  ;; 0x50000008
   \   00000012   0160               STR      R1,[R0, #+0]
    158          		SYS->IPRSTC1.PDMA_RST = 0;
   \   00000014   ....               LDR      R0,??DataTable21_7  ;; 0x50000008
   \   00000016   0068               LDR      R0,[R0, #+0]
   \   00000018   0421               MOVS     R1,#+4
   \   0000001A   8843               BICS     R0,R0,R1
   \   0000001C   ....               LDR      R1,??DataTable21_7  ;; 0x50000008
   \   0000001E   0860               STR      R0,[R1, #+0]
   \   00000020   0BE0               B        ??DrvSYS_ResetIP_1
    159          	}
    160          	else
    161          	{
    162          		u32Reg = *((__IO uint32_t *) &SYS->IPRSTC2);
   \                     ??DrvSYS_ResetIP_0:
   \   00000022   ....               LDR      R1,??DataTable21_8  ;; 0x5000000c
   \   00000024   0968               LDR      R1,[R1, #+0]
    163          		*((__IO uint32_t *) &SYS->IPRSTC2) = u32Reg | (1<<eIpRst);
   \   00000026   0122               MOVS     R2,#+1
   \   00000028   8240               LSLS     R2,R2,R0
   \   0000002A   0A43               ORRS     R2,R2,R1
   \   0000002C   ....               LDR      R3,??DataTable21_8  ;; 0x5000000c
   \   0000002E   1A60               STR      R2,[R3, #+0]
    164          		*((__IO uint32_t *) &SYS->IPRSTC2) = u32Reg & ~(1<<eIpRst);
   \   00000030   0122               MOVS     R2,#+1
   \   00000032   8240               LSLS     R2,R2,R0
   \   00000034   9143               BICS     R1,R1,R2
   \   00000036   ....               LDR      R0,??DataTable21_8  ;; 0x5000000c
   \   00000038   0160               STR      R1,[R0, #+0]
    165          	}
    166          }
   \                     ??DrvSYS_ResetIP_1:
   \   0000003A   00BD               POP      {PC}             ;; return
    167          
    168          /*---------------------------------------------------------------------------------------------------------*/
    169          /* Function: DrvSYS_ResetCPU				                                               	   		   	   */
    170          /*                                                                                                         */
    171          /* Parameters:                                                                                             */
    172          /*               None			   						   												   */
    173          /*                     		                           	   												   */
    174          /* Returns:                                                                                                */
    175          /*               None																		   	   		   */
    176          /*              					                                                           			   */
    177          /* Description:                                                                                            */
    178          /*               Reset CPU                           	           		   	   		   					   */
    179          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    180          void DrvSYS_ResetCPU(void)
    181          {
    182          	SYS->IPRSTC1.CPU_RST = 1;
   \                     DrvSYS_ResetCPU:
   \   00000000   ....               LDR      R0,??DataTable21_7  ;; 0x50000008
   \   00000002   0068               LDR      R0,[R0, #+0]
   \   00000004   0221               MOVS     R1,#+2
   \   00000006   0143               ORRS     R1,R1,R0
   \   00000008   ....               LDR      R0,??DataTable21_7  ;; 0x50000008
   \   0000000A   0160               STR      R1,[R0, #+0]
    183          }
   \   0000000C   7047               BX       LR               ;; return
    184          
    185          /*---------------------------------------------------------------------------------------------------------*/
    186          /* Function: DrvSYS_ResetChip				                                               	   		   	   */
    187          /*                                                                                                         */
    188          /* Parameters:                                                                                             */
    189          /*               None			   						   												   */
    190          /*                     		                           	   												   */
    191          /* Returns:                                                                                                */
    192          /*               None																		   	   		   */
    193          /*              					                                                           			   */
    194          /* Description:                                                                                            */
    195          /*               Reset whole chip                           	           		   	   		   			   */
    196          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    197          void DrvSYS_ResetChip(void)
    198          {
    199          	SYS->IPRSTC1.CHIP_RST = 1;
   \                     DrvSYS_ResetChip:
   \   00000000   ....               LDR      R0,??DataTable21_7  ;; 0x50000008
   \   00000002   0068               LDR      R0,[R0, #+0]
   \   00000004   0121               MOVS     R1,#+1
   \   00000006   0143               ORRS     R1,R1,R0
   \   00000008   ....               LDR      R0,??DataTable21_7  ;; 0x50000008
   \   0000000A   0160               STR      R1,[R0, #+0]
    200          }
   \   0000000C   7047               BX       LR               ;; return
    201          
    202          /*---------------------------------------------------------------------------------------------------------*/
    203          /* Function: DrvSYS_EnableBOD				                                               	   		   	   */
    204          /*                                                                                                         */
    205          /* Parameters:                                                                                             */
    206          /*               i32Enable		- [in] 	  1 : Enable / 0 : Disable 						   				   */
    207          /*                     		                           	   												   */
    208          /* Returns:                                                                                                */
    209          /*               None																		   	   		   */
    210          /*              					                                                           			   */
    211          /* Side effects:                                                                                           */
    212          /* Description:                                                                                            */
    213          /*               Enable BOD function                           	           		   	   		   			   */
    214          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    215          void DrvSYS_EnableBOD(int32_t i32Enable)
    216          {
    217          	SYS->BODCR.BOD_EN = i32Enable;
   \                     DrvSYS_EnableBOD:
   \   00000000   ....               LDR      R1,??DataTable21_9  ;; 0x50000018
   \   00000002   0968               LDR      R1,[R1, #+0]
   \   00000004   0122               MOVS     R2,#+1
   \   00000006   9143               BICS     R1,R1,R2
   \   00000008   0200               MOVS     R2,R0
   \   0000000A   D207               LSLS     R2,R2,#+31       ;; ZeroExtS R2,R2,#+31,#+31
   \   0000000C   D20F               LSRS     R2,R2,#+31
   \   0000000E   0A43               ORRS     R2,R2,R1
   \   00000010   ....               LDR      R0,??DataTable21_9  ;; 0x50000018
   \   00000012   0260               STR      R2,[R0, #+0]
    218          }
   \   00000014   7047               BX       LR               ;; return
    219          	 
    220          /*---------------------------------------------------------------------------------------------------------*/
    221          /* Function: DrvSYS_SelectBODVolt				                                               	   		   */
    222          /*                                                                                                         */
    223          /* Parameters:                                                                                             */
    224          /*               u8Volt		- [in] 	  3:4.5V, 2:3.8V, 1:2.6V, 0:2.2V  									   */
    225          /*                     		                           	   												   */
    226          /* Returns:                                                                                                */
    227          /*               None																		   	   		   */
    228          /*              					                                                           			   */
    229          /* Description:                                                                                            */
    230          /*               Select BOD threshold voltage                           	           		   	   		   */
    231          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    232          void DrvSYS_SelectBODVolt(uint8_t u8Volt)
    233          {
    234          	SYS->BODCR.BOD_VL = u8Volt;
   \                     DrvSYS_SelectBODVolt:
   \   00000000   ....               LDR      R1,??DataTable21_9  ;; 0x50000018
   \   00000002   0968               LDR      R1,[R1, #+0]
   \   00000004   0622               MOVS     R2,#+6
   \   00000006   9143               BICS     R1,R1,R2
   \   00000008   C0B2               UXTB     R0,R0
   \   0000000A   4000               LSLS     R0,R0,#+1
   \   0000000C   0622               MOVS     R2,#+6
   \   0000000E   0240               ANDS     R2,R2,R0
   \   00000010   0A43               ORRS     R2,R2,R1
   \   00000012   ....               LDR      R0,??DataTable21_9  ;; 0x50000018
   \   00000014   0260               STR      R2,[R0, #+0]
    235          }
   \   00000016   7047               BX       LR               ;; return
    236          
    237          /*---------------------------------------------------------------------------------------------------------*/
    238          /* Function: DrvSYS_EnableBODRst				                                               	   		   */
    239          /*                                                                                                         */
    240          /* Parameters:                                                                                             */
    241          /*               i32Enable		- [in] 	  1: Enable BOD reset function / 0:Enable BOD interrupt function   */
    242          /*               bodcallbackFn	- [in] 	  BOD Call back function  										   */
    243          /*                     		                           	   												   */
    244          /* Returns:                                                                                                */
    245          /*               None																		   	   		   */
    246          /*              					                                                           			   */
    247          /* Side effects:                                                                                           */
    248          /* Description:                                                                                            */
    249          /*               Enable BOD reset function or interrupt function, and install call back function if		   */
    250          /*				 interrupt function is enabled.                           	           		   	   		   */
    251          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    252          void DrvSYS_EnableBODRst(int32_t i32Enable, BOD_CALLBACK bodcallbackFn)
    253          {
   \                     DrvSYS_EnableBODRst:
   \   00000000   10B5               PUSH     {R4,LR}
    254          	SYS->BODCR.BOD_RSTEN = i32Enable;
   \   00000002   ....               LDR      R2,??DataTable21_9  ;; 0x50000018
   \   00000004   1268               LDR      R2,[R2, #+0]
   \   00000006   0823               MOVS     R3,#+8
   \   00000008   9A43               BICS     R2,R2,R3
   \   0000000A   C300               LSLS     R3,R0,#+3
   \   0000000C   0824               MOVS     R4,#+8
   \   0000000E   1C40               ANDS     R4,R4,R3
   \   00000010   1443               ORRS     R4,R4,R2
   \   00000012   ....               LDR      R2,??DataTable21_9  ;; 0x50000018
   \   00000014   1460               STR      R4,[R2, #+0]
    255          	
    256          	if (i32Enable)
   \   00000016   0028               CMP      R0,#+0
   \   00000018   03D0               BEQ      ??DrvSYS_EnableBODRst_0
    257          	{		
    258          		NVIC_DisableIRQ(BOD_IRQn);
   \   0000001A   0020               MOVS     R0,#+0
   \   0000001C   ........           BL       NVIC_DisableIRQ
   \   00000020   04E0               B        ??DrvSYS_EnableBODRst_1
    259          	}
    260          	else
    261          	{ 
    262          		BOD_callbackFn = bodcallbackFn;
   \                     ??DrvSYS_EnableBODRst_0:
   \   00000022   ....               LDR      R0,??DataTable22  ;; BOD_callbackFn
   \   00000024   0160               STR      R1,[R0, #+0]
    263          		NVIC_EnableIRQ(BOD_IRQn);
   \   00000026   0020               MOVS     R0,#+0
   \   00000028   ........           BL       NVIC_EnableIRQ
    264          	}	
    265          }
   \                     ??DrvSYS_EnableBODRst_1:
   \   0000002C   10BD               POP      {R4,PC}          ;; return
    266          
    267          /*---------------------------------------------------------------------------------------------------------*/
    268          /* Function: DrvSYS_EnableBODLowPowerMode				                                               	   */
    269          /*                                                                                                         */
    270          /* Parameters:                                                                                             */
    271          /*               i32Enable	- [in] 	  1 : Enable / 0 : Disable 						   					   */
    272          /*                     		                           	   												   */
    273          /* Returns:                                                                                                */
    274          /*               None																		   	   		   */
    275          /*              					                                                           			   */
    276          /* Description:                                                                                            */
    277          /*               Enable BOD low power mode                           	           		   	   			   */
    278          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    279          void DrvSYS_EnableBODLowPowerMode(int32_t i32Enable)
    280          {
    281          	SYS->BODCR.BOD_LPM = i32Enable;
   \                     DrvSYS_EnableBODLowPowerMode:
   \   00000000   ....               LDR      R1,??DataTable21_9  ;; 0x50000018
   \   00000002   0968               LDR      R1,[R1, #+0]
   \   00000004   2022               MOVS     R2,#+32
   \   00000006   9143               BICS     R1,R1,R2
   \   00000008   4001               LSLS     R0,R0,#+5
   \   0000000A   2022               MOVS     R2,#+32
   \   0000000C   0240               ANDS     R2,R2,R0
   \   0000000E   0A43               ORRS     R2,R2,R1
   \   00000010   ....               LDR      R0,??DataTable21_9  ;; 0x50000018
   \   00000012   0260               STR      R2,[R0, #+0]
    282          }
   \   00000014   7047               BX       LR               ;; return
    283          
    284          /*---------------------------------------------------------------------------------------------------------*/
    285          /* Function: DrvSYS_GetBODState				                                               	   			   */
    286          /*                                                                                                         */
    287          /* Parameters:                                                                                             */
    288          /*               None			  						   									   			   */
    289          /*                     		                           	   												   */
    290          /* Returns:                                                                                                */
    291          /*               BOD output status  1: the detected voltage is lower than BOD threshold voltage			   */
    292          /*									0: the detected voltage is higher than BOD threshold voltage		   */
    293          /*              					                                                           			   */
    294          /* Description:                                                                                            */
    295          /*               Get BOD state                           	           		   	   			   			   */
    296          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    297          uint32_t DrvSYS_GetBODState(void)
    298          {
    299          	return SYS->BODCR.BOD_OUT;
   \                     DrvSYS_GetBODState:
   \   00000000   ....               LDR      R0,??DataTable21_9  ;; 0x50000018
   \   00000002   0068               LDR      R0,[R0, #+0]
   \   00000004   4021               MOVS     R1,#+64
   \   00000006   0140               ANDS     R1,R1,R0
   \   00000008   0800               MOVS     R0,R1
   \   0000000A   8009               LSRS     R0,R0,#+6
   \   0000000C   7047               BX       LR               ;; return
    300          }
    301          
    302          /*---------------------------------------------------------------------------------------------------------*/
    303          /* Function: DrvSYS_EnableLowVoltRst				                                               	   	   */
    304          /*                                                                                                         */
    305          /* Parameters:                                                                                             */
    306          /*               i32Enable	 - [in] 	  1 : Enable / 0 : Disable   						   			   */
    307          /*                     		                           	   												   */
    308          /* Returns:                                                                                                */
    309          /*               None 										 											   */
    310          /*              					                                                           			   */
    311          /* Description:                                                                                            */
    312          /*               Enable low voltage reset                           	           		   	   			   */
    313          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    314          void DrvSYS_EnableLowVoltRst(int32_t i32Enable)
    315          {
    316          	SYS->BODCR.LVR_EN = i32Enable;
   \                     DrvSYS_EnableLowVoltRst:
   \   00000000   ....               LDR      R1,??DataTable21_9  ;; 0x50000018
   \   00000002   0968               LDR      R1,[R1, #+0]
   \   00000004   8022               MOVS     R2,#+128
   \   00000006   9143               BICS     R1,R1,R2
   \   00000008   C001               LSLS     R0,R0,#+7
   \   0000000A   8022               MOVS     R2,#+128
   \   0000000C   0240               ANDS     R2,R2,R0
   \   0000000E   0A43               ORRS     R2,R2,R1
   \   00000010   ....               LDR      R0,??DataTable21_9  ;; 0x50000018
   \   00000012   0260               STR      R2,[R0, #+0]
    317          }
   \   00000014   7047               BX       LR               ;; return
    318          
    319          /*---------------------------------------------------------------------------------------------------------*/
    320          /* Function: DrvSYS_EnableTempatureSensor				                                               	   */
    321          /*                                                                                                         */
    322          /* Parameters:                                                                                             */
    323          /*               i32Enable		- [in] 	  1 : Enable / 0 : Disable   								   	   */
    324          /*                     		                           	   												   */
    325          /* Returns:                                                                                                */
    326          /*               None 										 											   */
    327          /*              					                                                           			   */
    328          /* Description:                                                                                            */
    329          /*               Enable Tempature Sensor                           	           		   	   			       */
    330          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    331          void DrvSYS_EnableTempatureSensor(int32_t i32Enable)
    332          {
    333          	SYS->TEMPCR = i32Enable;
   \                     DrvSYS_EnableTempatureSensor:
   \   00000000   ....               LDR      R1,??DataTable22_1  ;; 0x5000001c
   \   00000002   0860               STR      R0,[R1, #+0]
    334          }
   \   00000004   7047               BX       LR               ;; return
    335          
    336          
    337          /*---------------------------------------------------------------------------------------------------------*/
    338          /* Function: DrvSYS_SetRCAdjValue				                                               	   		   */
    339          /*                                                                                                         */
    340          /* Parameters:                                                                                             */
    341          /*               u32Adj		- [in]	RC adjustment value  						   					       */
    342          /*                     		                           	   												   */
    343          /* Returns:                                                                                                */
    344          /*               None 										 											   */
    345          /*              					                                                           			   */
    346          /* Description:                                                                                            */
    347          /*               Set RC adjustment value            		   	   			       						   */
    348          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    349          void DrvSYS_SetRCAdjValue(uint32_t u32Adj)
    350          {
    351          	SYS->RCADJ = u32Adj;
   \                     DrvSYS_SetRCAdjValue:
   \   00000000   ....               LDR      R1,??DataTable22_2  ;; 0x50000110
   \   00000002   0860               STR      R0,[R1, #+0]
    352          }
   \   00000004   7047               BX       LR               ;; return
    353          
    354          /*---------------------------------------------------------------------------------------------------------*/
    355          /* Function:     <BOD_IRQHandler>                                                                          */
    356          /*                                                                                                         */
    357          /* Parameter:                                                                                              */
    358          /*               None                                                                                      */
    359          /* Returns:                                                                                                */
    360          /*               None                                                                                      */
    361          /* Side effects:                                                                                           */
    362          /*                                                                                                         */
    363          /* Description:                                                                                            */
    364          /*               ISR to handle BOD interrupt event           		                                       */
    365          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    366          void BOD_IRQHandler(void)
    367          {
   \                     BOD_IRQHandler:
   \   00000000   80B5               PUSH     {R7,LR}
    368          	SYS->BODCR.BOD_INTF = 1;
   \   00000002   ....               LDR      R0,??DataTable21_9  ;; 0x50000018
   \   00000004   0068               LDR      R0,[R0, #+0]
   \   00000006   1021               MOVS     R1,#+16
   \   00000008   0143               ORRS     R1,R1,R0
   \   0000000A   ....               LDR      R0,??DataTable21_9  ;; 0x50000018
   \   0000000C   0160               STR      R1,[R0, #+0]
    369          	if (BOD_callbackFn != NULL)
   \   0000000E   ....               LDR      R0,??DataTable22  ;; BOD_callbackFn
   \   00000010   0068               LDR      R0,[R0, #+0]
   \   00000012   0028               CMP      R0,#+0
   \   00000014   02D0               BEQ      ??BOD_IRQHandler_0
    370          		BOD_callbackFn();
   \   00000016   ....               LDR      R0,??DataTable22  ;; BOD_callbackFn
   \   00000018   0068               LDR      R0,[R0, #+0]
   \   0000001A   8047               BLX      R0
    371          
    372          }
   \                     ??BOD_IRQHandler_0:
   \   0000001C   01BD               POP      {R0,PC}          ;; return
    373          
    374          /*---------------------------------------------------------------------------------------------------------*/
    375          /* Function: DrvSYS_SetIPClock				                                        	       	  	   	   */
    376          /*                                                                                                         */
    377          /* Parameters:                                                                                             */
    378          /*               eIpClk    	- [in]  E_SYS_WDG_CLK   / E_SYS_RTC_CLK   / E_SYS_TMR0_CLK  / E_SYS_TMR1_CLK   */
    379          /*	 					    		E_SYS_TMR2_CLK  / E_SYS_TMR3_CLK  / E_SYS_FDIV_CLK  / E_SYS_I2C0_CLK   */
    380          /*									E_SYS_I2C1_CLK  / E_SYS_SPI0_CLK  / E_SYS_SPI1_CLK  / E_SYS_SPI2_CLK   */
    381          /*									E_SYS_SPI3_CLK  / E_SYS_UART0_CLK / E_SYS_UART1_CLK / E_SYS_UART2_CLK  */
    382          /*                                  E_SYS_PWM01_CLK / E_SYS_PWM23_CLK / E_SYS_PWM45_CLK / E_SYS_PWM67_CLK  */
    383          /*									E_SYS_CAN0_CLK  / E_SYS_USBD_CLK  / E_SYS_ADC_CLK	/ E_SYS_I2S_CLK    */
    384          /*									E_SYS_ACMP_CLK	/ E_SYS_PS2_CLK   / E_SYS_PDMA_CLK  / E_SYS_ISP_CLK    */
    385          /*              					                                                           			   */
    386          /* 				 i32Enable	- [in] 	1 : Enable / 0 : Disable                    						   */
    387          /* Returns:                                                                                                */
    388          /*               None																		   	   		   */
    389          /*              					                                                           			   */
    390          /* Description:                                                                                            */
    391          /*               Enable/Disable coresponding IP clock                           	   	   		   		   */
    392          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    393          void DrvSYS_SetIPClock(E_SYS_IP_CLK eIpClk, int32_t i32Enable)
    394          {	
   \                     DrvSYS_SetIPClock:
   \   00000000   00B5               PUSH     {LR}
    395          	uint32_t u32Reg;
    396          
    397          	if (eIpClk == E_SYS_PDMA_CLK)
   \   00000002   C0B2               UXTB     R0,R0
   \   00000004   2128               CMP      R0,#+33
   \   00000006   0AD1               BNE      ??DrvSYS_SetIPClock_0
    398          	{
    399          		SYSCLK->AHBCLK.PDMA_EN = i32Enable;
   \   00000008   ....               LDR      R0,??DataTable22_3  ;; 0x50000204
   \   0000000A   0068               LDR      R0,[R0, #+0]
   \   0000000C   0222               MOVS     R2,#+2
   \   0000000E   9043               BICS     R0,R0,R2
   \   00000010   4900               LSLS     R1,R1,#+1
   \   00000012   0222               MOVS     R2,#+2
   \   00000014   0A40               ANDS     R2,R2,R1
   \   00000016   0243               ORRS     R2,R2,R0
   \   00000018   ....               LDR      R0,??DataTable22_3  ;; 0x50000204
   \   0000001A   0260               STR      R2,[R0, #+0]
   \   0000001C   1CE0               B        ??DrvSYS_SetIPClock_1
    400          	}
    401          	else if (eIpClk == E_SYS_ISP_CLK)
   \                     ??DrvSYS_SetIPClock_0:
   \   0000001E   C0B2               UXTB     R0,R0
   \   00000020   2228               CMP      R0,#+34
   \   00000022   0AD1               BNE      ??DrvSYS_SetIPClock_2
    402          	{
    403          		SYSCLK->AHBCLK.ISP_EN = i32Enable;
   \   00000024   ....               LDR      R0,??DataTable22_3  ;; 0x50000204
   \   00000026   0068               LDR      R0,[R0, #+0]
   \   00000028   0422               MOVS     R2,#+4
   \   0000002A   9043               BICS     R0,R0,R2
   \   0000002C   8900               LSLS     R1,R1,#+2
   \   0000002E   0422               MOVS     R2,#+4
   \   00000030   0A40               ANDS     R2,R2,R1
   \   00000032   0243               ORRS     R2,R2,R0
   \   00000034   ....               LDR      R0,??DataTable22_3  ;; 0x50000204
   \   00000036   0260               STR      R2,[R0, #+0]
   \   00000038   0EE0               B        ??DrvSYS_SetIPClock_1
    404          	}
    405          	else
    406          	{
    407          		u32Reg = *((__IO uint32_t *) &SYSCLK->APBCLK);
   \                     ??DrvSYS_SetIPClock_2:
   \   0000003A   ....               LDR      R2,??DataTable23  ;; 0x50000208
   \   0000003C   1268               LDR      R2,[R2, #+0]
    408          		
    409          		if (i32Enable)
   \   0000003E   0029               CMP      R1,#+0
   \   00000040   05D0               BEQ      ??DrvSYS_SetIPClock_3
    410          		{
    411          			*((__IO uint32_t *) &SYSCLK->APBCLK) = u32Reg | (1<<eIpClk);
   \   00000042   0121               MOVS     R1,#+1
   \   00000044   8140               LSLS     R1,R1,R0
   \   00000046   1143               ORRS     R1,R1,R2
   \   00000048   ....               LDR      R0,??DataTable23  ;; 0x50000208
   \   0000004A   0160               STR      R1,[R0, #+0]
   \   0000004C   04E0               B        ??DrvSYS_SetIPClock_1
    412          		}
    413          		else
    414          		{
    415          			*((__IO uint32_t *) &SYSCLK->APBCLK) = u32Reg & ~(1<<eIpClk);
   \                     ??DrvSYS_SetIPClock_3:
   \   0000004E   0121               MOVS     R1,#+1
   \   00000050   8140               LSLS     R1,R1,R0
   \   00000052   8A43               BICS     R2,R2,R1
   \   00000054   ....               LDR      R0,??DataTable23  ;; 0x50000208
   \   00000056   0260               STR      R2,[R0, #+0]
    416          		}
    417          	}
    418          }
   \                     ??DrvSYS_SetIPClock_1:
   \   00000058   00BD               POP      {PC}             ;; return
    419          
    420          /*---------------------------------------------------------------------------------------------------------*/
    421          /* Function: DrvSYS_SetHCLKSource				                                               	   		   */
    422          /*                                                                                                         */
    423          /* Parameters:                                                                                             */
    424          /*           u8ClkSrcSel       - [in] 	0: External 12M clock                      	   					   */
    425          /*          							1: External 32K clock                      	   					   */
    426          /*            							2: PLL clock                      	   							   */
    427          /*            							3: Internal 10K clock                      	   					   */
    428          /*            							7: Internal 22M clock                      	   				   */
    429          /*              											                                        	   */
    430          /* Returns:                                                                                                */
    431          /*                 0:  Success																			   */
    432          /*               < 0:  Wrong value											                    		   */
    433          /*               							                                                               */
    434          /* Description:                                                                                            */
    435          /*               This function is used to select HCLK clock source                                   	   */		
    436          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    437          int32_t DrvSYS_SetHCLKSource(uint8_t u8ClkSrcSel)
    438          {
   \                     DrvSYS_SetHCLKSource:
   \   00000000   00B5               PUSH     {LR}
    439          	if ((u8ClkSrcSel > 7) || ((u8ClkSrcSel > 3) && (u8ClkSrcSel < 7)))
   \   00000002   C0B2               UXTB     R0,R0
   \   00000004   0828               CMP      R0,#+8
   \   00000006   04D2               BCS      ??DrvSYS_SetHCLKSource_0
   \   00000008   0100               MOVS     R1,R0
   \   0000000A   091F               SUBS     R1,R1,#+4
   \   0000000C   C9B2               UXTB     R1,R1
   \   0000000E   0329               CMP      R1,#+3
   \   00000010   01D2               BCS      ??DrvSYS_SetHCLKSource_1
    440          	{
    441          		return E_DRVSYS_ERR_ARGUMENT;
   \                     ??DrvSYS_SetHCLKSource_0:
   \   00000012   ....               LDR      R0,??DataTable23_1  ;; 0xffff9603
   \   00000014   0AE0               B        ??DrvSYS_SetHCLKSource_2
    442          	}
    443          	else
    444          	{
    445          		SYSCLK->CLKSEL0.HCLK_S = u8ClkSrcSel;
   \                     ??DrvSYS_SetHCLKSource_1:
   \   00000016   ....               LDR      R1,??DataTable24  ;; 0x50000210
   \   00000018   0968               LDR      R1,[R1, #+0]
   \   0000001A   0722               MOVS     R2,#+7
   \   0000001C   9143               BICS     R1,R1,R2
   \   0000001E   C0B2               UXTB     R0,R0
   \   00000020   4007               LSLS     R0,R0,#+29       ;; ZeroExtS R0,R0,#+29,#+29
   \   00000022   400F               LSRS     R0,R0,#+29
   \   00000024   0843               ORRS     R0,R0,R1
   \   00000026   ....               LDR      R1,??DataTable24  ;; 0x50000210
   \   00000028   0860               STR      R0,[R1, #+0]
    446          	}
    447          	return 0;
   \   0000002A   0020               MOVS     R0,#+0
   \                     ??DrvSYS_SetHCLKSource_2:
   \   0000002C   00BD               POP      {PC}             ;; return
    448          }
    449          
    450          /*---------------------------------------------------------------------------------------------------------*/
    451          /* Function: DrvSYS_SetSysTickSource				                                              		   */
    452          /*                                                                                                         */
    453          /* Parameters:                                                                                             */
    454          /*           u8ClkSrcSel       - [in] 	0: External 12M clock                      	   					   */
    455          /*           						 	1: External 32K clock                      	   					   */
    456          /*          							2: External 12M clock / 2                      	   				   */
    457          /*            							3: HCLK / 2                      	   							   */
    458          /*            							4~7: Internal 22M clock / 2                     	   			   */
    459          /*              											                                        	   */
    460          /* Returns:                                                                                                */
    461          /*                 0:  Success																			   */
    462          /*               < 0:  Wrong value											                    		   */
    463          /*               							                                                               */
    464          /* Description:                                                                                            */
    465          /*               This function is used to select sysyem tick clock source                              	   */		
    466          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    467          int32_t DrvSYS_SetSysTickSource(uint8_t u8ClkSrcSel)
    468          {
   \                     DrvSYS_SetSysTickSource:
   \   00000000   00B5               PUSH     {LR}
    469          	if (u8ClkSrcSel > 7)
   \   00000002   C0B2               UXTB     R0,R0
   \   00000004   0828               CMP      R0,#+8
   \   00000006   01D3               BCC      ??DrvSYS_SetSysTickSource_0
    470          	{
    471          		return E_DRVSYS_ERR_ARGUMENT;
   \   00000008   ....               LDR      R0,??DataTable23_1  ;; 0xffff9603
   \   0000000A   0BE0               B        ??DrvSYS_SetSysTickSource_1
    472          	}
    473          	else
    474          	{
    475          		SYSCLK->CLKSEL0.STCLK_S = u8ClkSrcSel;
   \                     ??DrvSYS_SetSysTickSource_0:
   \   0000000C   ....               LDR      R1,??DataTable24  ;; 0x50000210
   \   0000000E   0968               LDR      R1,[R1, #+0]
   \   00000010   3822               MOVS     R2,#+56
   \   00000012   9143               BICS     R1,R1,R2
   \   00000014   C0B2               UXTB     R0,R0
   \   00000016   C000               LSLS     R0,R0,#+3
   \   00000018   3822               MOVS     R2,#+56
   \   0000001A   0240               ANDS     R2,R2,R0
   \   0000001C   0A43               ORRS     R2,R2,R1
   \   0000001E   ....               LDR      R0,??DataTable24  ;; 0x50000210
   \   00000020   0260               STR      R2,[R0, #+0]
    476          	}
    477          	return 0;
   \   00000022   0020               MOVS     R0,#+0
   \                     ??DrvSYS_SetSysTickSource_1:
   \   00000024   00BD               POP      {PC}             ;; return
    478          }
    479          
    480          /*---------------------------------------------------------------------------------------------------------*/
    481          /* Function: DrvSYS_SetIPClockSource	     		                                               	   	   */
    482          /*                                                                                                         */
    483          /* Parameters:                                                                                             */
    484          /*               eIpClkSrc	 - [in]     E_SYS_WDG_CLKSRC   / E_SYS_ADC_CLKSRC  / E_SYS_TMR0_CLKSRC	 	   */
    485          /*               	     		 		E_SYS_TMR1_CLKSRC  / E_SYS_TMR2_CLKSRC / E_SYS_TMR3_CLKSRC		   */
    486          /*               	     		 		E_SYS_UART_CLKSRC  / E_SYS_CAN_CLKSRC  / E_SYS_PWM01_CLKSRC		   */
    487          /*               	     		 		E_SYS_PWM23_CLKSRC / E_SYS_PWM45_CLKSRC/ E_SYS_PWM67_CLKSRC 	   */
    488          /*               	     		 		E_SYS_FRQDIV_CLKSRC/ E_SYS_I2S_CLKSRC 							   */
    489          /*                      																			       */
    490          /*               u8ClkSrcSel - [in]    Corresponding clock source                     	 				   */
    491          /*                     		                           	   												   */
    492          /* Returns:                                                                                                */
    493          /*                 0:  Success																			   */
    494          /*               < 0:  Wrong value											                    		   */
    495          /*              					                                                           			   */
    496          /* Description:                                                                                            */
    497          /*               This function is used to select IP clock source	       		   	   		   			   */
    498          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    499          int32_t DrvSYS_SetIPClockSource(E_SYS_IP_CLKSRC eIpClkSrc, uint8_t u8ClkSrcSel)
    500          {
   \                     DrvSYS_SetIPClockSource:
   \   00000000   00B5               PUSH     {LR}
    501          	
    502          	switch(eIpClkSrc)
   \   00000002   C0B2               UXTB     R0,R0
   \   00000004   0028               CMP      R0,#+0
   \   00000006   30D0               BEQ      ??DrvSYS_SetIPClockSource_0
   \   00000008   0228               CMP      R0,#+2
   \   0000000A   16D0               BEQ      ??DrvSYS_SetIPClockSource_1
   \   0000000C   39D3               BCC      ??DrvSYS_SetIPClockSource_2
   \   0000000E   0428               CMP      R0,#+4
   \   00000010   43D0               BEQ      ??DrvSYS_SetIPClockSource_3
   \   00000012   1FD3               BCC      ??DrvSYS_SetIPClockSource_4
   \   00000014   0628               CMP      R0,#+6
   \   00000016   57D0               BEQ      ??DrvSYS_SetIPClockSource_5
   \   00000018   49D3               BCC      ??DrvSYS_SetIPClockSource_6
   \   0000001A   0828               CMP      R0,#+8
   \   0000001C   6ED0               BEQ      ??DrvSYS_SetIPClockSource_7
   \   0000001E   60D3               BCC      ??DrvSYS_SetIPClockSource_8
   \   00000020   0A28               CMP      R0,#+10
   \   00000022   00D1               BNE      .+4
   \   00000024   84E0               B        ??DrvSYS_SetIPClockSource_9
   \   00000026   76D3               BCC      ??DrvSYS_SetIPClockSource_10
   \   00000028   0C28               CMP      R0,#+12
   \   0000002A   00D1               BNE      .+4
   \   0000002C   9AE0               B        ??DrvSYS_SetIPClockSource_11
   \   0000002E   00D2               BCS      .+4
   \   00000030   8BE0               B        ??DrvSYS_SetIPClockSource_12
   \   00000032   0D28               CMP      R0,#+13
   \   00000034   00D1               BNE      .+4
   \   00000036   A1E0               B        ??DrvSYS_SetIPClockSource_13
   \   00000038   ABE0               B        ??DrvSYS_SetIPClockSource_14
    503          	{
    504          		case E_SYS_FRQDIV_CLKSRC:  
    505          			SYSCLK->CLKSEL2.FRQDIV_S = u8ClkSrcSel;
   \                     ??DrvSYS_SetIPClockSource_1:
   \   0000003A   ....               LDR      R0,??DataTable25  ;; 0x5000021c
   \   0000003C   0068               LDR      R0,[R0, #+0]
   \   0000003E   0C22               MOVS     R2,#+12
   \   00000040   9043               BICS     R0,R0,R2
   \   00000042   C9B2               UXTB     R1,R1
   \   00000044   8900               LSLS     R1,R1,#+2
   \   00000046   0C22               MOVS     R2,#+12
   \   00000048   0A40               ANDS     R2,R2,R1
   \   0000004A   0243               ORRS     R2,R2,R0
   \   0000004C   ....               LDR      R0,??DataTable25  ;; 0x5000021c
   \   0000004E   0260               STR      R2,[R0, #+0]
    506          			break;
    507          		case E_SYS_I2S_CLKSRC:
    508          			SYSCLK->CLKSEL2.I2S_S = u8ClkSrcSel;
    509          			break;
    510          		case E_SYS_PWM67_CLKSRC:  
    511          			SYSCLK->CLKSEL2.PWM67_S = u8ClkSrcSel;
    512          			break;
    513          		case E_SYS_PWM45_CLKSRC:
    514          			SYSCLK->CLKSEL2.PWM45_S = u8ClkSrcSel;
    515          			break;
    516          		case E_SYS_PWM23_CLKSRC:  
    517          			SYSCLK->CLKSEL1.PWM23_S = u8ClkSrcSel;
    518          			break;
    519          		case E_SYS_PWM01_CLKSRC:
    520          			SYSCLK->CLKSEL1.PWM01_S = u8ClkSrcSel;
    521          			break;
    522          		case E_SYS_CAN_CLKSRC:
    523          		    SYSCLK->CLKSEL1.CAN_S = u8ClkSrcSel;
    524          			break;
    525          		case E_SYS_UART_CLKSRC:
    526          		    SYSCLK->CLKSEL1.UART_S = u8ClkSrcSel;
    527          			break;
    528          		case E_SYS_TMR3_CLKSRC:
    529          		    SYSCLK->CLKSEL1.TMR3_S = u8ClkSrcSel;
    530          			break;				
    531          		case E_SYS_TMR2_CLKSRC:
    532          		    SYSCLK->CLKSEL1.TMR2_S = u8ClkSrcSel;
    533          			break;				
    534          		case E_SYS_TMR1_CLKSRC:
    535          		    SYSCLK->CLKSEL1.TMR1_S = u8ClkSrcSel;
    536          			break;				
    537          		case E_SYS_TMR0_CLKSRC:
    538          		    SYSCLK->CLKSEL1.TMR0_S = u8ClkSrcSel;
    539          			break;				
    540          		case E_SYS_ADC_CLKSRC:
    541          		    SYSCLK->CLKSEL1.ADC_S = u8ClkSrcSel;
    542          			break;				
    543          		case E_SYS_WDG_CLKSRC:
    544          		    SYSCLK->CLKSEL1.WDG_S = u8ClkSrcSel;
    545          			break;				
    546          		default:
    547          			return E_DRVSYS_ERR_IPSRC;
    548          	}
    549          	
    550          	return E_SUCCESS;
   \                     ??DrvSYS_SetIPClockSource_15:
   \   00000050   0020               MOVS     R0,#+0
   \                     ??DrvSYS_SetIPClockSource_16:
   \   00000052   00BD               POP      {PC}             ;; return
   \                     ??DrvSYS_SetIPClockSource_4:
   \   00000054   ....               LDR      R0,??DataTable25  ;; 0x5000021c
   \   00000056   0068               LDR      R0,[R0, #+0]
   \   00000058   0322               MOVS     R2,#+3
   \   0000005A   9043               BICS     R0,R0,R2
   \   0000005C   C9B2               UXTB     R1,R1
   \   0000005E   8907               LSLS     R1,R1,#+30       ;; ZeroExtS R1,R1,#+30,#+30
   \   00000060   890F               LSRS     R1,R1,#+30
   \   00000062   0143               ORRS     R1,R1,R0
   \   00000064   ....               LDR      R0,??DataTable25  ;; 0x5000021c
   \   00000066   0160               STR      R1,[R0, #+0]
   \   00000068   F2E7               B        ??DrvSYS_SetIPClockSource_15
   \                     ??DrvSYS_SetIPClockSource_0:
   \   0000006A   ....               LDR      R0,??DataTable25  ;; 0x5000021c
   \   0000006C   0068               LDR      R0,[R0, #+0]
   \   0000006E   C022               MOVS     R2,#+192
   \   00000070   9043               BICS     R0,R0,R2
   \   00000072   C9B2               UXTB     R1,R1
   \   00000074   8901               LSLS     R1,R1,#+6
   \   00000076   C022               MOVS     R2,#+192
   \   00000078   0A40               ANDS     R2,R2,R1
   \   0000007A   0243               ORRS     R2,R2,R0
   \   0000007C   ....               LDR      R0,??DataTable25  ;; 0x5000021c
   \   0000007E   0260               STR      R2,[R0, #+0]
   \   00000080   E6E7               B        ??DrvSYS_SetIPClockSource_15
   \                     ??DrvSYS_SetIPClockSource_2:
   \   00000082   ....               LDR      R0,??DataTable25  ;; 0x5000021c
   \   00000084   0068               LDR      R0,[R0, #+0]
   \   00000086   3022               MOVS     R2,#+48
   \   00000088   9043               BICS     R0,R0,R2
   \   0000008A   C9B2               UXTB     R1,R1
   \   0000008C   0901               LSLS     R1,R1,#+4
   \   0000008E   3022               MOVS     R2,#+48
   \   00000090   0A40               ANDS     R2,R2,R1
   \   00000092   0243               ORRS     R2,R2,R0
   \   00000094   ....               LDR      R0,??DataTable25  ;; 0x5000021c
   \   00000096   0260               STR      R2,[R0, #+0]
   \   00000098   DAE7               B        ??DrvSYS_SetIPClockSource_15
   \                     ??DrvSYS_SetIPClockSource_3:
   \   0000009A   ....               LDR      R0,??DataTable29  ;; 0x50000214
   \   0000009C   0068               LDR      R0,[R0, #+0]
   \   0000009E   8000               LSLS     R0,R0,#+2        ;; ZeroExtS R0,R0,#+2,#+2
   \   000000A0   8008               LSRS     R0,R0,#+2
   \   000000A2   C9B2               UXTB     R1,R1
   \   000000A4   8907               LSLS     R1,R1,#+30
   \   000000A6   0143               ORRS     R1,R1,R0
   \   000000A8   ....               LDR      R0,??DataTable29  ;; 0x50000214
   \   000000AA   0160               STR      R1,[R0, #+0]
   \   000000AC   D0E7               B        ??DrvSYS_SetIPClockSource_15
   \                     ??DrvSYS_SetIPClockSource_6:
   \   000000AE   ....               LDR      R0,??DataTable29  ;; 0x50000214
   \   000000B0   0068               LDR      R0,[R0, #+0]
   \   000000B2   ....               LDR      R2,??DataTable29_1  ;; 0xcfffffff
   \   000000B4   0240               ANDS     R2,R2,R0
   \   000000B6   C9B2               UXTB     R1,R1
   \   000000B8   0807               LSLS     R0,R1,#+28
   \   000000BA   C021               MOVS     R1,#+192
   \   000000BC   8905               LSLS     R1,R1,#+22       ;; #+805306368
   \   000000BE   0140               ANDS     R1,R1,R0
   \   000000C0   1143               ORRS     R1,R1,R2
   \   000000C2   ....               LDR      R0,??DataTable29  ;; 0x50000214
   \   000000C4   0160               STR      R1,[R0, #+0]
   \   000000C6   C3E7               B        ??DrvSYS_SetIPClockSource_15
   \                     ??DrvSYS_SetIPClockSource_5:
   \   000000C8   ....               LDR      R0,??DataTable29  ;; 0x50000214
   \   000000CA   0068               LDR      R0,[R0, #+0]
   \   000000CC   ....               LDR      R2,??DataTable29_2  ;; 0xf3ffffff
   \   000000CE   0240               ANDS     R2,R2,R0
   \   000000D0   C9B2               UXTB     R1,R1
   \   000000D2   8806               LSLS     R0,R1,#+26
   \   000000D4   C021               MOVS     R1,#+192
   \   000000D6   0905               LSLS     R1,R1,#+20       ;; #+201326592
   \   000000D8   0140               ANDS     R1,R1,R0
   \   000000DA   1143               ORRS     R1,R1,R2
   \   000000DC   ....               LDR      R0,??DataTable29  ;; 0x50000214
   \   000000DE   0160               STR      R1,[R0, #+0]
   \   000000E0   B6E7               B        ??DrvSYS_SetIPClockSource_15
   \                     ??DrvSYS_SetIPClockSource_8:
   \   000000E2   ....               LDR      R0,??DataTable29  ;; 0x50000214
   \   000000E4   0068               LDR      R0,[R0, #+0]
   \   000000E6   ....               LDR      R2,??DataTable30  ;; 0xfcffffff
   \   000000E8   0240               ANDS     R2,R2,R0
   \   000000EA   C9B2               UXTB     R1,R1
   \   000000EC   0806               LSLS     R0,R1,#+24
   \   000000EE   C021               MOVS     R1,#+192
   \   000000F0   8904               LSLS     R1,R1,#+18       ;; #+50331648
   \   000000F2   0140               ANDS     R1,R1,R0
   \   000000F4   1143               ORRS     R1,R1,R2
   \   000000F6   ....               LDR      R0,??DataTable29  ;; 0x50000214
   \   000000F8   0160               STR      R1,[R0, #+0]
   \   000000FA   A9E7               B        ??DrvSYS_SetIPClockSource_15
   \                     ??DrvSYS_SetIPClockSource_7:
   \   000000FC   ....               LDR      R0,??DataTable29  ;; 0x50000214
   \   000000FE   0068               LDR      R0,[R0, #+0]
   \   00000100   ....               LDR      R2,??DataTable31  ;; 0xff8fffff
   \   00000102   0240               ANDS     R2,R2,R0
   \   00000104   C9B2               UXTB     R1,R1
   \   00000106   0805               LSLS     R0,R1,#+20
   \   00000108   E021               MOVS     R1,#+224
   \   0000010A   C903               LSLS     R1,R1,#+15       ;; #+7340032
   \   0000010C   0140               ANDS     R1,R1,R0
   \   0000010E   1143               ORRS     R1,R1,R2
   \   00000110   ....               LDR      R0,??DataTable29  ;; 0x50000214
   \   00000112   0160               STR      R1,[R0, #+0]
   \   00000114   9CE7               B        ??DrvSYS_SetIPClockSource_15
   \                     ??DrvSYS_SetIPClockSource_10:
   \   00000116   ....               LDR      R0,??DataTable29  ;; 0x50000214
   \   00000118   0068               LDR      R0,[R0, #+0]
   \   0000011A   ....               LDR      R2,??DataTable31_1  ;; 0xfff8ffff
   \   0000011C   0240               ANDS     R2,R2,R0
   \   0000011E   C9B2               UXTB     R1,R1
   \   00000120   0804               LSLS     R0,R1,#+16
   \   00000122   E021               MOVS     R1,#+224
   \   00000124   C902               LSLS     R1,R1,#+11       ;; #+458752
   \   00000126   0140               ANDS     R1,R1,R0
   \   00000128   1143               ORRS     R1,R1,R2
   \   0000012A   ....               LDR      R0,??DataTable29  ;; 0x50000214
   \   0000012C   0160               STR      R1,[R0, #+0]
   \   0000012E   8FE7               B        ??DrvSYS_SetIPClockSource_15
   \                     ??DrvSYS_SetIPClockSource_9:
   \   00000130   ....               LDR      R0,??DataTable29  ;; 0x50000214
   \   00000132   0068               LDR      R0,[R0, #+0]
   \   00000134   ....               LDR      R2,??DataTable32  ;; 0xffff8fff
   \   00000136   0240               ANDS     R2,R2,R0
   \   00000138   C9B2               UXTB     R1,R1
   \   0000013A   0803               LSLS     R0,R1,#+12
   \   0000013C   E021               MOVS     R1,#+224
   \   0000013E   C901               LSLS     R1,R1,#+7        ;; #+28672
   \   00000140   0140               ANDS     R1,R1,R0
   \   00000142   1143               ORRS     R1,R1,R2
   \   00000144   ....               LDR      R0,??DataTable29  ;; 0x50000214
   \   00000146   0160               STR      R1,[R0, #+0]
   \   00000148   82E7               B        ??DrvSYS_SetIPClockSource_15
   \                     ??DrvSYS_SetIPClockSource_12:
   \   0000014A   ....               LDR      R0,??DataTable29  ;; 0x50000214
   \   0000014C   0068               LDR      R0,[R0, #+0]
   \   0000014E   ....               LDR      R2,??DataTable32_1  ;; 0xfffff8ff
   \   00000150   0240               ANDS     R2,R2,R0
   \   00000152   C9B2               UXTB     R1,R1
   \   00000154   0802               LSLS     R0,R1,#+8
   \   00000156   E021               MOVS     R1,#+224
   \   00000158   C900               LSLS     R1,R1,#+3        ;; #+1792
   \   0000015A   0140               ANDS     R1,R1,R0
   \   0000015C   1143               ORRS     R1,R1,R2
   \   0000015E   ....               LDR      R0,??DataTable29  ;; 0x50000214
   \   00000160   0160               STR      R1,[R0, #+0]
   \   00000162   75E7               B        ??DrvSYS_SetIPClockSource_15
   \                     ??DrvSYS_SetIPClockSource_11:
   \   00000164   ....               LDR      R0,??DataTable29  ;; 0x50000214
   \   00000166   0068               LDR      R0,[R0, #+0]
   \   00000168   0C22               MOVS     R2,#+12
   \   0000016A   9043               BICS     R0,R0,R2
   \   0000016C   C9B2               UXTB     R1,R1
   \   0000016E   8900               LSLS     R1,R1,#+2
   \   00000170   0C22               MOVS     R2,#+12
   \   00000172   0A40               ANDS     R2,R2,R1
   \   00000174   0243               ORRS     R2,R2,R0
   \   00000176   ....               LDR      R0,??DataTable29  ;; 0x50000214
   \   00000178   0260               STR      R2,[R0, #+0]
   \   0000017A   69E7               B        ??DrvSYS_SetIPClockSource_15
   \                     ??DrvSYS_SetIPClockSource_13:
   \   0000017C   ....               LDR      R0,??DataTable29  ;; 0x50000214
   \   0000017E   0068               LDR      R0,[R0, #+0]
   \   00000180   0322               MOVS     R2,#+3
   \   00000182   9043               BICS     R0,R0,R2
   \   00000184   C9B2               UXTB     R1,R1
   \   00000186   8907               LSLS     R1,R1,#+30       ;; ZeroExtS R1,R1,#+30,#+30
   \   00000188   890F               LSRS     R1,R1,#+30
   \   0000018A   0143               ORRS     R1,R1,R0
   \   0000018C   ....               LDR      R0,??DataTable29  ;; 0x50000214
   \   0000018E   0160               STR      R1,[R0, #+0]
   \   00000190   5EE7               B        ??DrvSYS_SetIPClockSource_15
   \                     ??DrvSYS_SetIPClockSource_14:
   \   00000192   ....               LDR      R0,??DataTable33  ;; 0xffff9604
   \   00000194   5DE7               B        ??DrvSYS_SetIPClockSource_16
    551          }
    552          
    553          /*---------------------------------------------------------------------------------------------------------*/
    554          /* Function: DrvSYS_SetClockDivider 		                                               	   		   	   */
    555          /*                                                                                                         */
    556          /* Parameters:                                                                                             */
    557          /*           eIpDiv   - [in] E_SYS_ADC_DIV / E_SYS_CAN_DIV / E_SYS_UART_DIV / E_SYS_USB_DIV /E_SYS_HCLK_DIV*/
    558          /*           i32value - [in] 0 ~ 255 for ADC, 0 ~ 15 for other IP or HCLK  								   */
    559          /*                     		                           	   												   */
    560          /* Returns:                                                                                                */
    561          /*           0:  Success																			   	   */
    562          /*           < 0:  Wrong value											                    		       */
    563          /*              					                                                           			   */
    564          /* Description:                                                                                            */
    565          /*               This function is used to set IP divider number from the corresponding clock source	   	   */
    566          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    567          int32_t DrvSYS_SetClockDivider(E_SYS_IP_DIV eIpDiv , int32_t i32value)
    568          {
   \                     DrvSYS_SetClockDivider:
   \   00000000   00B5               PUSH     {LR}
    569          	if (eIpDiv == E_SYS_ADC_DIV)
   \   00000002   C0B2               UXTB     R0,R0
   \   00000004   0028               CMP      R0,#+0
   \   00000006   0CD1               BNE      ??DrvSYS_SetClockDivider_0
    570          	{
    571          	 	SYSCLK->CLKDIV.ADC_N = i32value;
   \   00000008   ....               LDR      R0,??DataTable32_2  ;; 0x50000218
   \   0000000A   0068               LDR      R0,[R0, #+0]
   \   0000000C   ....               LDR      R2,??DataTable32_3  ;; 0xff00ffff
   \   0000000E   0240               ANDS     R2,R2,R0
   \   00000010   0804               LSLS     R0,R1,#+16
   \   00000012   FF21               MOVS     R1,#+255
   \   00000014   0904               LSLS     R1,R1,#+16       ;; #+16711680
   \   00000016   0140               ANDS     R1,R1,R0
   \   00000018   1143               ORRS     R1,R1,R2
   \   0000001A   ....               LDR      R0,??DataTable32_2  ;; 0x50000218
   \   0000001C   0160               STR      R1,[R0, #+0]
    572          	}
    573          	else if(eIpDiv == E_SYS_CAN_DIV)
    574          	{
    575          	 	SYSCLK->CLKDIV.CAN_N = i32value;
    576          	}
    577          	else if(eIpDiv == E_SYS_UART_DIV)
    578          	{
    579          	 	SYSCLK->CLKDIV.UART_N = i32value;
    580          	}
    581          	else if(eIpDiv == E_SYS_USB_DIV)
    582          	{
    583          	 	SYSCLK->CLKDIV.USB_N = i32value;
    584          	}
    585          	else if(eIpDiv == E_SYS_HCLK_DIV)
    586          	{
    587          	 	SYSCLK->CLKDIV.HCLK_N = i32value;
    588          	}
    589          	else
    590          		return E_DRVSYS_ERR_IPDIV;
    591          
    592          	return E_SUCCESS;
   \                     ??DrvSYS_SetClockDivider_1:
   \   0000001E   0020               MOVS     R0,#+0
   \                     ??DrvSYS_SetClockDivider_2:
   \   00000020   00BD               POP      {PC}             ;; return
   \                     ??DrvSYS_SetClockDivider_0:
   \   00000022   C0B2               UXTB     R0,R0
   \   00000024   0128               CMP      R0,#+1
   \   00000026   0BD1               BNE      ??DrvSYS_SetClockDivider_3
   \   00000028   ....               LDR      R0,??DataTable32_2  ;; 0x50000218
   \   0000002A   0068               LDR      R0,[R0, #+0]
   \   0000002C   ....               LDR      R2,??DataTable33_1  ;; 0xffff0fff
   \   0000002E   0240               ANDS     R2,R2,R0
   \   00000030   0803               LSLS     R0,R1,#+12
   \   00000032   F021               MOVS     R1,#+240
   \   00000034   0902               LSLS     R1,R1,#+8        ;; #+61440
   \   00000036   0140               ANDS     R1,R1,R0
   \   00000038   1143               ORRS     R1,R1,R2
   \   0000003A   ....               LDR      R0,??DataTable32_2  ;; 0x50000218
   \   0000003C   0160               STR      R1,[R0, #+0]
   \   0000003E   EEE7               B        ??DrvSYS_SetClockDivider_1
   \                     ??DrvSYS_SetClockDivider_3:
   \   00000040   C0B2               UXTB     R0,R0
   \   00000042   0228               CMP      R0,#+2
   \   00000044   0BD1               BNE      ??DrvSYS_SetClockDivider_4
   \   00000046   ....               LDR      R0,??DataTable32_2  ;; 0x50000218
   \   00000048   0068               LDR      R0,[R0, #+0]
   \   0000004A   ....               LDR      R2,??DataTable33_2  ;; 0xfffff0ff
   \   0000004C   0240               ANDS     R2,R2,R0
   \   0000004E   0802               LSLS     R0,R1,#+8
   \   00000050   F021               MOVS     R1,#+240
   \   00000052   0901               LSLS     R1,R1,#+4        ;; #+3840
   \   00000054   0140               ANDS     R1,R1,R0
   \   00000056   1143               ORRS     R1,R1,R2
   \   00000058   ....               LDR      R0,??DataTable32_2  ;; 0x50000218
   \   0000005A   0160               STR      R1,[R0, #+0]
   \   0000005C   DFE7               B        ??DrvSYS_SetClockDivider_1
   \                     ??DrvSYS_SetClockDivider_4:
   \   0000005E   C0B2               UXTB     R0,R0
   \   00000060   0328               CMP      R0,#+3
   \   00000062   0AD1               BNE      ??DrvSYS_SetClockDivider_5
   \   00000064   ....               LDR      R0,??DataTable32_2  ;; 0x50000218
   \   00000066   0068               LDR      R0,[R0, #+0]
   \   00000068   F022               MOVS     R2,#+240
   \   0000006A   9043               BICS     R0,R0,R2
   \   0000006C   0901               LSLS     R1,R1,#+4
   \   0000006E   F022               MOVS     R2,#+240
   \   00000070   0A40               ANDS     R2,R2,R1
   \   00000072   0243               ORRS     R2,R2,R0
   \   00000074   ....               LDR      R0,??DataTable32_2  ;; 0x50000218
   \   00000076   0260               STR      R2,[R0, #+0]
   \   00000078   D1E7               B        ??DrvSYS_SetClockDivider_1
   \                     ??DrvSYS_SetClockDivider_5:
   \   0000007A   C0B2               UXTB     R0,R0
   \   0000007C   0428               CMP      R0,#+4
   \   0000007E   09D1               BNE      ??DrvSYS_SetClockDivider_6
   \   00000080   ....               LDR      R0,??DataTable32_2  ;; 0x50000218
   \   00000082   0068               LDR      R0,[R0, #+0]
   \   00000084   0F22               MOVS     R2,#+15
   \   00000086   9043               BICS     R0,R0,R2
   \   00000088   0907               LSLS     R1,R1,#+28       ;; ZeroExtS R1,R1,#+28,#+28
   \   0000008A   090F               LSRS     R1,R1,#+28
   \   0000008C   0143               ORRS     R1,R1,R0
   \   0000008E   ....               LDR      R0,??DataTable32_2  ;; 0x50000218
   \   00000090   0160               STR      R1,[R0, #+0]
   \   00000092   C4E7               B        ??DrvSYS_SetClockDivider_1
   \                     ??DrvSYS_SetClockDivider_6:
   \   00000094   ....               LDR      R0,??DataTable34  ;; 0xffff9605
   \   00000096   C3E7               B        ??DrvSYS_SetClockDivider_2
    593          	
    594          }
    595          
    596          
    597          /*---------------------------------------------------------------------------------------------------------*/
    598          /* Function: DrvSYS_SetOscCtrl	     		                                               	   	   		   */
    599          /*                                                                                                         */
    600          /* Parameters:                                                                                             */
    601          /*               eOscCtrl	 - [in]    E_SYS_XTL12M  / E_SYS_XTL32K  / E_SYS_OSC22M / E_SYS_OSC10K	 	   */
    602          /*               i32Enable   - [in]    1: Enable / 0: Disable                     	 					   */
    603          /*                     		                           	   												   */
    604          /* Returns:                                                                                                */
    605          /*                 0:  Success																			   */
    606          /*               < 0:  Wrong value											                    		   */
    607          /*              					                                                           			   */
    608          /* Description:                                                                                            */
    609          /*               This function is used to enable/disable Oscillator	       		   	   		   			   */
    610          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    611          int32_t DrvSYS_SetOscCtrl(E_SYS_OSC_CTRL eOscCtrl, int32_t i32Enable)
    612          {	
   \                     DrvSYS_SetOscCtrl:
   \   00000000   00B5               PUSH     {LR}
    613          	switch(eOscCtrl)
   \   00000002   C0B2               UXTB     R0,R0
   \   00000004   0028               CMP      R0,#+0
   \   00000006   05D0               BEQ      ??DrvSYS_SetOscCtrl_0
   \   00000008   0228               CMP      R0,#+2
   \   0000000A   1AD0               BEQ      ??DrvSYS_SetOscCtrl_1
   \   0000000C   0ED3               BCC      ??DrvSYS_SetOscCtrl_2
   \   0000000E   0328               CMP      R0,#+3
   \   00000010   22D0               BEQ      ??DrvSYS_SetOscCtrl_3
   \   00000012   2CE0               B        ??DrvSYS_SetOscCtrl_4
    614          	{
    615          		case E_SYS_XTL12M:  
    616          			SYSCLK->PWRCON.XTL12M_EN = i32Enable;
   \                     ??DrvSYS_SetOscCtrl_0:
   \   00000014   ....               LDR      R0,??DataTable34_1  ;; 0x50000200
   \   00000016   0068               LDR      R0,[R0, #+0]
   \   00000018   0122               MOVS     R2,#+1
   \   0000001A   9043               BICS     R0,R0,R2
   \   0000001C   0A00               MOVS     R2,R1
   \   0000001E   D207               LSLS     R2,R2,#+31       ;; ZeroExtS R2,R2,#+31,#+31
   \   00000020   D20F               LSRS     R2,R2,#+31
   \   00000022   0243               ORRS     R2,R2,R0
   \   00000024   ....               LDR      R0,??DataTable34_1  ;; 0x50000200
   \   00000026   0260               STR      R2,[R0, #+0]
    617          			break;
    618          		case E_SYS_XTL32K:
    619          			SYSCLK->PWRCON.XTL32K_EN = i32Enable;
    620          			break;
    621          		case E_SYS_OSC22M:
    622          		    SYSCLK->PWRCON.OSC22M_EN = i32Enable;
    623          			break;
    624          		case E_SYS_OSC10K:
    625          		    SYSCLK->PWRCON.OSC10K_EN = i32Enable;
    626          			break;				
    627          		default:
    628          			return E_DRVSYS_ERR_ARGUMENT;
    629          	}
    630          	
    631          	return E_SUCCESS;
   \                     ??DrvSYS_SetOscCtrl_5:
   \   00000028   0020               MOVS     R0,#+0
   \                     ??DrvSYS_SetOscCtrl_6:
   \   0000002A   00BD               POP      {PC}             ;; return
   \                     ??DrvSYS_SetOscCtrl_2:
   \   0000002C   ....               LDR      R0,??DataTable34_1  ;; 0x50000200
   \   0000002E   0068               LDR      R0,[R0, #+0]
   \   00000030   0222               MOVS     R2,#+2
   \   00000032   9043               BICS     R0,R0,R2
   \   00000034   4900               LSLS     R1,R1,#+1
   \   00000036   0222               MOVS     R2,#+2
   \   00000038   0A40               ANDS     R2,R2,R1
   \   0000003A   0243               ORRS     R2,R2,R0
   \   0000003C   ....               LDR      R0,??DataTable34_1  ;; 0x50000200
   \   0000003E   0260               STR      R2,[R0, #+0]
   \   00000040   F2E7               B        ??DrvSYS_SetOscCtrl_5
   \                     ??DrvSYS_SetOscCtrl_1:
   \   00000042   ....               LDR      R0,??DataTable34_1  ;; 0x50000200
   \   00000044   0068               LDR      R0,[R0, #+0]
   \   00000046   0422               MOVS     R2,#+4
   \   00000048   9043               BICS     R0,R0,R2
   \   0000004A   8900               LSLS     R1,R1,#+2
   \   0000004C   0422               MOVS     R2,#+4
   \   0000004E   0A40               ANDS     R2,R2,R1
   \   00000050   0243               ORRS     R2,R2,R0
   \   00000052   ....               LDR      R0,??DataTable34_1  ;; 0x50000200
   \   00000054   0260               STR      R2,[R0, #+0]
   \   00000056   E7E7               B        ??DrvSYS_SetOscCtrl_5
   \                     ??DrvSYS_SetOscCtrl_3:
   \   00000058   ....               LDR      R0,??DataTable34_1  ;; 0x50000200
   \   0000005A   0068               LDR      R0,[R0, #+0]
   \   0000005C   0822               MOVS     R2,#+8
   \   0000005E   9043               BICS     R0,R0,R2
   \   00000060   C900               LSLS     R1,R1,#+3
   \   00000062   0822               MOVS     R2,#+8
   \   00000064   0A40               ANDS     R2,R2,R1
   \   00000066   0243               ORRS     R2,R2,R0
   \   00000068   ....               LDR      R0,??DataTable34_1  ;; 0x50000200
   \   0000006A   0260               STR      R2,[R0, #+0]
   \   0000006C   DCE7               B        ??DrvSYS_SetOscCtrl_5
   \                     ??DrvSYS_SetOscCtrl_4:
   \   0000006E   ....               LDR      R0,??DataTable35  ;; 0xffff9603
   \   00000070   DBE7               B        ??DrvSYS_SetOscCtrl_6
    632          }
    633          
    634          /*---------------------------------------------------------------------------------------------------------*/
    635          /* Function:     <PWRWU_IRQHandler>                                                                          */
    636          /*                                                                                                         */
    637          /* Parameter:                                                                                              */
    638          /*               None                                                                                      */
    639          /* Returns:                                                                                                */
    640          /*               None                                                                                      */
    641          /*                                                                                                         */
    642          /* Description:                                                                                            */
    643          /*               ISR to handle Power Down Wake up interrupt event           		                                       */
    644          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    645          void PWRWU_IRQHandler(void)
    646          {
   \                     PWRWU_IRQHandler:
   \   00000000   80B5               PUSH     {R7,LR}
    647          	SYSCLK->PWRCON.PD_WU_STS = 1;
   \   00000002   ....               LDR      R0,??DataTable34_1  ;; 0x50000200
   \   00000004   0068               LDR      R0,[R0, #+0]
   \   00000006   4021               MOVS     R1,#+64
   \   00000008   0143               ORRS     R1,R1,R0
   \   0000000A   ....               LDR      R0,??DataTable34_1  ;; 0x50000200
   \   0000000C   0160               STR      R1,[R0, #+0]
    648          	if (PWRWU_callbackFn != NULL)
   \   0000000E   ....               LDR      R0,??DataTable35_1  ;; PWRWU_callbackFn
   \   00000010   0068               LDR      R0,[R0, #+0]
   \   00000012   0028               CMP      R0,#+0
   \   00000014   02D0               BEQ      ??PWRWU_IRQHandler_0
    649          		PWRWU_callbackFn();	
   \   00000016   ....               LDR      R0,??DataTable35_1  ;; PWRWU_callbackFn
   \   00000018   0068               LDR      R0,[R0, #+0]
   \   0000001A   8047               BLX      R0
    650          }
   \                     ??PWRWU_IRQHandler_0:
   \   0000001C   01BD               POP      {R0,PC}          ;; return
    651          
    652          /*---------------------------------------------------------------------------------------------------------*/
    653          /* Function: DrvSYS_EnablePWRWUInt				                                               	   		   */
    654          /*                                                                                                         */
    655          /* Parameters:                                                                                             */
    656          /*               i32Enable	    - [in]	1: Enable Power dowm Wake up interrup 							   */
    657          /*									  	0: Disable Power dowm Wake up interrup	   						   */
    658          /*               pdwucallbackFn	- [in]	Power Down Wake Up Call back function  						   	   */
    659          /*               i32enWUDelay	- [in]	1: Enable 64 clock cycle delay 							  		   */
    660          /*									  	0: Disable 64 clock cycle delay	   						   		   */
    661          /*                     		                           	   												   */
    662          /* Returns:                                                                                                */
    663          /*               None																		   	   		   */
    664          /*              					                                                           			   */
    665          /* Description:                                                                                            */
    666          /*               Enable or disable PD_WU interrupt function, and install call back function, and 		   */
    667          /*				 enable 64 clock cycle delay to wait oscillator clock stable.          		   	   		   */
    668          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    669          void DrvSYS_EnablePWRWUInt(int32_t i32Enable, PWRWU_CALLBACK pdwucallbackFn, int32_t i32enWUDelay)
    670          {
   \                     DrvSYS_EnablePWRWUInt:
   \   00000000   38B5               PUSH     {R3-R5,LR}
    671          	SYSCLK->PWRCON.WINT_EN = i32Enable;
   \   00000002   ....               LDR      R3,??DataTable34_1  ;; 0x50000200
   \   00000004   1B68               LDR      R3,[R3, #+0]
   \   00000006   2024               MOVS     R4,#+32
   \   00000008   A343               BICS     R3,R3,R4
   \   0000000A   4401               LSLS     R4,R0,#+5
   \   0000000C   2025               MOVS     R5,#+32
   \   0000000E   2540               ANDS     R5,R5,R4
   \   00000010   1D43               ORRS     R5,R5,R3
   \   00000012   ....               LDR      R3,??DataTable34_1  ;; 0x50000200
   \   00000014   1D60               STR      R5,[R3, #+0]
    672          	
    673          	if (i32Enable)
   \   00000016   0028               CMP      R0,#+0
   \   00000018   0FD0               BEQ      ??DrvSYS_EnablePWRWUInt_0
    674          	{		
    675          		SYSCLK->PWRCON.WU_DLY = i32enWUDelay;
   \   0000001A   ....               LDR      R0,??DataTable34_1  ;; 0x50000200
   \   0000001C   0068               LDR      R0,[R0, #+0]
   \   0000001E   1023               MOVS     R3,#+16
   \   00000020   9843               BICS     R0,R0,R3
   \   00000022   1201               LSLS     R2,R2,#+4
   \   00000024   1023               MOVS     R3,#+16
   \   00000026   1340               ANDS     R3,R3,R2
   \   00000028   0343               ORRS     R3,R3,R0
   \   0000002A   ....               LDR      R0,??DataTable34_1  ;; 0x50000200
   \   0000002C   0360               STR      R3,[R0, #+0]
    676          		PWRWU_callbackFn = pdwucallbackFn;
   \   0000002E   ....               LDR      R0,??DataTable35_1  ;; PWRWU_callbackFn
   \   00000030   0160               STR      R1,[R0, #+0]
    677          		NVIC_EnableIRQ(PWRWU_IRQn);
   \   00000032   1C20               MOVS     R0,#+28
   \   00000034   ........           BL       NVIC_EnableIRQ
   \   00000038   0BE0               B        ??DrvSYS_EnablePWRWUInt_1
    678          	}
    679          	else
    680          	{ 
    681          		SYSCLK->PWRCON.WU_DLY = 0;
   \                     ??DrvSYS_EnablePWRWUInt_0:
   \   0000003A   ....               LDR      R0,??DataTable34_1  ;; 0x50000200
   \   0000003C   0068               LDR      R0,[R0, #+0]
   \   0000003E   1021               MOVS     R1,#+16
   \   00000040   8843               BICS     R0,R0,R1
   \   00000042   ....               LDR      R1,??DataTable34_1  ;; 0x50000200
   \   00000044   0860               STR      R0,[R1, #+0]
    682          		PWRWU_callbackFn = NULL;
   \   00000046   ....               LDR      R0,??DataTable35_1  ;; PWRWU_callbackFn
   \   00000048   0021               MOVS     R1,#+0
   \   0000004A   0160               STR      R1,[R0, #+0]
    683          		NVIC_DisableIRQ(PWRWU_IRQn);
   \   0000004C   1C20               MOVS     R0,#+28
   \   0000004E   ........           BL       NVIC_DisableIRQ
    684          	}	
    685          }
   \                     ??DrvSYS_EnablePWRWUInt_1:
   \   00000052   31BD               POP      {R0,R4,R5,PC}    ;; return
    686          
    687          /*---------------------------------------------------------------------------------------------------------*/
    688          /* Function: DrvSYS_EnablePowerDown				                                               	   		   */
    689          /*                                                                                                         */
    690          /* Parameters:                                                                                             */
    691          /*               i32Enable	- [in]	 1: Enable / 0: Disable 						   					   */
    692          /*                     		                           	   												   */
    693          /* Returns:                                                                                                */
    694          /*               None																		   	   		   */
    695          /*              					                                                           			   */
    696          /* Description:                                                                                            */
    697          /*               Enable or active power down function                      		   	   		   			   */
    698          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    699          void DrvSYS_EnablePowerDown(int32_t i32Enable)
    700          {
    701          	SYSCLK->PWRCON.PWR_DOWN = i32Enable;
   \                     DrvSYS_EnablePowerDown:
   \   00000000   ....               LDR      R1,??DataTable34_1  ;; 0x50000200
   \   00000002   0968               LDR      R1,[R1, #+0]
   \   00000004   8022               MOVS     R2,#+128
   \   00000006   9143               BICS     R1,R1,R2
   \   00000008   C001               LSLS     R0,R0,#+7
   \   0000000A   8022               MOVS     R2,#+128
   \   0000000C   0240               ANDS     R2,R2,R0
   \   0000000E   0A43               ORRS     R2,R2,R1
   \   00000010   ....               LDR      R0,??DataTable34_1  ;; 0x50000200
   \   00000012   0260               STR      R2,[R0, #+0]
    702          }
   \   00000014   7047               BX       LR               ;; return
    703          
    704          /*---------------------------------------------------------------------------------------------------------*/
    705          /* Function: DrvSYS_SetPowerDownWaitCPU				                                               	   	   */
    706          /*                                                                                                         */
    707          /* Parameters:                                                                                             */
    708          /*               i32Enable	- [in]  1: Enter power down mode when PWR_DOWN and CPU runs WFE/WFI instruction*/
    709          /*               			 		0: Enter power down mode when PWR_DOWN is set 						   */
    710          /*                     		                           	   												   */
    711          /* Returns:                                                                                                */
    712          /*               None																		   	   		   */
    713          /*              					                                                           			   */
    714          /* Description:                                                                                            */
    715          /*               This function is used to control power down entry condition         		   			   */
    716          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    717          void DrvSYS_SetPowerDownWaitCPU(int32_t i32Enable)
    718          {
    719          	SYSCLK->PWRCON.PD_WAIT_CPU = i32Enable;
   \                     DrvSYS_SetPowerDownWaitCPU:
   \   00000000   ....               LDR      R1,??DataTable34_1  ;; 0x50000200
   \   00000002   0968               LDR      R1,[R1, #+0]
   \   00000004   ....               LDR      R2,??DataTable36  ;; 0xfffffeff
   \   00000006   0A40               ANDS     R2,R2,R1
   \   00000008   0002               LSLS     R0,R0,#+8
   \   0000000A   8021               MOVS     R1,#+128
   \   0000000C   4900               LSLS     R1,R1,#+1        ;; #+256
   \   0000000E   0140               ANDS     R1,R1,R0
   \   00000010   1143               ORRS     R1,R1,R2
   \   00000012   ....               LDR      R0,??DataTable34_1  ;; 0x50000200
   \   00000014   0160               STR      R1,[R0, #+0]
    720          }
   \   00000016   7047               BX       LR               ;; return
    721          
    722          
    723          /*---------------------------------------------------------------------------------------------------------*/
    724          /* Function: DrvSYS_SetPllSrc				                                               	   		   	   */
    725          /*                                                                                                         */
    726          /* Parameters:                                                                                             */
    727          /*           u8ClkSrcSel       - [in] 	E_DRVSYS_EXT_12M: External 12M clock               				   */
    728          /*          							E_DRVSYS_INT_22M: Internal 22M clock               				   */
    729          /*              											                                        	   */
    730          /* Returns:                                                                                                */
    731          /*               None																					   */
    732          /*               							                                                               */
    733          /* Description:                                                                                            */
    734          /*               This function is used to select PLL clock source                                   	   */		
    735          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    736          void DrvSYS_SetPllSrc(E_DRVSYS_SRC_CLK ePllSrc)
    737          {
    738          	SYSCLK->PLLCON.PLL_SRC = ePllSrc;
   \                     DrvSYS_SetPllSrc:
   \   00000000   ....               LDR      R1,??DataTable36_1  ;; 0x50000220
   \   00000002   0968               LDR      R1,[R1, #+0]
   \   00000004   ....               LDR      R2,??DataTable36_2  ;; 0xfff7ffff
   \   00000006   0A40               ANDS     R2,R2,R1
   \   00000008   C0B2               UXTB     R0,R0
   \   0000000A   C004               LSLS     R0,R0,#+19
   \   0000000C   8021               MOVS     R1,#+128
   \   0000000E   0903               LSLS     R1,R1,#+12       ;; #+524288
   \   00000010   0140               ANDS     R1,R1,R0
   \   00000012   1143               ORRS     R1,R1,R2
   \   00000014   ....               LDR      R0,??DataTable36_1  ;; 0x50000220
   \   00000016   0160               STR      R1,[R0, #+0]
    739          }
   \   00000018   7047               BX       LR               ;; return
    740          
    741          /*---------------------------------------------------------------------------------------------------------*/
    742          /* Function: DrvSYS_SetPLLPowerDown 		                                               	   		   	   */
    743          /*                                                                                                         */
    744          /* Parameters:                                                                                             */
    745          /*               i32Enable	 - [in]		  1: Power down mode / 0: Normal mode 							   */
    746          /*                     		                           	   												   */
    747          /* Returns:                                                                                                */
    748          /*               None																		   	   		   */
    749          /*              					                                                           			   */
    750          /* Description:                                                                                            */
    751          /*               Enable PLL power down function                           		   	   		   			   */
    752          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    753          void DrvSYS_SetPLLPowerDown(int32_t i32Enable)
    754          {
    755              SYSCLK->PLLCON.OE = i32Enable;
   \                     DrvSYS_SetPLLPowerDown:
   \   00000000   ....               LDR      R1,??DataTable36_1  ;; 0x50000220
   \   00000002   0968               LDR      R1,[R1, #+0]
   \   00000004   ....               LDR      R2,??DataTable36_3  ;; 0xfffbffff
   \   00000006   0A40               ANDS     R2,R2,R1
   \   00000008   8104               LSLS     R1,R0,#+18
   \   0000000A   8023               MOVS     R3,#+128
   \   0000000C   DB02               LSLS     R3,R3,#+11       ;; #+262144
   \   0000000E   0B40               ANDS     R3,R3,R1
   \   00000010   1343               ORRS     R3,R3,R2
   \   00000012   ....               LDR      R1,??DataTable36_1  ;; 0x50000220
   \   00000014   0B60               STR      R3,[R1, #+0]
    756          	SYSCLK->PLLCON.PD = i32Enable;
   \   00000016   ....               LDR      R1,??DataTable36_1  ;; 0x50000220
   \   00000018   0968               LDR      R1,[R1, #+0]
   \   0000001A   ....               LDR      R2,??DataTable36_4  ;; 0xfffeffff
   \   0000001C   0A40               ANDS     R2,R2,R1
   \   0000001E   0004               LSLS     R0,R0,#+16
   \   00000020   8021               MOVS     R1,#+128
   \   00000022   4902               LSLS     R1,R1,#+9        ;; #+65536
   \   00000024   0140               ANDS     R1,R1,R0
   \   00000026   1143               ORRS     R1,R1,R2
   \   00000028   ....               LDR      R0,??DataTable36_1  ;; 0x50000220
   \   0000002A   0160               STR      R1,[R0, #+0]
    757          }
   \   0000002C   7047               BX       LR               ;; return
    758          
    759          
    760          /*---------------------------------------------------------------------------------------------------------*/
    761          /* Function: DrvSYS_GetEXTClock                                                                            */
    762          /*                                                                                                         */
    763          /* Parameters:                                                                                             */
    764          /*      None                                                                                               */
    765          /*                                                                                                         */
    766          /* Returns:                                                                                                */
    767          /*      The external clock frequency.                                                                      */
    768          /*                                                                                                         */
    769          /* Description:                                                                                            */
    770          /*              Get external clock frequency. The clock UNIT is in kHz.                                    */
    771          /*                                                                                                         */
    772          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    773          uint32_t DrvSYS_GetEXTClock(void)
    774          {	
    775          	return s_u32ExtClockKHz;
   \                     DrvSYS_GetEXTClock:
   \   00000000   ....               LDR      R0,??DataTable36_5  ;; s_u32ExtClockKHz
   \   00000002   0068               LDR      R0,[R0, #+0]
   \   00000004   7047               BX       LR               ;; return
    776          }
    777          
    778          
    779          /*---------------------------------------------------------------------------------------------------------*/
    780          /* Function: DrvSYS_GetPllContent                                                                          */
    781          /*                                                                                                         */
    782          /* Parameters:                                                                                             */
    783          /*      u32ExtClockKHz - [in], The external clock frequency (kHz).                                         */
    784          /*      u32PllClockKHz - [in], The target PLL clock frequency (kHz).                                       */
    785          /*                                                                                                         */
    786          /* Returns:                                                                                                */
    787          /*      The PLL register setting for the target PLL clock frequency.                                       */
    788          /*                                                                                                         */
    789          /* Description:                                                                                            */
    790          /*      This function is used to calculate the nearest PLL frequency to fit the target PLL frequency       */
    791          /*      which is defined by u32PllClockKHz and return the relative PLL control register setting.           */
    792          /*                                                                                                         */
    793          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    794          uint32_t DrvSYS_GetPllContent(uint32_t u32ExtClockKHz, uint32_t u32PllClockKHz)
    795          {
   \                     DrvSYS_GetPllContent:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0600               MOVS     R6,R0
   \   00000004   0800               MOVS     R0,R1
    796          	uint32_t u32NR, u32NF;
    797          	uint32_t u32Register=0;
   \   00000006   0024               MOVS     R4,#+0
    798          
    799              u32PllClockKHz = u32PllClockKHz << 2;
   \   00000008   8000               LSLS     R0,R0,#+2
    800              
    801              u32NF = u32PllClockKHz / 1000;
   \   0000000A   FA21               MOVS     R1,#+250
   \   0000000C   8900               LSLS     R1,R1,#+2        ;; #+1000
   \   0000000E   ........           BL       __aeabi_uidiv
   \   00000012   0500               MOVS     R5,R0
    802              u32NR = u32ExtClockKHz / 1000;
   \   00000014   3000               MOVS     R0,R6
   \   00000016   FA21               MOVS     R1,#+250
   \   00000018   8900               LSLS     R1,R1,#+2        ;; #+1000
   \   0000001A   ........           BL       __aeabi_uidiv
    803             
    804              if (SYSCLK->PLLCON.PLL_SRC == 0)
   \   0000001E   ....               LDR      R1,??DataTable36_1  ;; 0x50000220
   \   00000020   0968               LDR      R1,[R1, #+0]
   \   00000022   8022               MOVS     R2,#+128
   \   00000024   1203               LSLS     R2,R2,#+12       ;; #+524288
   \   00000026   0A40               ANDS     R2,R2,R1
   \   00000028   1100               MOVS     R1,R2
   \   0000002A   C90C               LSRS     R1,R1,#+19
   \   0000002C   0029               CMP      R1,#+0
   \   0000002E   02D1               BNE      ??DrvSYS_GetPllContent_0
    805          	{
    806          		u32NR >>= 2;
   \   00000030   8008               LSRS     R0,R0,#+2
    807          		u32NF >>= 2;	
   \   00000032   AD08               LSRS     R5,R5,#+2
   \   00000034   01E0               B        ??DrvSYS_GetPllContent_1
    808          	}
    809          	else
    810          	{
    811          		u32NR >>= 1;
   \                     ??DrvSYS_GetPllContent_0:
   \   00000036   4008               LSRS     R0,R0,#+1
    812          		u32NF >>= 1;	
   \   00000038   6D08               LSRS     R5,R5,#+1
    813          	}
    814          		
    815          	u32Register = (0x03<<14)| ((u32NR - 2)<<9) | (u32NF - 2);
   \                     ??DrvSYS_GetPllContent_1:
   \   0000003A   801E               SUBS     R0,R0,#+2
   \   0000003C   4002               LSLS     R0,R0,#+9
   \   0000003E   AD1E               SUBS     R5,R5,#+2
   \   00000040   0543               ORRS     R5,R5,R0
   \   00000042   C024               MOVS     R4,#+192
   \   00000044   2402               LSLS     R4,R4,#+8        ;; #+49152
   \   00000046   2C43               ORRS     R4,R4,R5
    816          
    817              /* Return the nearest value */
    818          	return u32Register;
   \   00000048   2000               MOVS     R0,R4
   \   0000004A   70BD               POP      {R4-R6,PC}       ;; return
    819          }
    820          
    821          /*---------------------------------------------------------------------------------------------------------*/
    822          /* Function: DrvSYS_GetPLLClock                                                                            */
    823          /*                                                                                                         */
    824          /* Parameters:                                                                                             */
    825          /*      None                                                                                               */
    826          /*                                                                                                         */
    827          /* Returns:                                                                                                */
    828          /*      The PLL clock.                                                                                     */
    829          /*                                                                                                         */
    830          /* Description:                                                                                            */
    831          /*              Get PLL clock frquency. The clock UNIT is in kHz.                                          */
    832          /*                                                                                                         */
    833          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    834          uint32_t DrvSYS_GetPLLClock(void)
    835          {
   \                     DrvSYS_GetPLLClock:
   \   00000000   1FB5               PUSH     {R0-R4,LR}
    836          	uint32_t u32Freq =0, u32PLLSrc;
   \   00000002   0024               MOVS     R4,#+0
    837          	uint32_t au32Map[4] = {1, 2, 2, 4};
   \   00000004   6846               MOV      R0,SP
   \   00000006   ....               LDR      R1,??DataTable36_6  ;; `?<Constant {1, 2, 2, 4}>`
   \   00000008   1022               MOVS     R2,#+16
   \   0000000A   ........           BL       __aeabi_memcpy4
    838          
    839          	if (SYSCLK->PLLCON.PLL_SRC == 1)
   \   0000000E   ....               LDR      R0,??DataTable36_1  ;; 0x50000220
   \   00000010   0068               LDR      R0,[R0, #+0]
   \   00000012   8021               MOVS     R1,#+128
   \   00000014   0903               LSLS     R1,R1,#+12       ;; #+524288
   \   00000016   0140               ANDS     R1,R1,R0
   \   00000018   0800               MOVS     R0,R1
   \   0000001A   C00C               LSRS     R0,R0,#+19
   \   0000001C   0128               CMP      R0,#+1
   \   0000001E   01D1               BNE      ??DrvSYS_GetPLLClock_0
    840          	{
    841          		u32PLLSrc = 22000;	
   \   00000020   ....               LDR      R0,??DataTable36_7  ;; 0x55f0
   \   00000022   01E0               B        ??DrvSYS_GetPLLClock_1
    842          	}
    843          	else
    844          	{
    845          		u32PLLSrc = s_u32ExtClockKHz;
   \                     ??DrvSYS_GetPLLClock_0:
   \   00000024   ....               LDR      R0,??DataTable36_5  ;; s_u32ExtClockKHz
   \   00000026   0068               LDR      R0,[R0, #+0]
    846          	}
    847          
    848          	if (SYSCLK->PLLCON.PD ==1)	
   \                     ??DrvSYS_GetPLLClock_1:
   \   00000028   ....               LDR      R1,??DataTable36_1  ;; 0x50000220
   \   0000002A   0968               LDR      R1,[R1, #+0]
   \   0000002C   8022               MOVS     R2,#+128
   \   0000002E   5202               LSLS     R2,R2,#+9        ;; #+65536
   \   00000030   0A40               ANDS     R2,R2,R1
   \   00000032   1100               MOVS     R1,R2
   \   00000034   090C               LSRS     R1,R1,#+16
   \   00000036   0129               CMP      R1,#+1
   \   00000038   01D1               BNE      ??DrvSYS_GetPLLClock_2
    849          		u32Freq = 0;	
   \   0000003A   0024               MOVS     R4,#+0
   \   0000003C   1DE0               B        ??DrvSYS_GetPLLClock_3
    850          	else		
    851          		u32Freq = u32PLLSrc * (SYSCLK->PLLCON.FB_DV+2) / (SYSCLK->PLLCON.IN_DV+2) / au32Map[SYSCLK->PLLCON.OUT_DV];
   \                     ??DrvSYS_GetPLLClock_2:
   \   0000003E   ....               LDR      R1,??DataTable36_1  ;; 0x50000220
   \   00000040   0968               LDR      R1,[R1, #+0]
   \   00000042   C905               LSLS     R1,R1,#+23       ;; ZeroExtS R1,R1,#+23,#+23
   \   00000044   C90D               LSRS     R1,R1,#+23
   \   00000046   891C               ADDS     R1,R1,#+2
   \   00000048   4843               MULS     R0,R1,R0
   \   0000004A   ....               LDR      R1,??DataTable36_1  ;; 0x50000220
   \   0000004C   0968               LDR      R1,[R1, #+0]
   \   0000004E   F822               MOVS     R2,#+248
   \   00000050   9201               LSLS     R2,R2,#+6        ;; #+15872
   \   00000052   0A40               ANDS     R2,R2,R1
   \   00000054   1100               MOVS     R1,R2
   \   00000056   490A               LSRS     R1,R1,#+9
   \   00000058   891C               ADDS     R1,R1,#+2
   \   0000005A   ........           BL       __aeabi_uidiv
   \   0000005E   ....               LDR      R1,??DataTable36_1  ;; 0x50000220
   \   00000060   0968               LDR      R1,[R1, #+0]
   \   00000062   C022               MOVS     R2,#+192
   \   00000064   1202               LSLS     R2,R2,#+8        ;; #+49152
   \   00000066   0A40               ANDS     R2,R2,R1
   \   00000068   1100               MOVS     R1,R2
   \   0000006A   890B               LSRS     R1,R1,#+14
   \   0000006C   0422               MOVS     R2,#+4
   \   0000006E   5143               MULS     R1,R2,R1
   \   00000070   6A46               MOV      R2,SP
   \   00000072   5158               LDR      R1,[R2, R1]
   \   00000074   ........           BL       __aeabi_uidiv
   \   00000078   0400               MOVS     R4,R0
    852          
    853          	return u32Freq;
   \                     ??DrvSYS_GetPLLClock_3:
   \   0000007A   2000               MOVS     R0,R4
   \   0000007C   04B0               ADD      SP,SP,#+16
   \   0000007E   10BD               POP      {R4,PC}          ;; return
    854          }
    855          
    856          /*---------------------------------------------------------------------------------------------------------*/
    857          /* Function: DrvSYS_GetHCLK                                                                            	   */
    858          /*                                                                                                         */
    859          /* Parameters:                                                                                             */
    860          /*      None                                                                                               */
    861          /*                                                                                                         */
    862          /* Returns:                                                                                                */
    863          /*      HCLK clock frequency in kHz.                                                                       */
    864          /*                                                                                                         */
    865          /* Description:                                                                                            */
    866          /*      Get HCLK clock and the UNIT is in kHz.                                                             */
    867          /*                                                                                                         */
    868          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    869          uint32_t DrvSYS_GetHCLK(void)
    870          {
   \                     DrvSYS_GetHCLK:
   \   00000000   80B5               PUSH     {R7,LR}
    871          	
    872          	uint32_t u32Freqout = 0, u32AHBDivider;
   \   00000002   0020               MOVS     R0,#+0
    873          
    874          	if (SYSCLK->CLKSEL0.HCLK_S == 0)		/* external 12MHz crystal clock */
   \   00000004   ....               LDR      R1,??DataTable36_8  ;; 0x50000210
   \   00000006   0968               LDR      R1,[R1, #+0]
   \   00000008   4907               LSLS     R1,R1,#+29
   \   0000000A   02D1               BNE      ??DrvSYS_GetHCLK_0
    875          	{
    876          		u32Freqout = s_u32ExtClockKHz;	
   \   0000000C   ....               LDR      R0,??DataTable36_5  ;; s_u32ExtClockKHz
   \   0000000E   0068               LDR      R0,[R0, #+0]
   \   00000010   19E0               B        ??DrvSYS_GetHCLK_1
    877          	}
    878          	else if(SYSCLK->CLKSEL0.HCLK_S == 1)    /* external 32KHz crystal clock */ 
   \                     ??DrvSYS_GetHCLK_0:
   \   00000012   ....               LDR      R0,??DataTable36_8  ;; 0x50000210
   \   00000014   0068               LDR      R0,[R0, #+0]
   \   00000016   4007               LSLS     R0,R0,#+29       ;; ZeroExtS R0,R0,#+29,#+29
   \   00000018   400F               LSRS     R0,R0,#+29
   \   0000001A   0128               CMP      R0,#+1
   \   0000001C   01D1               BNE      ??DrvSYS_GetHCLK_2
    879          	{
    880          		u32Freqout = 32;
   \   0000001E   2020               MOVS     R0,#+32
   \   00000020   11E0               B        ??DrvSYS_GetHCLK_1
    881          	}
    882          	else if(SYSCLK->CLKSEL0.HCLK_S == 2)	/* PLL clock */
   \                     ??DrvSYS_GetHCLK_2:
   \   00000022   ....               LDR      R0,??DataTable36_8  ;; 0x50000210
   \   00000024   0068               LDR      R0,[R0, #+0]
   \   00000026   4007               LSLS     R0,R0,#+29       ;; ZeroExtS R0,R0,#+29,#+29
   \   00000028   400F               LSRS     R0,R0,#+29
   \   0000002A   0228               CMP      R0,#+2
   \   0000002C   02D1               BNE      ??DrvSYS_GetHCLK_3
    883          	{
    884          		u32Freqout = DrvSYS_GetPLLClock();
   \   0000002E   ........           BL       DrvSYS_GetPLLClock
   \   00000032   08E0               B        ??DrvSYS_GetHCLK_1
    885          	}
    886          	else if(SYSCLK->CLKSEL0.HCLK_S == 3)	/* internal 10KHz oscillator clock */
   \                     ??DrvSYS_GetHCLK_3:
   \   00000034   ....               LDR      R0,??DataTable36_8  ;; 0x50000210
   \   00000036   0068               LDR      R0,[R0, #+0]
   \   00000038   4007               LSLS     R0,R0,#+29       ;; ZeroExtS R0,R0,#+29,#+29
   \   0000003A   400F               LSRS     R0,R0,#+29
   \   0000003C   0328               CMP      R0,#+3
   \   0000003E   01D1               BNE      ??DrvSYS_GetHCLK_4
    887          	{
    888          	 	u32Freqout = 10;
   \   00000040   0A20               MOVS     R0,#+10
   \   00000042   00E0               B        ??DrvSYS_GetHCLK_1
    889          	}
    890          	else									/* internal 22MHz oscillator clock */
    891          	{
    892          	 	u32Freqout = 22000;
   \                     ??DrvSYS_GetHCLK_4:
   \   00000044   ....               LDR      R0,??DataTable36_7  ;; 0x55f0
    893          	
    894          	}
    895          	u32AHBDivider = SYSCLK->CLKDIV.HCLK_N + 1 ;
   \                     ??DrvSYS_GetHCLK_1:
   \   00000046   ....               LDR      R1,??DataTable36_9  ;; 0x50000218
   \   00000048   0968               LDR      R1,[R1, #+0]
   \   0000004A   0907               LSLS     R1,R1,#+28       ;; ZeroExtS R1,R1,#+28,#+28
   \   0000004C   090F               LSRS     R1,R1,#+28
   \   0000004E   491C               ADDS     R1,R1,#+1
    896          	
    897          	return (u32Freqout/u32AHBDivider);	
   \   00000050   ........           BL       __aeabi_uidiv
   \   00000054   02BD               POP      {R1,PC}          ;; return
    898          }
    899          
    900          /*---------------------------------------------------------------------------------------------------------*/
    901          /* Function: DrvSYS_Open                                                                                   */
    902          /*                                                                                                         */
    903          /* Parameters:                                                                                             */
    904          /*      u32ExtClockKHz - [in], The external clock frequency in kHz.                                        */
    905          /*      u32PllClockKHz - [in], The target PLL clock frequency in kHz.                                      */
    906          /*                                                                                                         */
    907          /* Returns:                                                                                                */
    908          /*      E_SUCCESS                                                                                          */
    909          /*                                                                                                         */
    910          /* Description:                                                                                            */
    911          /*      This could configure the PLL according to the external clock and target PLL clock.                 */
    912          /*      NOTE: Due to hardware limitation, the actual PLL clock may be different to target PLL clock.       */
    913          /*            The DrvSYS_GetPLLClock() could be used to get actual PLL clock.                              */
    914          /*                                                                                                         */
    915          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    916          int32_t DrvSYS_Open(uint32_t u32ExtClockKHz, uint32_t u32PllClockKHz)
    917          {
   \                     DrvSYS_Open:
   \   00000000   38B5               PUSH     {R3-R5,LR}
    918          	uint32_t u32PllCr;	
    919          	volatile uint32_t delayCnt;
    920              uint32_t isOsc22mEn;
    921          	
    922          	s_u32ExtClockKHz = u32ExtClockKHz;	
   \   00000002   ....               LDR      R2,??DataTable36_5  ;; s_u32ExtClockKHz
   \   00000004   1060               STR      R0,[R2, #+0]
    923          	u32PllCr = DrvSYS_GetPllContent(u32ExtClockKHz, u32PllClockKHz);
   \   00000006   ........           BL       DrvSYS_GetPllContent
   \   0000000A   0400               MOVS     R4,R0
    924          
    925              /* Backup internal 22MHz clock status */
    926              isOsc22mEn = SYSCLK->PWRCON.OSC22M_EN;
   \   0000000C   ....               LDR      R0,??DataTable36_10  ;; 0x50000200
   \   0000000E   0068               LDR      R0,[R0, #+0]
   \   00000010   0421               MOVS     R1,#+4
   \   00000012   0140               ANDS     R1,R1,R0
   \   00000014   0D00               MOVS     R5,R1
   \   00000016   AD08               LSRS     R5,R5,#+2
    927          
    928              /* Force to internal 22MHz clock */
    929              SYSCLK->PWRCON.OSC22M_EN = 1;
   \   00000018   ....               LDR      R0,??DataTable36_10  ;; 0x50000200
   \   0000001A   0068               LDR      R0,[R0, #+0]
   \   0000001C   0421               MOVS     R1,#+4
   \   0000001E   0143               ORRS     R1,R1,R0
   \   00000020   ....               LDR      R0,??DataTable36_10  ;; 0x50000200
   \   00000022   0160               STR      R1,[R0, #+0]
    930          	DrvSYS_SetHCLKSource(4);
   \   00000024   0420               MOVS     R0,#+4
   \   00000026   ........           BL       DrvSYS_SetHCLKSource
    931          	
    932          	SYSCLK->PLLCON.FB_DV  = (u32PllCr & 0x01FF);
   \   0000002A   ....               LDR      R0,??DataTable36_1  ;; 0x50000220
   \   0000002C   0068               LDR      R0,[R0, #+0]
   \   0000002E   400A               LSRS     R0,R0,#+9
   \   00000030   4002               LSLS     R0,R0,#+9
   \   00000032   E105               LSLS     R1,R4,#+23       ;; ZeroExtS R1,R4,#+23,#+23
   \   00000034   C90D               LSRS     R1,R1,#+23
   \   00000036   0143               ORRS     R1,R1,R0
   \   00000038   ....               LDR      R0,??DataTable36_1  ;; 0x50000220
   \   0000003A   0160               STR      R1,[R0, #+0]
    933          	SYSCLK->PLLCON.IN_DV  = (u32PllCr >> 9) & 0x1F;
   \   0000003C   ....               LDR      R0,??DataTable36_1  ;; 0x50000220
   \   0000003E   0068               LDR      R0,[R0, #+0]
   \   00000040   ....               LDR      R1,??DataTable36_11  ;; 0xffffc1ff
   \   00000042   0140               ANDS     R1,R1,R0
   \   00000044   F820               MOVS     R0,#+248
   \   00000046   8001               LSLS     R0,R0,#+6        ;; #+15872
   \   00000048   2040               ANDS     R0,R0,R4
   \   0000004A   0843               ORRS     R0,R0,R1
   \   0000004C   ....               LDR      R1,??DataTable36_1  ;; 0x50000220
   \   0000004E   0860               STR      R0,[R1, #+0]
    934          	SYSCLK->PLLCON.OUT_DV = (u32PllCr >> 14) & 0x03;
   \   00000050   ....               LDR      R0,??DataTable36_1  ;; 0x50000220
   \   00000052   0068               LDR      R0,[R0, #+0]
   \   00000054   ....               LDR      R1,??DataTable36_12  ;; 0xffff3fff
   \   00000056   0140               ANDS     R1,R1,R0
   \   00000058   C020               MOVS     R0,#+192
   \   0000005A   0002               LSLS     R0,R0,#+8        ;; #+49152
   \   0000005C   2040               ANDS     R0,R0,R4
   \   0000005E   0843               ORRS     R0,R0,R1
   \   00000060   ....               LDR      R1,??DataTable36_1  ;; 0x50000220
   \   00000062   0860               STR      R0,[R1, #+0]
    935          	SYSCLK->PLLCON.OE     = 0;
   \   00000064   ....               LDR      R0,??DataTable36_1  ;; 0x50000220
   \   00000066   0068               LDR      R0,[R0, #+0]
   \   00000068   ....               LDR      R1,??DataTable36_3  ;; 0xfffbffff
   \   0000006A   0140               ANDS     R1,R1,R0
   \   0000006C   ....               LDR      R0,??DataTable36_1  ;; 0x50000220
   \   0000006E   0160               STR      R1,[R0, #+0]
    936          	SYSCLK->PLLCON.PD 	  = 0;
   \   00000070   ....               LDR      R0,??DataTable36_1  ;; 0x50000220
   \   00000072   0068               LDR      R0,[R0, #+0]
   \   00000074   ....               LDR      R1,??DataTable36_4  ;; 0xfffeffff
   \   00000076   0140               ANDS     R1,R1,R0
   \   00000078   ....               LDR      R0,??DataTable36_1  ;; 0x50000220
   \   0000007A   0160               STR      R1,[R0, #+0]
    937          	
    938          	/*Delay for PLL stable*/
    939          	for (delayCnt=0;delayCnt<10000;delayCnt++);
   \   0000007C   0020               MOVS     R0,#+0
   \   0000007E   0090               STR      R0,[SP, #+0]
   \   00000080   02E0               B        ??DrvSYS_Open_0
   \                     ??DrvSYS_Open_1:
   \   00000082   0098               LDR      R0,[SP, #+0]
   \   00000084   401C               ADDS     R0,R0,#+1
   \   00000086   0090               STR      R0,[SP, #+0]
   \                     ??DrvSYS_Open_0:
   \   00000088   0098               LDR      R0,[SP, #+0]
   \   0000008A   ....               LDR      R1,??DataTable36_13  ;; 0x2710
   \   0000008C   8842               CMP      R0,R1
   \   0000008E   F8D3               BCC      ??DrvSYS_Open_1
    940          
    941          	/* Change HCLK clock source to be PLL. */
    942          	DrvSYS_SetHCLKSource(2);
   \   00000090   0220               MOVS     R0,#+2
   \   00000092   ........           BL       DrvSYS_SetHCLKSource
    943          
    944              /* Restore internal 22MHz clock source status */ 
    945              SYSCLK->PWRCON.OSC22M_EN = isOsc22mEn;
   \   00000096   ....               LDR      R0,??DataTable36_10  ;; 0x50000200
   \   00000098   0068               LDR      R0,[R0, #+0]
   \   0000009A   0421               MOVS     R1,#+4
   \   0000009C   8843               BICS     R0,R0,R1
   \   0000009E   A900               LSLS     R1,R5,#+2
   \   000000A0   0422               MOVS     R2,#+4
   \   000000A2   0A40               ANDS     R2,R2,R1
   \   000000A4   0243               ORRS     R2,R2,R0
   \   000000A6   ....               LDR      R0,??DataTable36_10  ;; 0x50000200
   \   000000A8   0260               STR      R2,[R0, #+0]
    946          	
    947          	return E_SUCCESS;
   \   000000AA   0020               MOVS     R0,#+0
   \   000000AC   32BD               POP      {R1,R4,R5,PC}    ;; return
    948          
    949          }
    950          
    951          
    952          /*---------------------------------------------------------------------------------------------------------*/
    953          /* Function: DrvSYS_EnableFreqDividerOutput 		                                       	   		   	   */
    954          /*                                                                                                         */
    955          /* Parameters:                                                                                             */
    956          /*               i32Enable	- [in]		  1: Enable / 0: Disable 								   		   */
    957          /*               u8Divider	- [in]		  The divider of output frequency (0~15)					   	   */
    958          /*                     		                           	   												   */
    959          /*                     		                           	   												   */
    960          /* Returns:                                                                                                */
    961          /*                 0:  Success																			   */
    962          /*               < 0:  Wrong value											                    		   */
    963          /*              					                                                           			   */
    964          /* Description:                                                                                            */
    965          /*               Enable frequency clock output and set its divider value. 								   */
    966          /*				 The output frequency = Fin/2^(N+1), Fin is the input clock frequency, N is 4-bit value	   */
    967          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
    968          int32_t DrvSYS_EnableFreqDividerOutput(int32_t i32Enable, uint8_t u8Divider)
    969          {
   \                     DrvSYS_EnableFreqDividerOutput:
   \   00000000   80B5               PUSH     {R7,LR}
    970          	if (u8Divider > 15)
   \   00000002   C9B2               UXTB     R1,R1
   \   00000004   1029               CMP      R1,#+16
   \   00000006   01D3               BCC      ??DrvSYS_EnableFreqDividerOutput_0
    971          		return E_DRVSYS_ERR_ARGUMENT;
   \   00000008   ....               LDR      R0,??DataTable36_14  ;; 0xffff9603
   \   0000000A   1AE0               B        ??DrvSYS_EnableFreqDividerOutput_1
    972          
    973          	if (i32Enable)
   \                     ??DrvSYS_EnableFreqDividerOutput_0:
   \   0000000C   0028               CMP      R0,#+0
   \   0000000E   09D0               BEQ      ??DrvSYS_EnableFreqDividerOutput_2
    974          	{
    975          		SYSCLK->FRQDIV.FSEL = u8Divider;
   \   00000010   ....               LDR      R2,??DataTable36_15  ;; 0x50000224
   \   00000012   1268               LDR      R2,[R2, #+0]
   \   00000014   0F23               MOVS     R3,#+15
   \   00000016   9A43               BICS     R2,R2,R3
   \   00000018   C9B2               UXTB     R1,R1
   \   0000001A   0907               LSLS     R1,R1,#+28       ;; ZeroExtS R1,R1,#+28,#+28
   \   0000001C   090F               LSRS     R1,R1,#+28
   \   0000001E   1143               ORRS     R1,R1,R2
   \   00000020   ....               LDR      R2,??DataTable36_15  ;; 0x50000224
   \   00000022   1160               STR      R1,[R2, #+0]
    976          	}
    977          	SYSCLK->FRQDIV.FDIV_EN = i32Enable; 		
   \                     ??DrvSYS_EnableFreqDividerOutput_2:
   \   00000024   ....               LDR      R1,??DataTable36_15  ;; 0x50000224
   \   00000026   0968               LDR      R1,[R1, #+0]
   \   00000028   1022               MOVS     R2,#+16
   \   0000002A   9143               BICS     R1,R1,R2
   \   0000002C   0201               LSLS     R2,R0,#+4
   \   0000002E   1023               MOVS     R3,#+16
   \   00000030   1340               ANDS     R3,R3,R2
   \   00000032   0B43               ORRS     R3,R3,R1
   \   00000034   ....               LDR      R1,??DataTable36_15  ;; 0x50000224
   \   00000036   0B60               STR      R3,[R1, #+0]
    978          	DrvSYS_SetIPClock(E_SYS_FDIV_CLK, i32Enable);
   \   00000038   0100               MOVS     R1,R0
   \   0000003A   0620               MOVS     R0,#+6
   \   0000003C   ........           BL       DrvSYS_SetIPClock
    979          
    980          	return E_SUCCESS;
   \   00000040   0020               MOVS     R0,#+0
   \                     ??DrvSYS_EnableFreqDividerOutput_1:
   \   00000042   02BD               POP      {R1,PC}          ;; return
    981          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   00E100E0           DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_1:
   \   00000000   80E100E0           DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_2:
   \   00000000   01000100           DC32     0x10001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_3:
   \   00000000   00010050           DC32     0x50000100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_4:
   \   00000000   0196FFFF           DC32     0xffff9601

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_5:
   \   00000000   0296FFFF           DC32     0xffff9602

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_6:
   \   00000000   04000050           DC32     0x50000004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_7:
   \   00000000   08000050           DC32     0x50000008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_8:
   \   00000000   0C000050           DC32     0x5000000c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable21_9:
   \   00000000   18000050           DC32     0x50000018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22:
   \   00000000   ........           DC32     BOD_callbackFn

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_1:
   \   00000000   1C000050           DC32     0x5000001c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_2:
   \   00000000   10010050           DC32     0x50000110

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_3:
   \   00000000   04020050           DC32     0x50000204

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23:
   \   00000000   08020050           DC32     0x50000208

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23_1:
   \   00000000   0396FFFF           DC32     0xffff9603

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24:
   \   00000000   10020050           DC32     0x50000210

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25:
   \   00000000   1C020050           DC32     0x5000021c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable29:
   \   00000000   14020050           DC32     0x50000214

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable29_1:
   \   00000000   FFFFFFCF           DC32     0xcfffffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable29_2:
   \   00000000   FFFFFFF3           DC32     0xf3ffffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable30:
   \   00000000   FFFFFFFC           DC32     0xfcffffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31:
   \   00000000   FFFF8FFF           DC32     0xff8fffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable31_1:
   \   00000000   FFFFF8FF           DC32     0xfff8ffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable32:
   \   00000000   FF8FFFFF           DC32     0xffff8fff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable32_1:
   \   00000000   FFF8FFFF           DC32     0xfffff8ff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable32_2:
   \   00000000   18020050           DC32     0x50000218

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable32_3:
   \   00000000   FFFF00FF           DC32     0xff00ffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable33:
   \   00000000   0496FFFF           DC32     0xffff9604

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable33_1:
   \   00000000   FF0FFFFF           DC32     0xffff0fff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable33_2:
   \   00000000   FFF0FFFF           DC32     0xfffff0ff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34:
   \   00000000   0596FFFF           DC32     0xffff9605

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34_1:
   \   00000000   00020050           DC32     0x50000200

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35:
   \   00000000   0396FFFF           DC32     0xffff9603

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_1:
   \   00000000   ........           DC32     PWRWU_callbackFn

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable36:
   \   00000000   FFFEFFFF           DC32     0xfffffeff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable36_1:
   \   00000000   20020050           DC32     0x50000220

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable36_2:
   \   00000000   FFFFF7FF           DC32     0xfff7ffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable36_3:
   \   00000000   FFFFFBFF           DC32     0xfffbffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable36_4:
   \   00000000   FFFFFEFF           DC32     0xfffeffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable36_5:
   \   00000000   ........           DC32     s_u32ExtClockKHz

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable36_6:
   \   00000000   ........           DC32     `?<Constant {1, 2, 2, 4}>`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable36_7:
   \   00000000   F0550000           DC32     0x55f0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable36_8:
   \   00000000   10020050           DC32     0x50000210

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable36_9:
   \   00000000   18020050           DC32     0x50000218

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable36_10:
   \   00000000   00020050           DC32     0x50000200

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable36_11:
   \   00000000   FFC1FFFF           DC32     0xffffc1ff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable36_12:
   \   00000000   FF3FFFFF           DC32     0xffff3fff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable36_13:
   \   00000000   10270000           DC32     0x2710

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable36_14:
   \   00000000   0396FFFF           DC32     0xffff9603

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable36_15:
   \   00000000   24020050           DC32     0x50000224

   \                                 In section .rodata, align 4
   \                     `?<Constant {1, 2, 2, 4}>`:
   \   00000000   010000000200       DC32 1, 2, 2, 4
   \              000002000000
   \              04000000    
    982          

   Maximum stack usage in bytes:

     Function                       .cstack
     --------                       -------
     BOD_IRQHandler                      8
     DrvSYS_ClearRstSrc                  0
     DrvSYS_EnableBOD                    0
     DrvSYS_EnableBODLowPowerMode        0
     DrvSYS_EnableBODRst                 8
     DrvSYS_EnableFreqDividerOutput      8
     DrvSYS_EnableLowVoltRst             0
     DrvSYS_EnablePWRWUInt              16
     DrvSYS_EnablePowerDown              0
     DrvSYS_EnableTempatureSensor        0
     DrvSYS_GetBODState                  0
     DrvSYS_GetEXTClock                  0
     DrvSYS_GetHCLK                      8
     DrvSYS_GetPLLClock                 24
     DrvSYS_GetPllContent               16
     DrvSYS_GetRstSrc                    0
     DrvSYS_GetVersion                   0
     DrvSYS_LockKeyAddr                  4
     DrvSYS_Open                        16
     DrvSYS_ReadProductID                0
     DrvSYS_ResetCPU                     0
     DrvSYS_ResetChip                    0
     DrvSYS_ResetIP                      4
     DrvSYS_SelectBODVolt                0
     DrvSYS_SetClockDivider              4
     DrvSYS_SetHCLKSource                4
     DrvSYS_SetIPClock                   4
     DrvSYS_SetIPClockSource             4
     DrvSYS_SetOscCtrl                   4
     DrvSYS_SetPLLPowerDown              0
     DrvSYS_SetPllSrc                    0
     DrvSYS_SetPowerDownWaitCPU          0
     DrvSYS_SetRCAdjValue                0
     DrvSYS_SetSysTickSource             4
     DrvSYS_UnlockKeyAddr                4
     NVIC_DisableIRQ                     0
     NVIC_EnableIRQ                      0
     PWRWU_IRQHandler                    8


   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     NVIC_EnableIRQ                   24
     NVIC_DisableIRQ                  24
     s_u32ExtClockKHz                  4
     BOD_callbackFn                    4
     PWRWU_callbackFn                  4
     DrvSYS_GetVersion                 4
     DrvSYS_ReadProductID              8
     DrvSYS_UnlockKeyAddr             42
     DrvSYS_LockKeyAddr               30
     DrvSYS_GetRstSrc                  6
     DrvSYS_ClearRstSrc                8
     DrvSYS_ResetIP                   60
     DrvSYS_ResetCPU                  14
     DrvSYS_ResetChip                 14
     DrvSYS_EnableBOD                 22
     DrvSYS_SelectBODVolt             24
     DrvSYS_EnableBODRst              46
     DrvSYS_EnableBODLowPowerMode     22
     DrvSYS_GetBODState               14
     DrvSYS_EnableLowVoltRst          22
     DrvSYS_EnableTempatureSensor      6
     DrvSYS_SetRCAdjValue              6
     BOD_IRQHandler                   30
     DrvSYS_SetIPClock                90
     DrvSYS_SetHCLKSource             46
     DrvSYS_SetSysTickSource          38
     DrvSYS_SetIPClockSource         406
     DrvSYS_SetClockDivider          152
     DrvSYS_SetOscCtrl               114
     PWRWU_IRQHandler                 30
     DrvSYS_EnablePWRWUInt            84
     DrvSYS_EnablePowerDown           22
     DrvSYS_SetPowerDownWaitCPU       24
     DrvSYS_SetPllSrc                 26
     DrvSYS_SetPLLPowerDown           46
     DrvSYS_GetEXTClock                6
     DrvSYS_GetPllContent             76
     DrvSYS_GetPLLClock              128
     DrvSYS_GetHCLK                   86
     DrvSYS_Open                     174
     DrvSYS_EnableFreqDividerOutput   68
     ??DataTable21                     4
     ??DataTable21_1                   4
     ??DataTable21_2                   4
     ??DataTable21_3                   4
     ??DataTable21_4                   4
     ??DataTable21_5                   4
     ??DataTable21_6                   4
     ??DataTable21_7                   4
     ??DataTable21_8                   4
     ??DataTable21_9                   4
     ??DataTable22                     4
     ??DataTable22_1                   4
     ??DataTable22_2                   4
     ??DataTable22_3                   4
     ??DataTable23                     4
     ??DataTable23_1                   4
     ??DataTable24                     4
     ??DataTable25                     4
     ??DataTable29                     4
     ??DataTable29_1                   4
     ??DataTable29_2                   4
     ??DataTable30                     4
     ??DataTable31                     4
     ??DataTable31_1                   4
     ??DataTable32                     4
     ??DataTable32_1                   4
     ??DataTable32_2                   4
     ??DataTable32_3                   4
     ??DataTable33                     4
     ??DataTable33_1                   4
     ??DataTable33_2                   4
     ??DataTable34                     4
     ??DataTable34_1                   4
     ??DataTable35                     4
     ??DataTable35_1                   4
     ??DataTable36                     4
     ??DataTable36_1                   4
     ??DataTable36_2                   4
     ??DataTable36_3                   4
     ??DataTable36_4                   4
     ??DataTable36_5                   4
     ??DataTable36_6                   4
     ??DataTable36_7                   4
     ??DataTable36_8                   4
     ??DataTable36_9                   4
     ??DataTable36_10                  4
     ??DataTable36_11                  4
     ??DataTable36_12                  4
     ??DataTable36_13                  4
     ??DataTable36_14                  4
     ??DataTable36_15                  4
     ?<Constant {1, 2, 2, 4}>         16

 
     8 bytes in section .bss
     4 bytes in section .data
    16 bytes in section .rodata
 2 246 bytes in section .text
 
 2 246 bytes of CODE  memory
    16 bytes of CONST memory
    12 bytes of DATA  memory

Errors: none
Warnings: none
