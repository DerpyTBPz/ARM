###############################################################################
#                                                                             #
#                                                       06/Jul/2010  14:34:56 #
# IAR ANSI C/C++ Compiler V5.50.0.21878/W32 EVALUATION for ARM                #
# Copyright (C) 1999-2010 IAR Systems AB.                                     #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\FreeRTOS_Keil_IAR\FreeRTOS\Source\portable\IAR\ARM_CM #
#                    0\port.c                                                 #
#    Command line =  E:\FreeRTOS_Keil_IAR\FreeRTOS\Source\portable\IAR\ARM_CM #
#                    0\port.c -D IAR_ARM_CM0 -lCN                             #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\Debug\List\ --diag_suppress Pe550,Pa082,Pa039 -o       #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\Debug\Obj\ --no_cse --no_unroll --no_inline            #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M0  #
#                    -e --fpu=None --dlib_config "D:\Program                  #
#                    Files\ARM\INC\DLib_Config_Full.h" -I                     #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\..\common\include\ -I E:\FreeRTOS_Keil_IAR\FreeRTOS\De #
#                    mo\CORTEX_NUC1xx_Keil_IAR\..\..\source\include\ -I       #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\ -I E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_K #
#                    eil_IAR\NUC1xxBSP\NuvotonPlatform_Keil\Include\ -I       #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\NUC1xxBSP\NuvotonPlatform_Keil\Include\Driver\ -I      #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\NUC1xxBSP\CMSIS\CM0\ -I E:\FreeRTOS_Keil_IAR\FreeRTOS\ #
#                    Demo\CORTEX_NUC1xx_Keil_IAR\User_Demo\include\ -I        #
#                    "D:\Program Files\ARM\INC\" -Ol                          #
#    List file    =  E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\Debug\List\port.lst                                    #
#    Object file  =  E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\Debug\Obj\port.o                                       #
#                                                                             #
#                                                                             #
###############################################################################

E:\FreeRTOS_Keil_IAR\FreeRTOS\Source\portable\IAR\ARM_CM0\port.c
      1          /*
      2              FreeRTOS V6.0.5 - Copyright (C) 2010 Real Time Engineers Ltd.
      3          
      4              ***************************************************************************
      5              *                                                                         *
      6              * If you are:                                                             *
      7              *                                                                         *
      8              *    + New to FreeRTOS,                                                   *
      9              *    + Wanting to learn FreeRTOS or multitasking in general quickly       *
     10              *    + Looking for basic training,                                        *
     11              *    + Wanting to improve your FreeRTOS skills and productivity           *
     12              *                                                                         *
     13              * then take a look at the FreeRTOS eBook                                  *
     14              *                                                                         *
     15              *        "Using the FreeRTOS Real Time Kernel - a Practical Guide"        *
     16              *                  http://www.FreeRTOS.org/Documentation                  *
     17              *                                                                         *
     18              * A pdf reference manual is also available.  Both are usually delivered   *
     19              * to your inbox within 20 minutes to two hours when purchased between 8am *
     20              * and 8pm GMT (although please allow up to 24 hours in case of            *
     21              * exceptional circumstances).  Thank you for your support!                *
     22              *                                                                         *
     23              ***************************************************************************
     24          
     25              This file is part of the FreeRTOS distribution.
     26          
     27              FreeRTOS is free software; you can redistribute it and/or modify it under
     28              the terms of the GNU General Public License (version 2) as published by the
     29              Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
     30              ***NOTE*** The exception to the GPL is included to allow you to distribute
     31              a combined work that includes FreeRTOS without being obliged to provide the
     32              source code for proprietary components outside of the FreeRTOS kernel.
     33              FreeRTOS is distributed in the hope that it will be useful, but WITHOUT
     34              ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
     35              FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
     36              more details. You should have received a copy of the GNU General Public 
     37              License and the FreeRTOS license exception along with FreeRTOS; if not it 
     38              can be viewed here: http://www.freertos.org/a00114.html and also obtained 
     39              by writing to Richard Barry, contact details for whom are available on the
     40              FreeRTOS WEB site.
     41          
     42              1 tab == 4 spaces!
     43          
     44              http://www.FreeRTOS.org - Documentation, latest information, license and
     45              contact details.
     46          
     47              http://www.SafeRTOS.com - A version that is certified for use in safety
     48              critical systems.
     49          
     50              http://www.OpenRTOS.com - Commercial support, development, porting,
     51              licensing and training services.
     52          */
     53          
     54          /*-----------------------------------------------------------
     55           * Implementation of functions defined in portable.h for the ARM CM0 port.
     56           *----------------------------------------------------------*/
     57          
     58          /* Scheduler includes. */
     59          #include "FreeRTOS.h"
     60          #include "task.h"
     61          
     62          #ifndef configKERNEL_INTERRUPT_PRIORITY
     63          	#define configKERNEL_INTERRUPT_PRIORITY 3
     64          #endif
     65          
     66          /* Constants required to manipulate the NVIC. */
     67          #define portNVIC_SYSTICK_CTRL		( ( volatile unsigned long *) 0xe000e010 )
     68          #define portNVIC_SYSTICK_LOAD		( ( volatile unsigned long *) 0xe000e014 )
     69          #define portNVIC_INT_CTRL		( ( volatile unsigned long *) 0xe000ed04 )
     70          #define portNVIC_SYSPRI3		( ( volatile unsigned long *) 0xe000ed20 )
     71          #define portNVIC_SYSTICK_CLK		0x00000004
     72          #define portNVIC_SYSTICK_INT		0x00000002
     73          #define portNVIC_SYSTICK_ENABLE		0x00000001
     74          #define portNVIC_PENDSVSET		0x10000000
     75          #define portNVIC_PENDSV_PRI		( ( ( unsigned long ) configKERNEL_INTERRUPT_PRIORITY ) << 22 )
     76          #define portNVIC_SYSTICK_PRI		( ( ( unsigned long ) configKERNEL_INTERRUPT_PRIORITY ) << 30 )
     77          
     78          /* Constants required to set up the initial stack. */
     79          #define portINITIAL_XPSR		( 0x01000000 )
     80          
     81          /* Each task maintains its own interrupt status in the critical nesting
     82          variable. */

   \                                 In section .data, align 4
     83          static unsigned portBASE_TYPE uxCriticalNesting = 0xaaaaaaaa;
   \                     uxCriticalNesting:
   \   00000000   AAAAAAAA           DC32 2863311530
     84          
     85          /* 
     86           * Setup the timer to generate the tick interrupts.
     87           */
     88          static void prvSetupTimerInterrupt( void );
     89          
     90          /*
     91           * Exception handlers.
     92           */
     93          void xPortSysTickHandler( void );
     94          
     95          /*
     96           * Start first task is a separate function so it can be tested in isolation.
     97           */
     98          extern void vPortStartFirstTask( void );
     99          
    100          /*-----------------------------------------------------------*/
    101          
    102          /* 
    103           * See header file for description. 
    104           */

   \                                 In section .text, align 2, keep-with-next
    105          portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
    106          {
    107          	/* Simulate the stack frame as it would be created by a context switch
    108          	interrupt. */
    109          	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   \                     pxPortInitialiseStack:
   \   00000000   001F               SUBS     R0,R0,#+4
    110          	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   \   00000002   8023               MOVS     R3,#+128
   \   00000004   5B04               LSLS     R3,R3,#+17       ;; #+16777216
   \   00000006   0360               STR      R3,[R0, #+0]
    111          	pxTopOfStack--;
   \   00000008   001F               SUBS     R0,R0,#+4
    112          	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
   \   0000000A   0160               STR      R1,[R0, #+0]
    113          	pxTopOfStack--;
   \   0000000C   001F               SUBS     R0,R0,#+4
    114          	*pxTopOfStack = 0;	/* LR */
   \   0000000E   0021               MOVS     R1,#+0
   \   00000010   0160               STR      R1,[R0, #+0]
    115          	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   \   00000012   1438               SUBS     R0,R0,#+20
    116          	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
   \   00000014   0260               STR      R2,[R0, #+0]
    117          	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
   \   00000016   2038               SUBS     R0,R0,#+32
    118          
    119          	return pxTopOfStack;
   \   00000018   7047               BX       LR               ;; return
    120          }
    121          /*-----------------------------------------------------------*/
    122          
    123          /* 
    124           * See header file for description. 
    125           */

   \                                 In section .text, align 2, keep-with-next
    126          portBASE_TYPE xPortStartScheduler( void )
    127          {
   \                     xPortStartScheduler:
   \   00000000   80B5               PUSH     {R7,LR}
    128          	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
    129          	*(portNVIC_SYSPRI3) |= portNVIC_PENDSV_PRI;
   \   00000002   ....               LDR      R0,??DataTable5  ;; 0xe000ed20
   \   00000004   0068               LDR      R0,[R0, #+0]
   \   00000006   C021               MOVS     R1,#+192
   \   00000008   0904               LSLS     R1,R1,#+16       ;; #+12582912
   \   0000000A   0143               ORRS     R1,R1,R0
   \   0000000C   ....               LDR      R0,??DataTable5  ;; 0xe000ed20
   \   0000000E   0160               STR      R1,[R0, #+0]
    130          	*(portNVIC_SYSPRI3) |= portNVIC_SYSTICK_PRI;
   \   00000010   ....               LDR      R0,??DataTable5  ;; 0xe000ed20
   \   00000012   0068               LDR      R0,[R0, #+0]
   \   00000014   C021               MOVS     R1,#+192
   \   00000016   0906               LSLS     R1,R1,#+24       ;; #-1073741824
   \   00000018   0143               ORRS     R1,R1,R0
   \   0000001A   ....               LDR      R0,??DataTable5  ;; 0xe000ed20
   \   0000001C   0160               STR      R1,[R0, #+0]
    131          
    132          	/* Start the timer that generates the tick ISR.  Interrupts are disabled
    133          	here already. */
    134          	prvSetupTimerInterrupt();
   \   0000001E   ........           BL       prvSetupTimerInterrupt
    135          	
    136          	/* Initialise the critical nesting count ready for the first task. */
    137          	uxCriticalNesting = 0;
   \   00000022   ....               LDR      R0,??DataTable5_1
   \   00000024   0021               MOVS     R1,#+0
   \   00000026   0160               STR      R1,[R0, #+0]
    138          
    139          	/* Start the first task. */
    140          	vPortStartFirstTask();
   \   00000028   ........           BL       vPortStartFirstTask
    141          
    142          	/* Should not get here! */
    143          	return 0;
   \   0000002C   0020               MOVS     R0,#+0
   \   0000002E   02BD               POP      {R1,PC}          ;; return
    144          }
    145          /*-----------------------------------------------------------*/
    146          

   \                                 In section .text, align 2, keep-with-next
    147          void vPortEndScheduler( void )
    148          {
    149          	/* It is unlikely that the CM3 port will require this function as there
    150          	is nothing to return to.  */
    151          }
   \                     vPortEndScheduler:
   \   00000000   7047               BX       LR               ;; return
    152          /*-----------------------------------------------------------*/
    153          

   \                                 In section .text, align 2, keep-with-next
    154          void vPortYieldFromISR( void )
    155          {
    156          	/* Set a PendSV to request a context switch. */
    157          	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   \                     vPortYieldFromISR:
   \   00000000   ....               LDR      R0,??DataTable5_2  ;; 0xe000ed04
   \   00000002   8021               MOVS     R1,#+128
   \   00000004   4905               LSLS     R1,R1,#+21       ;; #+268435456
   \   00000006   0160               STR      R1,[R0, #+0]
    158          }
   \   00000008   7047               BX       LR               ;; return
    159          /*-----------------------------------------------------------*/
    160          

   \                                 In section .text, align 2, keep-with-next
    161          void vPortEnterCritical( void )
    162          {
   \                     vPortEnterCritical:
   \   00000000   80B5               PUSH     {R7,LR}
    163          	portDISABLE_INTERRUPTS();
   \   00000002   ........           BL       vPortSetInterruptMask
    164          	uxCriticalNesting++;
   \   00000006   ....               LDR      R0,??DataTable5_1
   \   00000008   0068               LDR      R0,[R0, #+0]
   \   0000000A   401C               ADDS     R0,R0,#+1
   \   0000000C   ....               LDR      R1,??DataTable5_1
   \   0000000E   0860               STR      R0,[R1, #+0]
    165          }
   \   00000010   01BD               POP      {R0,PC}          ;; return
    166          /*-----------------------------------------------------------*/
    167          

   \                                 In section .text, align 2, keep-with-next
    168          void vPortExitCritical( void )
    169          {
   \                     vPortExitCritical:
   \   00000000   80B5               PUSH     {R7,LR}
    170          	uxCriticalNesting--;
   \   00000002   ....               LDR      R0,??DataTable5_1
   \   00000004   0068               LDR      R0,[R0, #+0]
   \   00000006   401E               SUBS     R0,R0,#+1
   \   00000008   ....               LDR      R1,??DataTable5_1
   \   0000000A   0860               STR      R0,[R1, #+0]
    171          	if( uxCriticalNesting == 0 )
   \   0000000C   ....               LDR      R0,??DataTable5_1
   \   0000000E   0068               LDR      R0,[R0, #+0]
   \   00000010   0028               CMP      R0,#+0
   \   00000012   01D1               BNE      ??vPortExitCritical_0
    172          	{
    173          		portENABLE_INTERRUPTS();
   \   00000014   ........           BL       vPortClearInterruptMask
    174          	}
    175          }
   \                     ??vPortExitCritical_0:
   \   00000018   01BD               POP      {R0,PC}          ;; return
    176          /*-----------------------------------------------------------*/
    177          

   \                                 In section .text, align 2, keep-with-next
    178          void xPortSysTickHandler( void )
    179          {
   \                     xPortSysTickHandler:
   \   00000000   10B5               PUSH     {R4,LR}
    180          unsigned long ulDummy;
    181          
    182          	/* If using preemption, also force a context switch. */
    183          	#if configUSE_PREEMPTION == 1
    184          		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;	
   \   00000002   ....               LDR      R0,??DataTable5_2  ;; 0xe000ed04
   \   00000004   8021               MOVS     R1,#+128
   \   00000006   4905               LSLS     R1,R1,#+21       ;; #+268435456
   \   00000008   0160               STR      R1,[R0, #+0]
    185          	#endif
    186          
    187          	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
   \   0000000A   0024               MOVS     R4,#+0
   \   0000000C   ........           BL       vPortSetInterruptMask
    188          	{
    189          		vTaskIncrementTick();
   \   00000010   ........           BL       vTaskIncrementTick
    190          	}
    191          	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
   \   00000014   ........           BL       vPortClearInterruptMask
    192          }
   \   00000018   10BD               POP      {R4,PC}          ;; return
    193          /*-----------------------------------------------------------*/
    194          
    195          /*
    196           * Setup the systick timer to generate the tick interrupts at the required
    197           * frequency.
    198           */

   \                                 In section .text, align 2, keep-with-next
    199          void prvSetupTimerInterrupt( void )
    200          {
    201          	/* Configure SysTick to interrupt at the requested rate. */
    202          	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   \                     prvSetupTimerInterrupt:
   \   00000000   ....               LDR      R0,??DataTable5_3  ;; 0xe000e014
   \   00000002   ....               LDR      R1,??DataTable5_4  ;; 0xbb7f
   \   00000004   0160               STR      R1,[R0, #+0]
    203          	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   \   00000006   ....               LDR      R0,??DataTable5_5  ;; 0xe000e010
   \   00000008   0721               MOVS     R1,#+7
   \   0000000A   0160               STR      R1,[R0, #+0]
    204          }
   \   0000000C   7047               BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   20ED00E0           DC32     0xe000ed20

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   ........           DC32     uxCriticalNesting

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   04ED00E0           DC32     0xe000ed04

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   14E000E0           DC32     0xe000e014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   7FBB0000           DC32     0xbb7f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   10E000E0           DC32     0xe000e010
    205          /*-----------------------------------------------------------*/

   Maximum stack usage in bytes:

     Function               .cstack
     --------               -------
     prvSetupTimerInterrupt      0
     pxPortInitialiseStack       0
     vPortEndScheduler           0
     vPortEnterCritical          8
     vPortExitCritical           8
     vPortYieldFromISR           0
     xPortStartScheduler         8
     xPortSysTickHandler         8


   Section sizes:

     Function/Label         Bytes
     --------------         -----
     uxCriticalNesting         4
     pxPortInitialiseStack    26
     xPortStartScheduler      48
     vPortEndScheduler         2
     vPortYieldFromISR        10
     vPortEnterCritical       18
     vPortExitCritical        26
     xPortSysTickHandler      26
     prvSetupTimerInterrupt   14
     ??DataTable5              4
     ??DataTable5_1            4
     ??DataTable5_2            4
     ??DataTable5_3            4
     ??DataTable5_4            4
     ??DataTable5_5            4

 
   4 bytes in section .data
 194 bytes in section .text
 
 194 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none
