###############################################################################
#                                                                             #
#                                                       06/Jul/2010  14:34:54 #
# IAR ANSI C/C++ Compiler V5.50.0.21878/W32 EVALUATION for ARM                #
# Copyright (C) 1999-2010 IAR Systems AB.                                     #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\Common\Minimal\death. #
#                    c                                                        #
#    Command line =  E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\Common\Minimal\death. #
#                    c -D IAR_ARM_CM0 -lCN E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo #
#                    \CORTEX_NUC1xx_Keil_IAR\Debug\List\ --diag_suppress      #
#                    Pe550,Pa082,Pa039 -o E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\ #
#                    CORTEX_NUC1xx_Keil_IAR\Debug\Obj\ --no_cse --no_unroll   #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M0  #
#                    -e --fpu=None --dlib_config "D:\Program                  #
#                    Files\ARM\INC\DLib_Config_Full.h" -I                     #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\..\common\include\ -I E:\FreeRTOS_Keil_IAR\FreeRTOS\De #
#                    mo\CORTEX_NUC1xx_Keil_IAR\..\..\source\include\ -I       #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\ -I E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_K #
#                    eil_IAR\NUC1xxBSP\NuvotonPlatform_Keil\Include\ -I       #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\NUC1xxBSP\NuvotonPlatform_Keil\Include\Driver\ -I      #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\NUC1xxBSP\CMSIS\CM0\ -I E:\FreeRTOS_Keil_IAR\FreeRTOS\ #
#                    Demo\CORTEX_NUC1xx_Keil_IAR\User_Demo\include\ -I        #
#                    "D:\Program Files\ARM\INC\" -Ol                          #
#    List file    =  E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\Debug\List\death.lst                                   #
#    Object file  =  E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\Debug\Obj\death.o                                      #
#                                                                             #
#                                                                             #
###############################################################################

E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\Common\Minimal\death.c
      1          /*
      2              FreeRTOS V6.0.5 - Copyright (C) 2010 Real Time Engineers Ltd.
      3          
      4              ***************************************************************************
      5              *                                                                         *
      6              * If you are:                                                             *
      7              *                                                                         *
      8              *    + New to FreeRTOS,                                                   *
      9              *    + Wanting to learn FreeRTOS or multitasking in general quickly       *
     10              *    + Looking for basic training,                                        *
     11              *    + Wanting to improve your FreeRTOS skills and productivity           *
     12              *                                                                         *
     13              * then take a look at the FreeRTOS eBook                                  *
     14              *                                                                         *
     15              *        "Using the FreeRTOS Real Time Kernel - a Practical Guide"        *
     16              *                  http://www.FreeRTOS.org/Documentation                  *
     17              *                                                                         *
     18              * A pdf reference manual is also available.  Both are usually delivered   *
     19              * to your inbox within 20 minutes to two hours when purchased between 8am *
     20              * and 8pm GMT (although please allow up to 24 hours in case of            *
     21              * exceptional circumstances).  Thank you for your support!                *
     22              *                                                                         *
     23              ***************************************************************************
     24          
     25              This file is part of the FreeRTOS distribution.
     26          
     27              FreeRTOS is free software; you can redistribute it and/or modify it under
     28              the terms of the GNU General Public License (version 2) as published by the
     29              Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
     30              ***NOTE*** The exception to the GPL is included to allow you to distribute
     31              a combined work that includes FreeRTOS without being obliged to provide the
     32              source code for proprietary components outside of the FreeRTOS kernel.
     33              FreeRTOS is distributed in the hope that it will be useful, but WITHOUT
     34              ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
     35              FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
     36              more details. You should have received a copy of the GNU General Public 
     37              License and the FreeRTOS license exception along with FreeRTOS; if not it 
     38              can be viewed here: http://www.freertos.org/a00114.html and also obtained 
     39              by writing to Richard Barry, contact details for whom are available on the
     40              FreeRTOS WEB site.
     41          
     42              1 tab == 4 spaces!
     43          
     44              http://www.FreeRTOS.org - Documentation, latest information, license and
     45              contact details.
     46          
     47              http://www.SafeRTOS.com - A version that is certified for use in safety
     48              critical systems.
     49          
     50              http://www.OpenRTOS.com - Commercial support, development, porting,
     51              licensing and training services.
     52          */
     53          
     54          /**
     55           * Create a single persistent task which periodically dynamically creates another
     56           * two tasks.  The original task is called the creator task, the two tasks it
     57           * creates are called suicidal tasks.
     58           *
     59           * One of the created suicidal tasks kill one other suicidal task before killing
     60           * itself - leaving just the original task remaining.
     61           *
     62           * The creator task must be spawned after all of the other demo application tasks
     63           * as it keeps a check on the number of tasks under the scheduler control.  The
     64           * number of tasks it expects to see running should never be greater than the
     65           * number of tasks that were in existence when the creator task was spawned, plus
     66           * one set of four suicidal tasks.  If this number is exceeded an error is flagged.
     67           *
     68           * \page DeathC death.c
     69           * \ingroup DemoFiles
     70           * <HR>
     71           */
     72          
     73          /*
     74          Changes from V3.0.0
     75          	+ CreationCount sizes changed from unsigned portBASE_TYPE to
     76          	  unsigned short to minimize the risk of overflowing.
     77          	
     78          	+ Reset of usLastCreationCount added
     79          	
     80          Changes from V3.1.0
     81          	+ Changed the dummy calculation to use variables of type long, rather than
     82          	  float.  This allows the file to be used with ports that do not support
     83          	  floating point.
     84          
     85          */
     86          
     87          #include <stdlib.h>
     88          
     89          /* Scheduler include files. */
     90          #include "FreeRTOS.h"
     91          #include "task.h"
     92          
     93          /* Demo program include files. */
     94          #include "death.h"
     95          
     96          #define deathSTACK_SIZE		( configMINIMAL_STACK_SIZE + 60 )
     97          
     98          /* The task originally created which is responsible for periodically dynamically
     99          creating another four tasks. */
    100          static portTASK_FUNCTION_PROTO( vCreateTasks, pvParameters );
    101          
    102          /* The task function of the dynamically created tasks. */
    103          static portTASK_FUNCTION_PROTO( vSuicidalTask, pvParameters );
    104          
    105          /* A variable which is incremented every time the dynamic tasks are created.  This
    106          is used to check that the task is still running. */

   \                                 In section .bss, align 2
    107          static volatile unsigned short usCreationCount = 0;
   \                     usCreationCount:
   \   00000000                      DS8 2
    108          
    109          /* Used to store the number of tasks that were originally running so the creator
    110          task can tell if any of the suicidal tasks have failed to die.
    111          */

   \                                 In section .bss, align 4
    112          static volatile unsigned portBASE_TYPE uxTasksRunningAtStart = 0;
   \                     uxTasksRunningAtStart:
   \   00000000                      DS8 4
    113          
    114          /* Tasks are deleted by the idle task.  Under heavy load the idle task might
    115          not get much processing time, so it would be legitimate for several tasks to
    116          remain undeleted for a short period. */

   \                                 In section .rodata, align 4
    117          static const unsigned portBASE_TYPE uxMaxNumberOfExtraTasksRunning = 2;
   \                     uxMaxNumberOfExtraTasksRunning:
   \   00000000   02000000           DC32 2
    118          
    119          /* Used to store a handle to the task that should be killed by a suicidal task,
    120          before it kills itself. */

   \                                 In section .bss, align 4
    121          xTaskHandle xCreatedTask;
   \                     xCreatedTask:
   \   00000000                      DS8 4
    122          
    123          /*-----------------------------------------------------------*/
    124          

   \                                 In section .text, align 2, keep-with-next
    125          void vCreateSuicidalTasks( unsigned portBASE_TYPE uxPriority )
    126          {
   \                     vCreateSuicidalTasks:
   \   00000000   1FB5               PUSH     {R0-R4,LR}
   \   00000002   0400               MOVS     R4,R0
    127          unsigned portBASE_TYPE *puxPriority;
    128          
    129          	/* Create the Creator tasks - passing in as a parameter the priority at which
    130          	the suicidal tasks should be created. */
    131          	puxPriority = ( unsigned portBASE_TYPE * ) pvPortMalloc( sizeof( unsigned portBASE_TYPE ) );
   \   00000004   0420               MOVS     R0,#+4
   \   00000006   ........           BL       pvPortMalloc
    132          	*puxPriority = uxPriority;
   \   0000000A   0460               STR      R4,[R0, #+0]
    133          
    134          	xTaskCreate( vCreateTasks, ( signed char * ) "CREATOR", deathSTACK_SIZE, ( void * ) puxPriority, uxPriority, NULL );
   \   0000000C   0021               MOVS     R1,#+0
   \   0000000E   0391               STR      R1,[SP, #+12]
   \   00000010   0021               MOVS     R1,#+0
   \   00000012   0291               STR      R1,[SP, #+8]
   \   00000014   0021               MOVS     R1,#+0
   \   00000016   0191               STR      R1,[SP, #+4]
   \   00000018   0094               STR      R4,[SP, #+0]
   \   0000001A   0300               MOVS     R3,R0
   \   0000001C   BC22               MOVS     R2,#+188
   \   0000001E   ....               LDR      R1,??DataTable2
   \   00000020   ....               LDR      R0,??DataTable2_1
   \   00000022   ........           BL       xTaskGenericCreate
    135          
    136          	/* Record the number of tasks that are running now so we know if any of the
    137          	suicidal tasks have failed to be killed. */
    138          	uxTasksRunningAtStart = ( unsigned portBASE_TYPE ) uxTaskGetNumberOfTasks();
   \   00000026   ........           BL       uxTaskGetNumberOfTasks
   \   0000002A   ....               LDR      R1,??DataTable2_2
   \   0000002C   0860               STR      R0,[R1, #+0]
    139          	
    140          	/* FreeRTOS.org versions before V3.0 started the idle-task as the very
    141          	first task. The idle task was then already included in uxTasksRunningAtStart.
    142          	From FreeRTOS V3.0 on, the idle task is started when the scheduler is
    143          	started. Therefore the idle task is not yet accounted for. We correct
    144          	this by increasing uxTasksRunningAtStart by 1. */
    145          	uxTasksRunningAtStart++;
   \   0000002E   ....               LDR      R0,??DataTable2_2
   \   00000030   0068               LDR      R0,[R0, #+0]
   \   00000032   401C               ADDS     R0,R0,#+1
   \   00000034   ....               LDR      R1,??DataTable2_2
   \   00000036   0860               STR      R0,[R1, #+0]
    146          }
   \   00000038   1FBD               POP      {R0-R4,PC}       ;; return
    147          /*-----------------------------------------------------------*/
    148          					

   \                                 In section .text, align 2, keep-with-next
    149          static portTASK_FUNCTION( vSuicidalTask, pvParameters )
    150          {
   \                     vSuicidalTask:
   \   00000000   30B5               PUSH     {R4,R5,LR}
   \   00000002   83B0               SUB      SP,SP,#+12
    151          volatile long l1, l2;
    152          xTaskHandle xTaskToKill;
    153          const portTickType xDelay = ( portTickType ) 200 / portTICK_RATE_MS;
   \   00000004   C824               MOVS     R4,#+200
    154          
    155          	if( pvParameters != NULL )
   \   00000006   0028               CMP      R0,#+0
   \   00000008   01D0               BEQ      ??vSuicidalTask_0
    156          	{
    157          		/* This task is periodically created four times.  Two created tasks are
    158          		passed a handle to the other task so it can kill it before killing itself.
    159          		The other task is passed in null. */
    160          		xTaskToKill = *( xTaskHandle* )pvParameters;
   \   0000000A   0568               LDR      R5,[R0, #+0]
   \   0000000C   00E0               B        ??vSuicidalTask_1
    161          	}
    162          	else
    163          	{
    164          		xTaskToKill = NULL;
   \                     ??vSuicidalTask_0:
   \   0000000E   0025               MOVS     R5,#+0
    165          	}
    166          
    167          	for( ;; )
    168          	{
    169          		/* Do something random just to use some stack and registers. */
    170          		l1 = 2;
   \                     ??vSuicidalTask_1:
   \   00000010   0220               MOVS     R0,#+2
   \   00000012   0190               STR      R0,[SP, #+4]
    171          		l2 = 89;
   \   00000014   5920               MOVS     R0,#+89
   \   00000016   0090               STR      R0,[SP, #+0]
    172          		l2 *= l1;
   \   00000018   0098               LDR      R0,[SP, #+0]
   \   0000001A   0199               LDR      R1,[SP, #+4]
   \   0000001C   4843               MULS     R0,R1,R0
   \   0000001E   0090               STR      R0,[SP, #+0]
    173          		vTaskDelay( xDelay );
   \   00000020   2000               MOVS     R0,R4
   \   00000022   ........           BL       vTaskDelay
    174          
    175          		if( xTaskToKill != NULL )
   \   00000026   002D               CMP      R5,#+0
   \   00000028   F2D0               BEQ      ??vSuicidalTask_1
    176          		{
    177          			/* Make sure the other task has a go before we delete it. */
    178          			vTaskDelay( ( portTickType ) 0 );
   \   0000002A   0020               MOVS     R0,#+0
   \   0000002C   ........           BL       vTaskDelay
    179          
    180          			/* Kill the other task that was created by vCreateTasks(). */
    181          			vTaskDelete( xTaskToKill );
   \   00000030   2800               MOVS     R0,R5
   \   00000032   ........           BL       vTaskDelete
    182          
    183          			/* Kill ourselves. */
    184          			vTaskDelete( NULL );
   \   00000036   0020               MOVS     R0,#+0
   \   00000038   ........           BL       vTaskDelete
   \   0000003C   E8E7               B        ??vSuicidalTask_1
    185          		}
    186          	}
    187          }/*lint !e818 !e550 Function prototype must be as per standard for task functions. */
    188          /*-----------------------------------------------------------*/
    189          

   \                                 In section .text, align 2, keep-with-next
    190          static portTASK_FUNCTION( vCreateTasks, pvParameters )
    191          {
   \                     vCreateTasks:
   \   00000000   30B5               PUSH     {R4,R5,LR}
   \   00000002   85B0               SUB      SP,SP,#+20
    192          const portTickType xDelay = ( portTickType ) 1000 / portTICK_RATE_MS;
   \   00000004   FA25               MOVS     R5,#+250
   \   00000006   AD00               LSLS     R5,R5,#+2        ;; #+1000
    193          unsigned portBASE_TYPE uxPriority;
    194          
    195          	uxPriority = *( unsigned portBASE_TYPE * ) pvParameters;
   \   00000008   0468               LDR      R4,[R0, #+0]
    196          	vPortFree( pvParameters );
   \   0000000A   ........           BL       vPortFree
    197          
    198          	for( ;; )
    199          	{
    200          		/* Just loop round, delaying then creating the four suicidal tasks. */
    201          		vTaskDelay( xDelay );
   \                     ??vCreateTasks_0:
   \   0000000E   2800               MOVS     R0,R5
   \   00000010   ........           BL       vTaskDelay
    202          
    203          		xCreatedTask = NULL;
   \   00000014   ....               LDR      R0,??DataTable2_3
   \   00000016   0021               MOVS     R1,#+0
   \   00000018   0160               STR      R1,[R0, #+0]
    204          
    205          		xTaskCreate( vSuicidalTask, ( signed char * ) "SUICID1", configMINIMAL_STACK_SIZE, NULL, uxPriority, &xCreatedTask );
   \   0000001A   0020               MOVS     R0,#+0
   \   0000001C   0390               STR      R0,[SP, #+12]
   \   0000001E   0020               MOVS     R0,#+0
   \   00000020   0290               STR      R0,[SP, #+8]
   \   00000022   ....               LDR      R0,??DataTable2_3
   \   00000024   0190               STR      R0,[SP, #+4]
   \   00000026   0094               STR      R4,[SP, #+0]
   \   00000028   0023               MOVS     R3,#+0
   \   0000002A   8022               MOVS     R2,#+128
   \   0000002C   ....               LDR      R1,??DataTable2_4
   \   0000002E   ....               LDR      R0,??DataTable2_5
   \   00000030   ........           BL       xTaskGenericCreate
    206          		xTaskCreate( vSuicidalTask, ( signed char * ) "SUICID2", configMINIMAL_STACK_SIZE, &xCreatedTask, uxPriority, NULL );
   \   00000034   0020               MOVS     R0,#+0
   \   00000036   0390               STR      R0,[SP, #+12]
   \   00000038   0020               MOVS     R0,#+0
   \   0000003A   0290               STR      R0,[SP, #+8]
   \   0000003C   0020               MOVS     R0,#+0
   \   0000003E   0190               STR      R0,[SP, #+4]
   \   00000040   0094               STR      R4,[SP, #+0]
   \   00000042   ....               LDR      R3,??DataTable2_3
   \   00000044   8022               MOVS     R2,#+128
   \   00000046   ....               LDR      R1,??DataTable2_6
   \   00000048   ....               LDR      R0,??DataTable2_5
   \   0000004A   ........           BL       xTaskGenericCreate
    207          
    208          		++usCreationCount;
   \   0000004E   ....               LDR      R0,??DataTable2_7
   \   00000050   0088               LDRH     R0,[R0, #+0]
   \   00000052   401C               ADDS     R0,R0,#+1
   \   00000054   ....               LDR      R1,??DataTable2_7
   \   00000056   0880               STRH     R0,[R1, #+0]
   \   00000058   D9E7               B        ??vCreateTasks_0
    209          	}
    210          }
    211          /*-----------------------------------------------------------*/
    212          
    213          /* This is called to check that the creator task is still running and that there
    214          are not any more than four extra tasks. */

   \                                 In section .text, align 2, keep-with-next
    215          portBASE_TYPE xIsCreateTaskStillRunning( void )
    216          {
   \                     xIsCreateTaskStillRunning:
   \   00000000   10B5               PUSH     {R4,LR}
    217          static unsigned short usLastCreationCount = 0xfff;
    218          portBASE_TYPE xReturn = pdTRUE;
   \   00000002   0124               MOVS     R4,#+1
    219          static unsigned portBASE_TYPE uxTasksRunningNow;
    220          
    221          	if( usLastCreationCount == usCreationCount )
   \   00000004   ....               LDR      R0,??DataTable2_8
   \   00000006   0088               LDRH     R0,[R0, #+0]
   \   00000008   ....               LDR      R1,??DataTable2_7
   \   0000000A   0988               LDRH     R1,[R1, #+0]
   \   0000000C   8842               CMP      R0,R1
   \   0000000E   01D1               BNE      ??xIsCreateTaskStillRunning_0
    222          	{
    223          		xReturn = pdFALSE;
   \   00000010   0024               MOVS     R4,#+0
   \   00000012   03E0               B        ??xIsCreateTaskStillRunning_1
    224          	}
    225          	else
    226          	{
    227          		usLastCreationCount = usCreationCount;
   \                     ??xIsCreateTaskStillRunning_0:
   \   00000014   ....               LDR      R0,??DataTable2_8
   \   00000016   ....               LDR      R1,??DataTable2_7
   \   00000018   0988               LDRH     R1,[R1, #+0]
   \   0000001A   0180               STRH     R1,[R0, #+0]
    228          	}
    229          	
    230          	uxTasksRunningNow = ( unsigned portBASE_TYPE ) uxTaskGetNumberOfTasks();
   \                     ??xIsCreateTaskStillRunning_1:
   \   0000001C   ........           BL       uxTaskGetNumberOfTasks
   \   00000020   ....               LDR      R1,??DataTable2_9
   \   00000022   0860               STR      R0,[R1, #+0]
    231          
    232          	if( uxTasksRunningNow < uxTasksRunningAtStart )
   \   00000024   ....               LDR      R0,??DataTable2_9
   \   00000026   0068               LDR      R0,[R0, #+0]
   \   00000028   ....               LDR      R1,??DataTable2_2
   \   0000002A   0968               LDR      R1,[R1, #+0]
   \   0000002C   8842               CMP      R0,R1
   \   0000002E   01D2               BCS      ??xIsCreateTaskStillRunning_2
    233          	{
    234          		xReturn = pdFALSE;
   \   00000030   0024               MOVS     R4,#+0
   \   00000032   09E0               B        ??xIsCreateTaskStillRunning_3
    235          	}
    236          	else if( ( uxTasksRunningNow - uxTasksRunningAtStart ) > uxMaxNumberOfExtraTasksRunning )
   \                     ??xIsCreateTaskStillRunning_2:
   \   00000034   ....               LDR      R0,??DataTable2_10
   \   00000036   0068               LDR      R0,[R0, #+0]
   \   00000038   ....               LDR      R1,??DataTable2_9
   \   0000003A   0968               LDR      R1,[R1, #+0]
   \   0000003C   ....               LDR      R2,??DataTable2_2
   \   0000003E   1268               LDR      R2,[R2, #+0]
   \   00000040   891A               SUBS     R1,R1,R2
   \   00000042   8842               CMP      R0,R1
   \   00000044   00D2               BCS      ??xIsCreateTaskStillRunning_3
    237          	{
    238          		xReturn = pdFALSE;
   \   00000046   0024               MOVS     R4,#+0
    239          	}
    240          	else
    241          	{
    242          		/* Everything is okay. */
    243          	}
    244          
    245          	return xReturn;
   \                     ??xIsCreateTaskStillRunning_3:
   \   00000048   2000               MOVS     R0,R4
   \   0000004A   10BD               POP      {R4,PC}          ;; return
    246          }

   \                                 In section .data, align 2
   \                     ??usLastCreationCount:
   \   00000000   FF0F               DC16 4095

   \                                 In section .bss, align 4
   \                     ??uxTasksRunningNow:
   \   00000000                      DS8 4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     `?<Constant "CREATOR">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   ........           DC32     vCreateTasks

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   ........           DC32     uxTasksRunningAtStart

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   ........           DC32     xCreatedTask

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   ........           DC32     `?<Constant "SUICID1">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   ........           DC32     vSuicidalTask

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   ........           DC32     `?<Constant "SUICID2">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   ........           DC32     usCreationCount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   ........           DC32     ??usLastCreationCount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \   00000000   ........           DC32     ??uxTasksRunningNow

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \   00000000   ........           DC32     uxMaxNumberOfExtraTasksRunning

   \                                 In section .rodata, align 4
   \                     `?<Constant "CREATOR">`:
   \   00000000   43524541544F       DC8 "CREATOR"
   \              5200        

   \                                 In section .rodata, align 4
   \                     `?<Constant "SUICID1">`:
   \   00000000   535549434944       DC8 "SUICID1"
   \              3100        

   \                                 In section .rodata, align 4
   \                     `?<Constant "SUICID2">`:
   \   00000000   535549434944       DC8 "SUICID2"
   \              3200        
    247          
    248          

   Maximum stack usage in bytes:

     Function                  .cstack
     --------                  -------
     vCreateSuicidalTasks          24
     vCreateTasks                  32
     vSuicidalTask                 24
     xIsCreateTaskStillRunning      8


   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     usCreationCount                   2
     uxTasksRunningAtStart             4
     uxMaxNumberOfExtraTasksRunning    4
     xCreatedTask                      4
     vCreateSuicidalTasks             58
     vSuicidalTask                    62
     vCreateTasks                     90
     xIsCreateTaskStillRunning        76
     usLastCreationCount               2
     uxTasksRunningNow                 4
     ??DataTable2                      4
     ??DataTable2_1                    4
     ??DataTable2_2                    4
     ??DataTable2_3                    4
     ??DataTable2_4                    4
     ??DataTable2_5                    4
     ??DataTable2_6                    4
     ??DataTable2_7                    4
     ??DataTable2_8                    4
     ??DataTable2_9                    4
     ??DataTable2_10                   4
     ?<Constant "CREATOR">             8
     ?<Constant "SUICID1">             8
     ?<Constant "SUICID2">             8

 
  14 bytes in section .bss
   2 bytes in section .data
  28 bytes in section .rodata
 330 bytes in section .text
 
 330 bytes of CODE  memory
  28 bytes of CONST memory
  16 bytes of DATA  memory

Errors: none
Warnings: none
