###############################################################################
#                                                                             #
#                                                       06/Jul/2010  14:34:52 #
# IAR ANSI C/C++ Compiler V5.50.0.21878/W32 EVALUATION for ARM                #
# Copyright (C) 1999-2010 IAR Systems AB.                                     #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\User_Demo\Queue_Test.c                                 #
#    Command line =  E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\User_Demo\Queue_Test.c -D IAR_ARM_CM0 -lCN             #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\Debug\List\ --diag_suppress Pe550,Pa082,Pa039 -o       #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\Debug\Obj\ --no_cse --no_unroll --no_inline            #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M0  #
#                    -e --fpu=None --dlib_config "D:\Program                  #
#                    Files\ARM\INC\DLib_Config_Full.h" -I                     #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\..\common\include\ -I E:\FreeRTOS_Keil_IAR\FreeRTOS\De #
#                    mo\CORTEX_NUC1xx_Keil_IAR\..\..\source\include\ -I       #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\ -I E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_K #
#                    eil_IAR\NUC1xxBSP\NuvotonPlatform_Keil\Include\ -I       #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\NUC1xxBSP\NuvotonPlatform_Keil\Include\Driver\ -I      #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\NUC1xxBSP\CMSIS\CM0\ -I E:\FreeRTOS_Keil_IAR\FreeRTOS\ #
#                    Demo\CORTEX_NUC1xx_Keil_IAR\User_Demo\include\ -I        #
#                    "D:\Program Files\ARM\INC\" -Ol                          #
#    List file    =  E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\Debug\List\Queue_Test.lst                              #
#    Object file  =  E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\Debug\Obj\Queue_Test.o                                 #
#                                                                             #
#                                                                             #
###############################################################################

E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IAR\User_Demo\Queue_Test.c
      1          /*
      2              FreeRTOS V6.0.5 - Copyright (C) 2010 Real Time Engineers Ltd.
      3          
      4              ***************************************************************************
      5              *                                                                         *
      6              * If you are:                                                             *
      7              *                                                                         *
      8              *    + New to FreeRTOS,                                                   *
      9              *    + Wanting to learn FreeRTOS or multitasking in general quickly       *
     10              *    + Looking for basic training,                                        *
     11              *    + Wanting to improve your FreeRTOS skills and productivity           *
     12              *                                                                         *
     13              * then take a look at the FreeRTOS eBook                                  *
     14              *                                                                         *
     15              *        "Using the FreeRTOS Real Time Kernel - a Practical Guide"        *
     16              *                  http://www.FreeRTOS.org/Documentation                  *
     17              *                                                                         *
     18              * A pdf reference manual is also available.  Both are usually delivered   *
     19              * to your inbox within 20 minutes to two hours when purchased between 8am *
     20              * and 8pm GMT (although please allow up to 24 hours in case of            *
     21              * exceptional circumstances).  Thank you for your support!                *
     22              *                                                                         *
     23              ***************************************************************************
     24          
     25              This file is part of the FreeRTOS distribution.
     26          
     27              FreeRTOS is free software; you can redistribute it and/or modify it under
     28              the terms of the GNU General Public License (version 2) as published by the
     29              Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
     30              ***NOTE*** The exception to the GPL is included to allow you to distribute
     31              a combined work that includes FreeRTOS without being obliged to provide the
     32              source code for proprietary components outside of the FreeRTOS kernel.
     33              FreeRTOS is distributed in the hope that it will be useful, but WITHOUT
     34              ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
     35              FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
     36              more details. You should have received a copy of the GNU General Public 
     37              License and the FreeRTOS license exception along with FreeRTOS; if not it 
     38              can be viewed here: http://www.freertos.org/a00114.html and also obtained 
     39              by writing to Richard Barry, contact details for whom are available on the
     40              FreeRTOS WEB site.
     41          
     42              1 tab == 4 spaces!
     43          
     44              http://www.FreeRTOS.org - Documentation, latest information, license and
     45              contact details.
     46          
     47              http://www.SafeRTOS.com - A version that is certified for use in safety
     48              critical systems.
     49          
     50              http://www.OpenRTOS.com - Commercial support, development, porting,
     51              licensing and training services.
     52          */
     53          
     54          #include <stdio.h>
     55          
     56          #include "FreeRTOS.h"
     57          #include "task.h"
     58          #include "queue.h"
     59          
     60          #include "NUC1xx_Test.h"
     61          
     62          typedef struct AMessage
     63          {
     64              portCHAR ucMessageID;
     65              portCHAR ucData[ 5 ];
     66          }msg_t;
     67          
     68          #define MSG_COUNT	5
     69          

   \                                 In section .bss, align 4
     70          static msg_t msg[MSG_COUNT];
   \                     msg:
   \   00000000                      DS8 32

   \                                 In section .bss, align 1
     71          portCHAR index = 0;
   \                     index:
   \   00000000                      DS8 1
     72          
     73          #define QUEUE_TEST_STACK_SIZE		configMINIMAL_STACK_SIZE	
     74          #define QUEUE_CONSUMER_PRIORITY		( tskIDLE_PRIORITY + 1 )
     75          #define QUEUE_PRODUCER_PRIORITY		( tskIDLE_PRIORITY + 1 )
     76          
     77          void Queue_Task1( void *pvParameters );
     78          void Queue_Task2( void *pvParameters );
     79          

   \                                 In section .bss, align 4
     80          xQueueHandle xQueue;
   \                     xQueue:
   \   00000000                      DS8 4
     81          

   \                                 In section .text, align 2, keep-with-next
     82          void vStartQueueTasks( void )
     83          {
   \                     vStartQueueTasks:
   \   00000000   1FB5               PUSH     {R0-R4,LR}
     84          int i = 0;
   \   00000002   0024               MOVS     R4,#+0
     85          
     86          	/* Create the queue used by consumer and producer tasks. */
     87          	xQueue = xQueueCreate( MSG_COUNT, sizeof( msg_t ) );
   \   00000004   0621               MOVS     R1,#+6
   \   00000006   0520               MOVS     R0,#+5
   \   00000008   ........           BL       xQueueCreate
   \   0000000C   ....               LDR      R1,??DataTable2
   \   0000000E   0860               STR      R0,[R1, #+0]
     88          
     89          	for( index = 0; index < MSG_COUNT; index++ )
   \   00000010   ....               LDR      R0,??DataTable2_1
   \   00000012   0021               MOVS     R1,#+0
   \   00000014   0170               STRB     R1,[R0, #+0]
   \   00000016   24E0               B        ??vStartQueueTasks_0
     90          	{
     91          		msg[index].ucMessageID = index;
     92          		for( i = 0; i < 5; i++ )
     93          		{
     94          			msg[index].ucData[i] = index*5 + i;
   \                     ??vStartQueueTasks_1:
   \   00000018   ....               LDR      R0,??DataTable2_1
   \   0000001A   0078               LDRB     R0,[R0, #+0]
   \   0000001C   0621               MOVS     R1,#+6
   \   0000001E   4843               MULS     R0,R1,R0
   \   00000020   ....               LDR      R1,??DataTable2_2
   \   00000022   0818               ADDS     R0,R1,R0
   \   00000024   0019               ADDS     R0,R0,R4
   \   00000026   ....               LDR      R1,??DataTable2_1
   \   00000028   0978               LDRB     R1,[R1, #+0]
   \   0000002A   0522               MOVS     R2,#+5
   \   0000002C   5143               MULS     R1,R2,R1
   \   0000002E   0919               ADDS     R1,R1,R4
   \   00000030   4170               STRB     R1,[R0, #+1]
     95          			printf( "input data[%d] = %d\n", index*5+i, msg[index].ucData[i] );
   \   00000032   ....               LDR      R0,??DataTable2_1
   \   00000034   0078               LDRB     R0,[R0, #+0]
   \   00000036   0621               MOVS     R1,#+6
   \   00000038   4843               MULS     R0,R1,R0
   \   0000003A   ....               LDR      R1,??DataTable2_2
   \   0000003C   0818               ADDS     R0,R1,R0
   \   0000003E   0019               ADDS     R0,R0,R4
   \   00000040   4278               LDRB     R2,[R0, #+1]
   \   00000042   ....               LDR      R0,??DataTable2_1
   \   00000044   0078               LDRB     R0,[R0, #+0]
   \   00000046   0521               MOVS     R1,#+5
   \   00000048   4843               MULS     R0,R1,R0
   \   0000004A   0119               ADDS     R1,R0,R4
   \   0000004C   ....               LDR      R0,??DataTable2_3
   \   0000004E   ........           BL       printf
     96          		}
   \   00000052   641C               ADDS     R4,R4,#+1
   \                     ??vStartQueueTasks_2:
   \   00000054   052C               CMP      R4,#+5
   \   00000056   DFDB               BLT      ??vStartQueueTasks_1
   \   00000058   ....               LDR      R0,??DataTable2_1
   \   0000005A   0078               LDRB     R0,[R0, #+0]
   \   0000005C   401C               ADDS     R0,R0,#+1
   \   0000005E   ....               LDR      R1,??DataTable2_1
   \   00000060   0870               STRB     R0,[R1, #+0]
   \                     ??vStartQueueTasks_0:
   \   00000062   ....               LDR      R0,??DataTable2_1
   \   00000064   0078               LDRB     R0,[R0, #+0]
   \   00000066   0528               CMP      R0,#+5
   \   00000068   09D2               BCS      ??vStartQueueTasks_3
   \   0000006A   ....               LDR      R0,??DataTable2_1
   \   0000006C   0078               LDRB     R0,[R0, #+0]
   \   0000006E   0621               MOVS     R1,#+6
   \   00000070   4843               MULS     R0,R1,R0
   \   00000072   ....               LDR      R1,??DataTable2_2
   \   00000074   ....               LDR      R2,??DataTable2_1
   \   00000076   1278               LDRB     R2,[R2, #+0]
   \   00000078   0A54               STRB     R2,[R1, R0]
   \   0000007A   0024               MOVS     R4,#+0
   \   0000007C   EAE7               B        ??vStartQueueTasks_2
     97          	}
     98          	
     99          	xTaskCreate( Queue_Task1, ( signed char * ) "Q_Task1", QUEUE_TEST_STACK_SIZE, ( void * ) NULL, QUEUE_CONSUMER_PRIORITY, ( xTaskHandle * ) NULL );
   \                     ??vStartQueueTasks_3:
   \   0000007E   0020               MOVS     R0,#+0
   \   00000080   0390               STR      R0,[SP, #+12]
   \   00000082   0020               MOVS     R0,#+0
   \   00000084   0290               STR      R0,[SP, #+8]
   \   00000086   0020               MOVS     R0,#+0
   \   00000088   0190               STR      R0,[SP, #+4]
   \   0000008A   0120               MOVS     R0,#+1
   \   0000008C   0090               STR      R0,[SP, #+0]
   \   0000008E   0023               MOVS     R3,#+0
   \   00000090   8022               MOVS     R2,#+128
   \   00000092   ....               LDR      R1,??DataTable2_4
   \   00000094   ....               LDR      R0,??DataTable2_5
   \   00000096   ........           BL       xTaskGenericCreate
    100          	xTaskCreate( Queue_Task2, ( signed char * ) "Q_Task2", QUEUE_TEST_STACK_SIZE, ( void * ) NULL, QUEUE_PRODUCER_PRIORITY, ( xTaskHandle * ) NULL );
   \   0000009A   0020               MOVS     R0,#+0
   \   0000009C   0390               STR      R0,[SP, #+12]
   \   0000009E   0020               MOVS     R0,#+0
   \   000000A0   0290               STR      R0,[SP, #+8]
   \   000000A2   0020               MOVS     R0,#+0
   \   000000A4   0190               STR      R0,[SP, #+4]
   \   000000A6   0120               MOVS     R0,#+1
   \   000000A8   0090               STR      R0,[SP, #+0]
   \   000000AA   0023               MOVS     R3,#+0
   \   000000AC   8022               MOVS     R2,#+128
   \   000000AE   ....               LDR      R1,??DataTable2_6
   \   000000B0   ....               LDR      R0,??DataTable2_7
   \   000000B2   ........           BL       xTaskGenericCreate
    101          }
   \   000000B6   1FBD               POP      {R0-R4,PC}       ;; return
    102          
    103          /* Consumer */

   \                                 In section .text, align 2, keep-with-next
    104          void Queue_Task1( void *pvParameters )
    105          {
   \                     Queue_Task1:
   \   00000000   1CB5               PUSH     {R2-R4,LR}
    106          msg_t message;
    107          int i = 0;
   \   00000002   0024               MOVS     R4,#+0
   \   00000004   02E0               B        ??Queue_Task1_0
    108          	for( ;; )
    109          	{
    110          		if( xQueueReceive( xQueue, &message, 10 ) == pdPASS )
    111          		{
    112          			for( i = 0; i < 5; i++ )
    113          			{
    114          				printf( "getdata[%d] = %d\n", 5*message.ucMessageID+i, message.ucData[i] );
    115          			}
    116          		}
    117          		else
    118          		{
    119          			printf( "Get queue timeout!\n" );	
   \                     ??Queue_Task1_1:
   \   00000006   ....               LDR      R0,??DataTable2_8
   \   00000008   ........           BL       printf
    120          		}
   \                     ??Queue_Task1_0:
   \   0000000C   0023               MOVS     R3,#+0
   \   0000000E   0A22               MOVS     R2,#+10
   \   00000010   6946               MOV      R1,SP
   \   00000012   ....               LDR      R0,??DataTable2
   \   00000014   0068               LDR      R0,[R0, #+0]
   \   00000016   ........           BL       xQueueGenericReceive
   \   0000001A   0128               CMP      R0,#+1
   \   0000001C   F3D1               BNE      ??Queue_Task1_1
   \   0000001E   0024               MOVS     R4,#+0
   \                     ??Queue_Task1_2:
   \   00000020   052C               CMP      R4,#+5
   \   00000022   F3DA               BGE      ??Queue_Task1_0
   \   00000024   6846               MOV      R0,SP
   \   00000026   0019               ADDS     R0,R0,R4
   \   00000028   4278               LDRB     R2,[R0, #+1]
   \   0000002A   6846               MOV      R0,SP
   \   0000002C   0078               LDRB     R0,[R0, #+0]
   \   0000002E   0521               MOVS     R1,#+5
   \   00000030   4843               MULS     R0,R1,R0
   \   00000032   0119               ADDS     R1,R0,R4
   \   00000034   ....               LDR      R0,??DataTable2_9
   \   00000036   ........           BL       printf
   \   0000003A   641C               ADDS     R4,R4,#+1
   \   0000003C   F0E7               B        ??Queue_Task1_2
    121          	}	
    122          }
    123          
    124          /* Producer */

   \                                 In section .text, align 2, keep-with-next
    125          void Queue_Task2( void *pvParameters )
    126          {
   \                     Queue_Task2:
   \   00000000   80B5               PUSH     {R7,LR}
    127          	index = 0;
   \   00000002   ....               LDR      R0,??DataTable2_1
   \   00000004   0021               MOVS     R1,#+0
   \   00000006   0170               STRB     R1,[R0, #+0]
   \   00000008   02E0               B        ??Queue_Task2_0
    128          	for( ;; )
    129          	{
    130          		if( xQueueSend( xQueue, ( void * ) &msg[index], 10 ) != pdPASS )
    131          		{
    132          			printf( "Fill queue error\n" );	
   \                     ??Queue_Task2_1:
   \   0000000A   ....               LDR      R0,??DataTable2_10
   \   0000000C   ........           BL       printf
    133          		}
   \                     ??Queue_Task2_0:
   \   00000010   0023               MOVS     R3,#+0
   \   00000012   0A22               MOVS     R2,#+10
   \   00000014   ....               LDR      R0,??DataTable2_1
   \   00000016   0078               LDRB     R0,[R0, #+0]
   \   00000018   0621               MOVS     R1,#+6
   \   0000001A   4843               MULS     R0,R1,R0
   \   0000001C   ....               LDR      R1,??DataTable2_2
   \   0000001E   0918               ADDS     R1,R1,R0
   \   00000020   ....               LDR      R0,??DataTable2
   \   00000022   0068               LDR      R0,[R0, #+0]
   \   00000024   ........           BL       xQueueGenericSend
   \   00000028   0128               CMP      R0,#+1
   \   0000002A   EED1               BNE      ??Queue_Task2_1
    134          		else
    135          		{			
    136          			index++;
   \   0000002C   ....               LDR      R0,??DataTable2_1
   \   0000002E   0078               LDRB     R0,[R0, #+0]
   \   00000030   401C               ADDS     R0,R0,#+1
   \   00000032   ....               LDR      R1,??DataTable2_1
   \   00000034   0870               STRB     R0,[R1, #+0]
    137          			if( index > 4 )
   \   00000036   ....               LDR      R0,??DataTable2_1
   \   00000038   0078               LDRB     R0,[R0, #+0]
   \   0000003A   0528               CMP      R0,#+5
   \   0000003C   E8D3               BCC      ??Queue_Task2_0
    138          			{
    139          				index = 0;
   \   0000003E   ....               LDR      R0,??DataTable2_1
   \   00000040   0021               MOVS     R1,#+0
   \   00000042   0170               STRB     R1,[R0, #+0]
   \   00000044   E4E7               B        ??Queue_Task2_0
    140          			}
    141          		}
    142          	}
    143          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     xQueue

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   ........           DC32     index

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   ........           DC32     msg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   ........           DC32     `?<Constant "input data[%d] = %d\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   ........           DC32     `?<Constant "Q_Task1">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   ........           DC32     Queue_Task1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   ........           DC32     `?<Constant "Q_Task2">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   ........           DC32     Queue_Task2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   ........           DC32     `?<Constant "Get queue timeout!\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \   00000000   ........           DC32     `?<Constant "getdata[%d] = %d\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \   00000000   ........           DC32     `?<Constant "Fill queue error\\n">`

   \                                 In section .rodata, align 4
   \                     `?<Constant "input data[%d] = %d\\n">`:
   \   00000000   696E70757420       DC8 "input data[%d] = %d\012"
   \              646174615B25
   \              645D203D2025
   \              640A00      
   \   00000015   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Q_Task1">`:
   \   00000000   515F5461736B       DC8 "Q_Task1"
   \              3100        

   \                                 In section .rodata, align 4
   \                     `?<Constant "Q_Task2">`:
   \   00000000   515F5461736B       DC8 "Q_Task2"
   \              3200        

   \                                 In section .rodata, align 4
   \                     `?<Constant "getdata[%d] = %d\\n">`:
   \   00000000   676574646174       DC8 "getdata[%d] = %d\012"
   \              615B25645D20
   \              3D2025640A00
   \   00000012   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Get queue timeout!\\n">`:
   \   00000000   476574207175       DC8 "Get queue timeout!\012"
   \              657565207469
   \              6D656F757421
   \              0A00        

   \                                 In section .rodata, align 4
   \                     `?<Constant "Fill queue error\\n">`:
   \   00000000   46696C6C2071       DC8 "Fill queue error\012"
   \              756575652065
   \              72726F720A00
   \   00000012   0000               DC8 0, 0

   Maximum stack usage in bytes:

     Function         .cstack
     --------         -------
     Queue_Task1          16
     Queue_Task2           8
     vStartQueueTasks     24


   Section sizes:

     Function/Label                      Bytes
     --------------                      -----
     msg                                   32
     index                                  1
     xQueue                                 4
     vStartQueueTasks                     184
     Queue_Task1                           62
     Queue_Task2                           70
     ??DataTable2                           4
     ??DataTable2_1                         4
     ??DataTable2_2                         4
     ??DataTable2_3                         4
     ??DataTable2_4                         4
     ??DataTable2_5                         4
     ??DataTable2_6                         4
     ??DataTable2_7                         4
     ??DataTable2_8                         4
     ??DataTable2_9                         4
     ??DataTable2_10                        4
     ?<Constant "input data[%d] = %d\n">   24
     ?<Constant "Q_Task1">                  8
     ?<Constant "Q_Task2">                  8
     ?<Constant "getdata[%d] = %d\n">      20
     ?<Constant "Get queue timeout!\n">    20
     ?<Constant "Fill queue error\n">      20

 
  37 bytes in section .bss
 100 bytes in section .rodata
 360 bytes in section .text
 
 360 bytes of CODE  memory
 100 bytes of CONST memory
  37 bytes of DATA  memory

Errors: none
Warnings: none
