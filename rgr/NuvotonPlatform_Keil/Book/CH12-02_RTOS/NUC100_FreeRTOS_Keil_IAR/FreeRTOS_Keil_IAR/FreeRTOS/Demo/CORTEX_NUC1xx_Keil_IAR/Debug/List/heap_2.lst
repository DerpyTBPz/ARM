###############################################################################
#                                                                             #
#                                                       06/Jul/2010  14:34:55 #
# IAR ANSI C/C++ Compiler V5.50.0.21878/W32 EVALUATION for ARM                #
# Copyright (C) 1999-2010 IAR Systems AB.                                     #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\FreeRTOS_Keil_IAR\FreeRTOS\Source\portable\MemMang\he #
#                    ap_2.c                                                   #
#    Command line =  E:\FreeRTOS_Keil_IAR\FreeRTOS\Source\portable\MemMang\he #
#                    ap_2.c -D IAR_ARM_CM0 -lCN E:\FreeRTOS_Keil_IAR\FreeRTOS #
#                    \Demo\CORTEX_NUC1xx_Keil_IAR\Debug\List\                 #
#                    --diag_suppress Pe550,Pa082,Pa039 -o                     #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\Debug\Obj\ --no_cse --no_unroll --no_inline            #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M0  #
#                    -e --fpu=None --dlib_config "D:\Program                  #
#                    Files\ARM\INC\DLib_Config_Full.h" -I                     #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\..\common\include\ -I E:\FreeRTOS_Keil_IAR\FreeRTOS\De #
#                    mo\CORTEX_NUC1xx_Keil_IAR\..\..\source\include\ -I       #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\ -I E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_K #
#                    eil_IAR\NUC1xxBSP\NuvotonPlatform_Keil\Include\ -I       #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\NUC1xxBSP\NuvotonPlatform_Keil\Include\Driver\ -I      #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\NUC1xxBSP\CMSIS\CM0\ -I E:\FreeRTOS_Keil_IAR\FreeRTOS\ #
#                    Demo\CORTEX_NUC1xx_Keil_IAR\User_Demo\include\ -I        #
#                    "D:\Program Files\ARM\INC\" -Ol                          #
#    List file    =  E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\Debug\List\heap_2.lst                                  #
#    Object file  =  E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\Debug\Obj\heap_2.o                                     #
#                                                                             #
#                                                                             #
###############################################################################

E:\FreeRTOS_Keil_IAR\FreeRTOS\Source\portable\MemMang\heap_2.c
      1          /*
      2              FreeRTOS V6.0.5 - Copyright (C) 2010 Real Time Engineers Ltd.
      3          
      4              ***************************************************************************
      5              *                                                                         *
      6              * If you are:                                                             *
      7              *                                                                         *
      8              *    + New to FreeRTOS,                                                   *
      9              *    + Wanting to learn FreeRTOS or multitasking in general quickly       *
     10              *    + Looking for basic training,                                        *
     11              *    + Wanting to improve your FreeRTOS skills and productivity           *
     12              *                                                                         *
     13              * then take a look at the FreeRTOS eBook                                  *
     14              *                                                                         *
     15              *        "Using the FreeRTOS Real Time Kernel - a Practical Guide"        *
     16              *                  http://www.FreeRTOS.org/Documentation                  *
     17              *                                                                         *
     18              * A pdf reference manual is also available.  Both are usually delivered   *
     19              * to your inbox within 20 minutes to two hours when purchased between 8am *
     20              * and 8pm GMT (although please allow up to 24 hours in case of            *
     21              * exceptional circumstances).  Thank you for your support!                *
     22              *                                                                         *
     23              ***************************************************************************
     24          
     25              This file is part of the FreeRTOS distribution.
     26          
     27              FreeRTOS is free software; you can redistribute it and/or modify it under
     28              the terms of the GNU General Public License (version 2) as published by the
     29              Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
     30              ***NOTE*** The exception to the GPL is included to allow you to distribute
     31              a combined work that includes FreeRTOS without being obliged to provide the
     32              source code for proprietary components outside of the FreeRTOS kernel.
     33              FreeRTOS is distributed in the hope that it will be useful, but WITHOUT
     34              ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
     35              FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
     36              more details. You should have received a copy of the GNU General Public 
     37              License and the FreeRTOS license exception along with FreeRTOS; if not it 
     38              can be viewed here: http://www.freertos.org/a00114.html and also obtained 
     39              by writing to Richard Barry, contact details for whom are available on the
     40              FreeRTOS WEB site.
     41          
     42              1 tab == 4 spaces!
     43          
     44              http://www.FreeRTOS.org - Documentation, latest information, license and
     45              contact details.
     46          
     47              http://www.SafeRTOS.com - A version that is certified for use in safety
     48              critical systems.
     49          
     50              http://www.OpenRTOS.com - Commercial support, development, porting,
     51              licensing and training services.
     52          */
     53          
     54          /*
     55           * A sample implementation of pvPortMalloc() and vPortFree() that permits
     56           * allocated blocks to be freed, but does not combine adjacent free blocks
     57           * into a single larger block.
     58           *
     59           * See heap_1.c and heap_3.c for alternative implementations, and the memory
     60           * management pages of http://www.FreeRTOS.org for more information.
     61           */
     62          #include <stdlib.h>
     63          
     64          /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
     65          all the API functions to use the MPU wrappers.  That should only be done when
     66          task.h is included from an application file. */
     67          #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
     68          
     69          #include "FreeRTOS.h"
     70          #include "task.h"
     71          
     72          #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
     73          
     74          /* Allocate the memory for the heap.  The struct is used to force byte
     75          alignment without using any non-portable code. */
     76          static union xRTOS_HEAP
     77          {
     78          	#if portBYTE_ALIGNMENT == 8
     79          		volatile portDOUBLE dDummy;
     80          	#else
     81          		volatile unsigned long ulDummy;
     82          	#endif
     83          	unsigned char ucHeap[ configTOTAL_HEAP_SIZE ];

   \                                 In section .bss, align 8
     84          } xHeap;
   \                     xHeap:
   \   00000000                      DS8 13312
     85          
     86          /* Define the linked list structure.  This is used to link free blocks in order
     87          of their size. */
     88          typedef struct A_BLOCK_LINK
     89          {
     90          	struct A_BLOCK_LINK *pxNextFreeBlock;	/*<< The next free block in the list. */
     91          	size_t xBlockSize;						/*<< The size of the free block. */
     92          } xBlockLink;
     93          
     94          

   \                                 In section .rodata, align 2
     95          static const unsigned short  heapSTRUCT_SIZE	= ( sizeof( xBlockLink ) + portBYTE_ALIGNMENT - ( sizeof( xBlockLink ) % portBYTE_ALIGNMENT ) );
   \                     heapSTRUCT_SIZE:
   \   00000000   1000               DC16 16
     96          #define heapMINIMUM_BLOCK_SIZE	( ( size_t ) ( heapSTRUCT_SIZE * 2 ) )
     97          
     98          /* Create a couple of list links to mark the start and end of the list. */

   \                                 In section .bss, align 4
     99          static xBlockLink xStart, xEnd;
   \                     xStart:
   \   00000000                      DS8 8

   \                                 In section .bss, align 4
   \                     xEnd:
   \   00000000                      DS8 8
    100          
    101          /* Keeps track of the number of free bytes remaining, but says nothing about
    102          fragmentation. */

   \                                 In section .data, align 4
    103          static size_t xFreeBytesRemaining = configTOTAL_HEAP_SIZE;
   \                     xFreeBytesRemaining:
   \   00000000   00340000           DC32 13312
    104          
    105          /* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */
    106          
    107          /*
    108           * Insert a block into the list of free blocks - which is ordered by size of
    109           * the block.  Small blocks at the start of the list and large blocks at the end
    110           * of the list.
    111           */
    112          #define prvInsertBlockIntoFreeList( pxBlockToInsert )								\
    113          {																					\
    114          xBlockLink *pxIterator;																\
    115          size_t xBlockSize;																	\
    116          																					\
    117          	xBlockSize = pxBlockToInsert->xBlockSize;										\
    118          																					\
    119          	/* Iterate through the list until a block is found that has a larger size */	\
    120          	/* than the block we are inserting. */											\
    121          	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock->xBlockSize < xBlockSize; pxIterator = pxIterator->pxNextFreeBlock )	\
    122          	{																				\
    123          		/* There is nothing to do here - just iterate to the correct position. */	\
    124          	}																				\
    125          																					\
    126          	/* Update the list to include the block being inserted in the correct */		\
    127          	/* position. */																	\
    128          	pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;					\
    129          	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
    130          }
    131          /*-----------------------------------------------------------*/
    132          
    133          #define prvHeapInit()																\
    134          {																					\
    135          xBlockLink *pxFirstFreeBlock;														\
    136          																					\
    137          	/* xStart is used to hold a pointer to the first item in the list of free */	\
    138          	/* blocks.  The void cast is used to prevent compiler warnings. */				\
    139          	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;								\
    140          	xStart.xBlockSize = ( size_t ) 0;												\
    141          																					\
    142          	/* xEnd is used to mark the end of the list of free blocks. */					\
    143          	xEnd.xBlockSize = configTOTAL_HEAP_SIZE;										\
    144          	xEnd.pxNextFreeBlock = NULL;													\
    145          																					\
    146          	/* To start with there is a single free block that is sized to take up the		\
    147          	entire heap space. */															\
    148          	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;										\
    149          	pxFirstFreeBlock->xBlockSize = configTOTAL_HEAP_SIZE;							\
    150          	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;										\
    151          }
    152          /*-----------------------------------------------------------*/
    153          

   \                                 In section .text, align 2, keep-with-next
    154          void *pvPortMalloc( size_t xWantedSize )
    155          {
   \                     pvPortMalloc:
   \   00000000   38B5               PUSH     {R3-R5,LR}
   \   00000002   0500               MOVS     R5,R0
    156          xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
    157          static portBASE_TYPE xHeapHasBeenInitialised = pdFALSE;
    158          void *pvReturn = NULL;
   \   00000004   0024               MOVS     R4,#+0
    159          
    160          	vTaskSuspendAll();
   \   00000006   ........           BL       vTaskSuspendAll
    161          	{
    162          		/* If this is the first call to malloc then the heap will require
    163          		initialisation to setup the list of free blocks. */
    164          		if( xHeapHasBeenInitialised == pdFALSE )
   \   0000000A   ....               LDR      R0,??DataTable2
   \   0000000C   0068               LDR      R0,[R0, #+0]
   \   0000000E   0028               CMP      R0,#+0
   \   00000010   15D1               BNE      ??pvPortMalloc_0
    165          		{
    166          			prvHeapInit();
   \   00000012   ....               LDR      R0,??DataTable2_1
   \   00000014   ....               LDR      R1,??DataTable2_2
   \   00000016   0160               STR      R1,[R0, #+0]
   \   00000018   ....               LDR      R0,??DataTable2_1
   \   0000001A   0021               MOVS     R1,#+0
   \   0000001C   4160               STR      R1,[R0, #+4]
   \   0000001E   ....               LDR      R0,??DataTable2_3
   \   00000020   D021               MOVS     R1,#+208
   \   00000022   8901               LSLS     R1,R1,#+6        ;; #+13312
   \   00000024   4160               STR      R1,[R0, #+4]
   \   00000026   ....               LDR      R0,??DataTable2_3
   \   00000028   0021               MOVS     R1,#+0
   \   0000002A   0160               STR      R1,[R0, #+0]
   \   0000002C   ....               LDR      R0,??DataTable2_2
   \   0000002E   D021               MOVS     R1,#+208
   \   00000030   8901               LSLS     R1,R1,#+6        ;; #+13312
   \   00000032   4160               STR      R1,[R0, #+4]
   \   00000034   ....               LDR      R1,??DataTable2_3
   \   00000036   0160               STR      R1,[R0, #+0]
    167          			xHeapHasBeenInitialised = pdTRUE;
   \   00000038   ....               LDR      R0,??DataTable2
   \   0000003A   0121               MOVS     R1,#+1
   \   0000003C   0160               STR      R1,[R0, #+0]
    168          		}
    169          
    170          		/* The wanted size is increased so it can contain a xBlockLink
    171          		structure in addition to the requested amount of bytes. */
    172          		if( xWantedSize > 0 )
   \                     ??pvPortMalloc_0:
   \   0000003E   002D               CMP      R5,#+0
   \   00000040   0AD0               BEQ      ??pvPortMalloc_1
    173          		{
    174          			xWantedSize += heapSTRUCT_SIZE;
   \   00000042   ....               LDR      R0,??DataTable2_4
   \   00000044   0088               LDRH     R0,[R0, #+0]
   \   00000046   2D18               ADDS     R5,R5,R0
    175          
    176          			/* Ensure that blocks are always aligned to the required number of bytes. */
    177          			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   \   00000048   2800               MOVS     R0,R5
   \   0000004A   4007               LSLS     R0,R0,#+29
   \   0000004C   04D0               BEQ      ??pvPortMalloc_1
    178          			{
    179          				/* Byte alignment required. */
    180          				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   \   0000004E   2800               MOVS     R0,R5
   \   00000050   0830               ADDS     R0,R0,#+8
   \   00000052   6907               LSLS     R1,R5,#+29       ;; ZeroExtS R1,R5,#+29,#+29
   \   00000054   490F               LSRS     R1,R1,#+29
   \   00000056   451A               SUBS     R5,R0,R1
    181          			}
    182          		}
    183          
    184          		if( ( xWantedSize > 0 ) && ( xWantedSize < configTOTAL_HEAP_SIZE ) )
   \                     ??pvPortMalloc_1:
   \   00000058   002D               CMP      R5,#+0
   \   0000005A   35D0               BEQ      ??pvPortMalloc_2
   \   0000005C   D020               MOVS     R0,#+208
   \   0000005E   8001               LSLS     R0,R0,#+6        ;; #+13312
   \   00000060   8542               CMP      R5,R0
   \   00000062   31D2               BCS      ??pvPortMalloc_2
    185          		{
    186          			/* Blocks are stored in byte order - traverse the list from the start
    187          			(smallest) block until one of adequate size is found. */
    188          			pxPreviousBlock = &xStart;
   \   00000064   ....               LDR      R0,??DataTable2_1
    189          			pxBlock = xStart.pxNextFreeBlock;
   \   00000066   ....               LDR      R1,??DataTable2_1
   \   00000068   0968               LDR      R1,[R1, #+0]
   \   0000006A   01E0               B        ??pvPortMalloc_3
    190          			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock ) )
    191          			{
    192          				pxPreviousBlock = pxBlock;
   \                     ??pvPortMalloc_4:
   \   0000006C   0800               MOVS     R0,R1
    193          				pxBlock = pxBlock->pxNextFreeBlock;
   \   0000006E   0968               LDR      R1,[R1, #+0]
    194          			}
   \                     ??pvPortMalloc_3:
   \   00000070   4A68               LDR      R2,[R1, #+4]
   \   00000072   AA42               CMP      R2,R5
   \   00000074   02D2               BCS      ??pvPortMalloc_5
   \   00000076   0A68               LDR      R2,[R1, #+0]
   \   00000078   002A               CMP      R2,#+0
   \   0000007A   F7D1               BNE      ??pvPortMalloc_4
    195          
    196          			/* If we found the end marker then a block of adequate size was not found. */
    197          			if( pxBlock != &xEnd )
   \                     ??pvPortMalloc_5:
   \   0000007C   ....               LDR      R2,??DataTable2_3
   \   0000007E   9142               CMP      R1,R2
   \   00000080   22D0               BEQ      ??pvPortMalloc_2
    198          			{
    199          				/* Return the memory space - jumping over the xBlockLink structure
    200          				at its start. */
    201          				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   \   00000082   ....               LDR      R2,??DataTable2_4
   \   00000084   1288               LDRH     R2,[R2, #+0]
   \   00000086   0368               LDR      R3,[R0, #+0]
   \   00000088   9C18               ADDS     R4,R3,R2
    202          
    203          				/* This block is being returned for use so must be taken our of the
    204          				list of free blocks. */
    205          				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   \   0000008A   0A68               LDR      R2,[R1, #+0]
   \   0000008C   0260               STR      R2,[R0, #+0]
    206          
    207          				/* If the block is larger than required it can be split into two. */
    208          				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   \   0000008E   ....               LDR      R0,??DataTable2_4
   \   00000090   0088               LDRH     R0,[R0, #+0]
   \   00000092   0222               MOVS     R2,#+2
   \   00000094   5043               MULS     R0,R2,R0
   \   00000096   4A68               LDR      R2,[R1, #+4]
   \   00000098   521B               SUBS     R2,R2,R5
   \   0000009A   9042               CMP      R0,R2
   \   0000009C   0FD2               BCS      ??pvPortMalloc_6
    209          				{
    210          					/* This block is to be split into two.  Create a new block
    211          					following the number of bytes requested. The void cast is
    212          					used to prevent byte alignment warnings from the compiler. */
    213          					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   \   0000009E   4819               ADDS     R0,R1,R5
    214          
    215          					/* Calculate the sizes of two blocks split from the single
    216          					block. */
    217          					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   \   000000A0   4A68               LDR      R2,[R1, #+4]
   \   000000A2   521B               SUBS     R2,R2,R5
   \   000000A4   4260               STR      R2,[R0, #+4]
    218          					pxBlock->xBlockSize = xWantedSize;
   \   000000A6   4D60               STR      R5,[R1, #+4]
    219          
    220          					/* Insert the new block into the list of free blocks. */
    221          					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   \   000000A8   4268               LDR      R2,[R0, #+4]
   \   000000AA   ....               LDR      R1,??DataTable2_1
   \   000000AC   00E0               B        ??pvPortMalloc_7
   \                     ??pvPortMalloc_8:
   \   000000AE   0968               LDR      R1,[R1, #+0]
   \                     ??pvPortMalloc_7:
   \   000000B0   0B68               LDR      R3,[R1, #+0]
   \   000000B2   5B68               LDR      R3,[R3, #+4]
   \   000000B4   9342               CMP      R3,R2
   \   000000B6   FAD3               BCC      ??pvPortMalloc_8
   \   000000B8   0A68               LDR      R2,[R1, #+0]
   \   000000BA   0260               STR      R2,[R0, #+0]
   \   000000BC   0860               STR      R0,[R1, #+0]
    222          				}
    223          				
    224          				xFreeBytesRemaining -= xWantedSize;
   \                     ??pvPortMalloc_6:
   \   000000BE   ....               LDR      R0,??DataTable2_5
   \   000000C0   0068               LDR      R0,[R0, #+0]
   \   000000C2   401B               SUBS     R0,R0,R5
   \   000000C4   ....               LDR      R1,??DataTable2_5
   \   000000C6   0860               STR      R0,[R1, #+0]
    225          			}
    226          		}
    227          	}
    228          	xTaskResumeAll();
   \                     ??pvPortMalloc_2:
   \   000000C8   ........           BL       xTaskResumeAll
    229          
    230          	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
    231          	{
    232          		if( pvReturn == NULL )
    233          		{
    234          			extern void vApplicationMallocFailedHook( void );
    235          			vApplicationMallocFailedHook();
    236          		}
    237          	}
    238          	#endif
    239          
    240          	return pvReturn;
   \   000000CC   2000               MOVS     R0,R4
   \   000000CE   32BD               POP      {R1,R4,R5,PC}    ;; return
    241          }

   \                                 In section .bss, align 4
   \                     ??xHeapHasBeenInitialised:
   \   00000000                      DS8 4
    242          /*-----------------------------------------------------------*/
    243          

   \                                 In section .text, align 2, keep-with-next
    244          void vPortFree( void *pv )
    245          {
   \                     vPortFree:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
    246          unsigned char *puc = ( unsigned char * ) pv;
    247          xBlockLink *pxLink;
    248          
    249          	if( pv )
   \   00000004   002C               CMP      R4,#+0
   \   00000006   18D0               BEQ      ??vPortFree_0
    250          	{
    251          		/* The memory being freed will have an xBlockLink structure immediately
    252          		before it. */
    253          		puc -= heapSTRUCT_SIZE;
   \   00000008   ....               LDR      R0,??DataTable2_4
   \   0000000A   0088               LDRH     R0,[R0, #+0]
   \   0000000C   4142               RSBS     R1,R0,#+0
   \   0000000E   6418               ADDS     R4,R4,R1
    254          
    255          		/* This casting is to keep the compiler from issuing warnings. */
    256          		pxLink = ( void * ) puc;
    257          
    258          		vTaskSuspendAll();
   \   00000010   ........           BL       vTaskSuspendAll
    259          		{
    260          			/* Add this block to the list of free blocks. */
    261          			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );
   \   00000014   6168               LDR      R1,[R4, #+4]
   \   00000016   ....               LDR      R0,??DataTable2_1
   \   00000018   00E0               B        ??vPortFree_1
   \                     ??vPortFree_2:
   \   0000001A   0068               LDR      R0,[R0, #+0]
   \                     ??vPortFree_1:
   \   0000001C   0268               LDR      R2,[R0, #+0]
   \   0000001E   5268               LDR      R2,[R2, #+4]
   \   00000020   8A42               CMP      R2,R1
   \   00000022   FAD3               BCC      ??vPortFree_2
   \   00000024   0168               LDR      R1,[R0, #+0]
   \   00000026   2160               STR      R1,[R4, #+0]
   \   00000028   0460               STR      R4,[R0, #+0]
    262          			xFreeBytesRemaining += pxLink->xBlockSize;
   \   0000002A   ....               LDR      R0,??DataTable2_5
   \   0000002C   0068               LDR      R0,[R0, #+0]
   \   0000002E   6168               LDR      R1,[R4, #+4]
   \   00000030   4018               ADDS     R0,R0,R1
   \   00000032   ....               LDR      R1,??DataTable2_5
   \   00000034   0860               STR      R0,[R1, #+0]
    263          		}
    264          		xTaskResumeAll();
   \   00000036   ........           BL       xTaskResumeAll
    265          	}
    266          }
   \                     ??vPortFree_0:
   \   0000003A   10BD               POP      {R4,PC}          ;; return
    267          /*-----------------------------------------------------------*/
    268          

   \                                 In section .text, align 2, keep-with-next
    269          size_t xPortGetFreeHeapSize( void )
    270          {
    271          	return xFreeBytesRemaining;
   \                     xPortGetFreeHeapSize:
   \   00000000   ....               LDR      R0,??DataTable2_5
   \   00000002   0068               LDR      R0,[R0, #+0]
   \   00000004   7047               BX       LR               ;; return
    272          }
    273          /*-----------------------------------------------------------*/
    274          

   \                                 In section .text, align 2, keep-with-next
    275          void vPortInitialiseBlocks( void )
    276          {
    277          	/* This just exists to keep the linker quiet. */
    278          }
   \                     vPortInitialiseBlocks:
   \   00000000   7047               BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     ??xHeapHasBeenInitialised

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   ........           DC32     xStart

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   ........           DC32     xHeap

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   ........           DC32     xEnd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   ........           DC32     heapSTRUCT_SIZE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   ........           DC32     xFreeBytesRemaining

   Maximum stack usage in bytes:

     Function              .cstack
     --------              -------
     pvPortMalloc              16
     vPortFree                  8
     vPortInitialiseBlocks      0
     xPortGetFreeHeapSize       0


   Section sizes:

     Function/Label          Bytes
     --------------          -----
     xHeap                   13312
     heapSTRUCT_SIZE             2
     xStart                      8
     xEnd                        8
     xFreeBytesRemaining         4
     pvPortMalloc              208
     xHeapHasBeenInitialised     4
     vPortFree                  60
     xPortGetFreeHeapSize        6
     vPortInitialiseBlocks       2
     ??DataTable2                4
     ??DataTable2_1              4
     ??DataTable2_2              4
     ??DataTable2_3              4
     ??DataTable2_4              4
     ??DataTable2_5              4

 
 13 332 bytes in section .bss
      4 bytes in section .data
      2 bytes in section .rodata
    300 bytes in section .text
 
    300 bytes of CODE  memory
      2 bytes of CONST memory
 13 336 bytes of DATA  memory

Errors: none
Warnings: none
