###############################################################################
#                                                                             #
#                                                       06/Jul/2010  14:34:55 #
# IAR ANSI C/C++ Compiler V5.50.0.21878/W32 EVALUATION for ARM                #
# Copyright (C) 1999-2010 IAR Systems AB.                                     #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\FreeRTOS_Keil_IAR\FreeRTOS\Source\list.c              #
#    Command line =  E:\FreeRTOS_Keil_IAR\FreeRTOS\Source\list.c -D           #
#                    IAR_ARM_CM0 -lCN E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORT #
#                    EX_NUC1xx_Keil_IAR\Debug\List\ --diag_suppress           #
#                    Pe550,Pa082,Pa039 -o E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\ #
#                    CORTEX_NUC1xx_Keil_IAR\Debug\Obj\ --no_cse --no_unroll   #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M0  #
#                    -e --fpu=None --dlib_config "D:\Program                  #
#                    Files\ARM\INC\DLib_Config_Full.h" -I                     #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\..\common\include\ -I E:\FreeRTOS_Keil_IAR\FreeRTOS\De #
#                    mo\CORTEX_NUC1xx_Keil_IAR\..\..\source\include\ -I       #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\ -I E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_K #
#                    eil_IAR\NUC1xxBSP\NuvotonPlatform_Keil\Include\ -I       #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\NUC1xxBSP\NuvotonPlatform_Keil\Include\Driver\ -I      #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\NUC1xxBSP\CMSIS\CM0\ -I E:\FreeRTOS_Keil_IAR\FreeRTOS\ #
#                    Demo\CORTEX_NUC1xx_Keil_IAR\User_Demo\include\ -I        #
#                    "D:\Program Files\ARM\INC\" -Ol                          #
#    List file    =  E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\Debug\List\list.lst                                    #
#    Object file  =  E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\Debug\Obj\list.o                                       #
#                                                                             #
#                                                                             #
###############################################################################

E:\FreeRTOS_Keil_IAR\FreeRTOS\Source\list.c
      1          /*
      2              FreeRTOS V6.0.5 - Copyright (C) 2010 Real Time Engineers Ltd.
      3          
      4              ***************************************************************************
      5              *                                                                         *
      6              * If you are:                                                             *
      7              *                                                                         *
      8              *    + New to FreeRTOS,                                                   *
      9              *    + Wanting to learn FreeRTOS or multitasking in general quickly       *
     10              *    + Looking for basic training,                                        *
     11              *    + Wanting to improve your FreeRTOS skills and productivity           *
     12              *                                                                         *
     13              * then take a look at the FreeRTOS eBook                                  *
     14              *                                                                         *
     15              *        "Using the FreeRTOS Real Time Kernel - a Practical Guide"        *
     16              *                  http://www.FreeRTOS.org/Documentation                  *
     17              *                                                                         *
     18              * A pdf reference manual is also available.  Both are usually delivered   *
     19              * to your inbox within 20 minutes to two hours when purchased between 8am *
     20              * and 8pm GMT (although please allow up to 24 hours in case of            *
     21              * exceptional circumstances).  Thank you for your support!                *
     22              *                                                                         *
     23              ***************************************************************************
     24          
     25              This file is part of the FreeRTOS distribution.
     26          
     27              FreeRTOS is free software; you can redistribute it and/or modify it under
     28              the terms of the GNU General Public License (version 2) as published by the
     29              Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
     30              ***NOTE*** The exception to the GPL is included to allow you to distribute
     31              a combined work that includes FreeRTOS without being obliged to provide the
     32              source code for proprietary components outside of the FreeRTOS kernel.
     33              FreeRTOS is distributed in the hope that it will be useful, but WITHOUT
     34              ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
     35              FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
     36              more details. You should have received a copy of the GNU General Public 
     37              License and the FreeRTOS license exception along with FreeRTOS; if not it 
     38              can be viewed here: http://www.freertos.org/a00114.html and also obtained 
     39              by writing to Richard Barry, contact details for whom are available on the
     40              FreeRTOS WEB site.
     41          
     42              1 tab == 4 spaces!
     43          
     44              http://www.FreeRTOS.org - Documentation, latest information, license and
     45              contact details.
     46          
     47              http://www.SafeRTOS.com - A version that is certified for use in safety
     48              critical systems.
     49          
     50              http://www.OpenRTOS.com - Commercial support, development, porting,
     51              licensing and training services.
     52          */
     53          
     54          
     55          #include <stdlib.h>
     56          #include "FreeRTOS.h"
     57          #include "list.h"
     58          
     59          /*-----------------------------------------------------------
     60           * PUBLIC LIST API documented in list.h
     61           *----------------------------------------------------------*/
     62          

   \                                 In section .text, align 2, keep-with-next
     63          void vListInitialise( xList *pxList )
     64          {
     65          	/* The list structure contains a list item which is used to mark the
     66          	end of the list.  To initialise the list the list end is inserted
     67          	as the only list entry. */
     68          	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   \                     vListInitialise:
   \   00000000   0100               MOVS     R1,R0
   \   00000002   0831               ADDS     R1,R1,#+8
   \   00000004   4160               STR      R1,[R0, #+4]
     69          
     70          	/* The list end value is the highest possible value in the list to
     71          	ensure it remains at the end of the list. */
     72          	pxList->xListEnd.xItemValue = portMAX_DELAY;
   \   00000006   0021               MOVS     R1,#+0
   \   00000008   C943               MVNS     R1,R1            ;; #-1
   \   0000000A   8160               STR      R1,[R0, #+8]
     73          
     74          	/* The list end next and previous pointers point to itself so we know
     75          	when the list is empty. */
     76          	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   \   0000000C   0100               MOVS     R1,R0
   \   0000000E   0831               ADDS     R1,R1,#+8
   \   00000010   C160               STR      R1,[R0, #+12]
     77          	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   \   00000012   0100               MOVS     R1,R0
   \   00000014   0831               ADDS     R1,R1,#+8
   \   00000016   0161               STR      R1,[R0, #+16]
     78          
     79          	pxList->uxNumberOfItems = 0;
   \   00000018   0021               MOVS     R1,#+0
   \   0000001A   0160               STR      R1,[R0, #+0]
     80          }
   \   0000001C   7047               BX       LR               ;; return
     81          /*-----------------------------------------------------------*/
     82          

   \                                 In section .text, align 2, keep-with-next
     83          void vListInitialiseItem( xListItem *pxItem )
     84          {
     85          	/* Make sure the list item is not recorded as being on a list. */
     86          	pxItem->pvContainer = NULL;
   \                     vListInitialiseItem:
   \   00000000   0021               MOVS     R1,#+0
   \   00000002   0161               STR      R1,[R0, #+16]
     87          }
   \   00000004   7047               BX       LR               ;; return
     88          /*-----------------------------------------------------------*/
     89          

   \                                 In section .text, align 2, keep-with-next
     90          void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
     91          {
     92          volatile xListItem * pxIndex;
     93          
     94          	/* Insert a new list item into pxList, but rather than sort the list,
     95          	makes the new list item the last item to be removed by a call to
     96          	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
     97          	the pxIndex member. */
     98          	pxIndex = pxList->pxIndex;
   \                     vListInsertEnd:
   \   00000000   4268               LDR      R2,[R0, #+4]
     99          
    100          	pxNewListItem->pxNext = pxIndex->pxNext;
   \   00000002   5368               LDR      R3,[R2, #+4]
   \   00000004   4B60               STR      R3,[R1, #+4]
    101          	pxNewListItem->pxPrevious = pxList->pxIndex;
   \   00000006   4368               LDR      R3,[R0, #+4]
   \   00000008   8B60               STR      R3,[R1, #+8]
    102          	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   \   0000000A   5368               LDR      R3,[R2, #+4]
   \   0000000C   9960               STR      R1,[R3, #+8]
    103          	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   \   0000000E   5160               STR      R1,[R2, #+4]
    104          	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   \   00000010   4160               STR      R1,[R0, #+4]
    105          
    106          	/* Remember which list the item is in. */
    107          	pxNewListItem->pvContainer = ( void * ) pxList;
   \   00000012   0861               STR      R0,[R1, #+16]
    108          
    109          	( pxList->uxNumberOfItems )++;
   \   00000014   0168               LDR      R1,[R0, #+0]
   \   00000016   491C               ADDS     R1,R1,#+1
   \   00000018   0160               STR      R1,[R0, #+0]
    110          }
   \   0000001A   7047               BX       LR               ;; return
    111          /*-----------------------------------------------------------*/
    112          

   \                                 In section .text, align 2, keep-with-next
    113          void vListInsert( xList *pxList, xListItem *pxNewListItem )
    114          {
   \                     vListInsert:
   \   00000000   10B5               PUSH     {R4,LR}
    115          volatile xListItem *pxIterator;
    116          portTickType xValueOfInsertion;
    117          
    118          	/* Insert the new list item into the list, sorted in ulListItem order. */
    119          	xValueOfInsertion = pxNewListItem->xItemValue;
   \   00000002   0B68               LDR      R3,[R1, #+0]
    120          
    121          	/* If the list already contains a list item with the same item value then
    122          	the new list item should be placed after it.  This ensures that TCB's which
    123          	are stored in ready lists (all of which have the same ulListItem value)
    124          	get an equal share of the CPU.  However, if the xItemValue is the same as 
    125          	the back marker the iteration loop below will not end.  This means we need
    126          	to guard against this by checking the value first and modifying the 
    127          	algorithm slightly if necessary. */
    128          	if( xValueOfInsertion == portMAX_DELAY )
   \   00000004   0022               MOVS     R2,#+0
   \   00000006   D243               MVNS     R2,R2            ;; #-1
   \   00000008   9342               CMP      R3,R2
   \   0000000A   01D1               BNE      ??vListInsert_0
    129          	{
    130          		pxIterator = pxList->xListEnd.pxPrevious;
   \   0000000C   0269               LDR      R2,[R0, #+16]
   \   0000000E   07E0               B        ??vListInsert_1
    131          	}
    132          	else
    133          	{
    134          		/* *** NOTE ***********************************************************
    135          		If you find your application is crashing here then likely causes are:
    136          			1) Stack overflow - 
    137          			   see http://www.freertos.org/Stacks-and-stack-overflow-checking.html
    138          			2) Incorrect interrupt priority assignment, especially on Cortex M3 
    139          			   parts where numerically high priority values denote low actual 
    140          			   interrupt priories, which can seem counter intuitive.  See 
    141          			   configMAX_SYSCALL_INTERRUPT_PRIORITY on http://www.freertos.org/a00110.html
    142          			3) Calling an API function from within a critical section or when
    143          			   the scheduler is suspended.
    144          			4) Using a queue or semaphore before it has been initialised or
    145          			   before the scheduler has been started (are interrupts firing
    146          			   before vTaskStartScheduler() has been called?).
    147          		See http://www.freertos.org/FAQHelp.html for more tips. 
    148          		**********************************************************************/
    149          		
    150          		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   \                     ??vListInsert_0:
   \   00000010   0200               MOVS     R2,R0
   \   00000012   0832               ADDS     R2,R2,#+8
   \   00000014   00E0               B        ??vListInsert_2
   \                     ??vListInsert_3:
   \   00000016   5268               LDR      R2,[R2, #+4]
   \                     ??vListInsert_2:
   \   00000018   5468               LDR      R4,[R2, #+4]
   \   0000001A   2468               LDR      R4,[R4, #+0]
   \   0000001C   A342               CMP      R3,R4
   \   0000001E   FAD2               BCS      ??vListInsert_3
    151          		{
    152          			/* There is nothing to do here, we are just iterating to the
    153          			wanted insertion position. */
    154          		}
    155          	}
    156          
    157          	pxNewListItem->pxNext = pxIterator->pxNext;
   \                     ??vListInsert_1:
   \   00000020   5368               LDR      R3,[R2, #+4]
   \   00000022   4B60               STR      R3,[R1, #+4]
    158          	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   \   00000024   4B68               LDR      R3,[R1, #+4]
   \   00000026   9960               STR      R1,[R3, #+8]
    159          	pxNewListItem->pxPrevious = pxIterator;
   \   00000028   8A60               STR      R2,[R1, #+8]
    160          	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   \   0000002A   5160               STR      R1,[R2, #+4]
    161          
    162          	/* Remember which list the item is in.  This allows fast removal of the
    163          	item later. */
    164          	pxNewListItem->pvContainer = ( void * ) pxList;
   \   0000002C   0861               STR      R0,[R1, #+16]
    165          
    166          	( pxList->uxNumberOfItems )++;
   \   0000002E   0168               LDR      R1,[R0, #+0]
   \   00000030   491C               ADDS     R1,R1,#+1
   \   00000032   0160               STR      R1,[R0, #+0]
    167          }
   \   00000034   10BD               POP      {R4,PC}          ;; return
    168          /*-----------------------------------------------------------*/
    169          

   \                                 In section .text, align 2, keep-with-next
    170          void vListRemove( xListItem *pxItemToRemove )
    171          {
   \                     vListRemove:
   \   00000000   00B5               PUSH     {LR}
    172          xList * pxList;
    173          
    174          	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   \   00000002   4168               LDR      R1,[R0, #+4]
   \   00000004   8268               LDR      R2,[R0, #+8]
   \   00000006   8A60               STR      R2,[R1, #+8]
    175          	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   \   00000008   8168               LDR      R1,[R0, #+8]
   \   0000000A   4268               LDR      R2,[R0, #+4]
   \   0000000C   4A60               STR      R2,[R1, #+4]
    176          	
    177          	/* The list item knows which list it is in.  Obtain the list from the list
    178          	item. */
    179          	pxList = ( xList * ) pxItemToRemove->pvContainer;
   \   0000000E   0169               LDR      R1,[R0, #+16]
    180          
    181          	/* Make sure the index is left pointing to a valid item. */
    182          	if( pxList->pxIndex == pxItemToRemove )
   \   00000010   4A68               LDR      R2,[R1, #+4]
   \   00000012   8242               CMP      R2,R0
   \   00000014   01D1               BNE      ??vListRemove_0
    183          	{
    184          		pxList->pxIndex = pxItemToRemove->pxPrevious;
   \   00000016   8268               LDR      R2,[R0, #+8]
   \   00000018   4A60               STR      R2,[R1, #+4]
    185          	}
    186          
    187          	pxItemToRemove->pvContainer = NULL;
   \                     ??vListRemove_0:
   \   0000001A   0022               MOVS     R2,#+0
   \   0000001C   0261               STR      R2,[R0, #+16]
    188          	( pxList->uxNumberOfItems )--;
   \   0000001E   0868               LDR      R0,[R1, #+0]
   \   00000020   401E               SUBS     R0,R0,#+1
   \   00000022   0860               STR      R0,[R1, #+0]
    189          }
   \   00000024   00BD               POP      {PC}             ;; return
    190          /*-----------------------------------------------------------*/
    191          

   Maximum stack usage in bytes:

     Function            .cstack
     --------            -------
     vListInitialise          0
     vListInitialiseItem      0
     vListInsert              8
     vListInsertEnd           0
     vListRemove              4


   Section sizes:

     Function/Label      Bytes
     --------------      -----
     vListInitialise       30
     vListInitialiseItem    6
     vListInsertEnd        28
     vListInsert           54
     vListRemove           38

 
 156 bytes in section .text
 
 156 bytes of CODE memory

Errors: none
Warnings: none
