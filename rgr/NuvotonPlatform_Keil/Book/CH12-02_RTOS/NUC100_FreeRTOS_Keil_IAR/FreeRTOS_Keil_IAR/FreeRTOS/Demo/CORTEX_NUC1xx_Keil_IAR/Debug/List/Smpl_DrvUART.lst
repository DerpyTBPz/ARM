###############################################################################
#                                                                             #
#                                                       06/Jul/2010  14:34:53 #
# IAR ANSI C/C++ Compiler V5.50.0.21878/W32 EVALUATION for ARM                #
# Copyright (C) 1999-2010 IAR Systems AB.                                     #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\User_Demo\Smpl_DrvUART.c                               #
#    Command line =  E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\User_Demo\Smpl_DrvUART.c -D IAR_ARM_CM0 -lCN           #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\Debug\List\ --diag_suppress Pe550,Pa082,Pa039 -o       #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\Debug\Obj\ --no_cse --no_unroll --no_inline            #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M0  #
#                    -e --fpu=None --dlib_config "D:\Program                  #
#                    Files\ARM\INC\DLib_Config_Full.h" -I                     #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\..\common\include\ -I E:\FreeRTOS_Keil_IAR\FreeRTOS\De #
#                    mo\CORTEX_NUC1xx_Keil_IAR\..\..\source\include\ -I       #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\ -I E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_K #
#                    eil_IAR\NUC1xxBSP\NuvotonPlatform_Keil\Include\ -I       #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\NUC1xxBSP\NuvotonPlatform_Keil\Include\Driver\ -I      #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\NUC1xxBSP\CMSIS\CM0\ -I E:\FreeRTOS_Keil_IAR\FreeRTOS\ #
#                    Demo\CORTEX_NUC1xx_Keil_IAR\User_Demo\include\ -I        #
#                    "D:\Program Files\ARM\INC\" -Ol                          #
#    List file    =  E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\Debug\List\Smpl_DrvUART.lst                            #
#    Object file  =  E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\Debug\Obj\Smpl_DrvUART.o                               #
#                                                                             #
#                                                                             #
###############################################################################

E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IAR\User_Demo\Smpl_DrvUART.c
      1          /*---------------------------------------------------------------------------------------------------------*/
      2          /*                                                                                                         */
      3          /* Copyright(c) 2009 Nuvoton Technology Corp. All rights reserved.                                         */
      4          /*                                                                                                         */
      5          /*---------------------------------------------------------------------------------------------------------*/
      6          #include <stdio.h>
      7          #include "DrvUART.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __??Code16?? __code __interwork void NVIC_EnableIRQ(IRQn_Type)
   \                     NVIC_EnableIRQ:
   \   00000000   40B2               SXTB     R0,R0
   \   00000002   0100               MOVS     R1,R0
   \   00000004   4909               LSRS     R1,R1,#+5
   \   00000006   0422               MOVS     R2,#+4
   \   00000008   5143               MULS     R1,R2,R1
   \   0000000A   ....               LDR      R2,??DataTable4  ;; 0xe000e100
   \   0000000C   0123               MOVS     R3,#+1
   \   0000000E   C006               LSLS     R0,R0,#+27       ;; ZeroExtS R0,R0,#+27,#+27
   \   00000010   C00E               LSRS     R0,R0,#+27
   \   00000012   8340               LSLS     R3,R3,R0
   \   00000014   5350               STR      R3,[R2, R1]
   \   00000016   7047               BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __??Code16?? __code __interwork void NVIC_DisableIRQ(IRQn_Type)
   \                     NVIC_DisableIRQ:
   \   00000000   40B2               SXTB     R0,R0
   \   00000002   0100               MOVS     R1,R0
   \   00000004   4909               LSRS     R1,R1,#+5
   \   00000006   0422               MOVS     R2,#+4
   \   00000008   5143               MULS     R1,R2,R1
   \   0000000A   ....               LDR      R2,??DataTable4_1  ;; 0xe000e180
   \   0000000C   0123               MOVS     R3,#+1
   \   0000000E   C006               LSLS     R0,R0,#+27       ;; ZeroExtS R0,R0,#+27,#+27
   \   00000010   C00E               LSRS     R0,R0,#+27
   \   00000012   8340               LSLS     R3,R3,R0
   \   00000014   5350               STR      R3,[R2, R1]
   \   00000016   7047               BX       LR               ;; return
      8          #include "DrvGPIO.h"
      9          #include "NUC1xx.h"
     10          #include "NUC1xx_Test.h"
     11          
     12          #include "FreeRTOS.h"
     13          #include "task.h"
     14          
     15          #define RXBUFSIZE 64
     16          #define UARTStack_Size	configMINIMAL_STACK_SIZE	
     17          
     18          static int32_t vUART_Test(void);
     19          static portTASK_FUNCTION_PROTO( vUARTTask, pvParameters );
     20          
     21          /*---------------------------------------------------------------------------------------------------------*/
     22          /* Global variables                                                                                        */
     23          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .bss, align 4
     24          volatile uint8_t comRbuf[RXBUFSIZE];
   \                     comRbuf:
   \   00000000                      DS8 64

   \                                 In section .bss, align 2
     25          volatile uint16_t comRbytes = 0;		/* Available receiving bytes */
   \                     comRbytes:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     26          volatile uint16_t comRhead 	= 0;
   \                     comRhead:
   \   00000000                      DS8 2

   \                                 In section .bss, align 2
     27          volatile uint16_t comRtail 	= 0;
   \                     comRtail:
   \   00000000                      DS8 2

   \                                 In section .data, align 4
     28          volatile int32_t g_bWait 	= TRUE;
   \                     g_bWait:
   \   00000000   01000000           DC32 1
     29          
     30          /*---------------------------------------------------------------------------------------------------------*/
     31          /* UART Interrupt Handler                                                                           	   */
     32          /*---------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
     33          void UART02_IRQHandler(void)
     34          {
   \                     UART02_IRQHandler:
   \   00000000   80B5               PUSH     {R7,LR}
     35           	uint8_t bInChar[1]={0xFF};
   \   00000002   6846               MOV      R0,SP
   \   00000004   ....               LDR      R1,??DataTable3
   \   00000006   0A78               LDRB     R2,[R1, #0]
   \   00000008   0270               STRB     R2,[R0, #0]
     36          	uint32_t u32IntStatus;
     37          	
     38          	u32IntStatus = inpw(&UART0->ISR);
   \   0000000A   ....               LDR      R0,??DataTable4_2  ;; 0x4005001c
   \   0000000C   0068               LDR      R0,[R0, #+0]
     39          	
     40          	if(u32IntStatus & RDAIE)
   \   0000000E   0100               MOVS     R1,R0
   \   00000010   C907               LSLS     R1,R1,#+31
   \   00000012   41D5               BPL      ??UART02_IRQHandler_0
     41          	{
     42          		printf("\nInput:");
   \   00000014   ....               LDR      R0,??DataTable4_3
   \   00000016   ........           BL       printf
   \   0000001A   09E0               B        ??UART02_IRQHandler_1
     43          		
     44          		/* Get all the input characters */
     45          		while(UART0->ISR.RDA_IF==1) 
     46          		{
     47          		    /* Check RX empty */
     48          			while (UART0->FSR.RX_EMPTY == 1);
     49          			bInChar[0] = UART0->DATA;					  
     50          
     51          			printf("%c ", bInChar[0]);
     52          			
     53          			if(bInChar[0] == '0')	
     54          			{	
     55          				g_bWait = FALSE;
     56          			}
     57          		
     58          			/* Check if buffer full */
     59          			if(comRbytes < RXBUFSIZE)
     60          			{
     61          				/* Enqueue the character */
     62          				comRbuf[comRtail] = bInChar[0];
     63          				comRtail = (comRtail == (RXBUFSIZE-1)) ? 0 : (comRtail+1);
   \                     ??UART02_IRQHandler_2:
   \   0000001C   ....               LDR      R0,??DataTable4_4
   \   0000001E   0088               LDRH     R0,[R0, #+0]
   \   00000020   401C               ADDS     R0,R0,#+1
   \                     ??UART02_IRQHandler_3:
   \   00000022   ....               LDR      R1,??DataTable4_4
   \   00000024   0880               STRH     R0,[R1, #+0]
     64          				comRbytes++;
   \   00000026   ....               LDR      R0,??DataTable4_5
   \   00000028   0088               LDRH     R0,[R0, #+0]
   \   0000002A   401C               ADDS     R0,R0,#+1
   \   0000002C   ....               LDR      R1,??DataTable4_5
   \   0000002E   0880               STRH     R0,[R1, #+0]
   \                     ??UART02_IRQHandler_1:
   \   00000030   ....               LDR      R0,??DataTable4_2  ;; 0x4005001c
   \   00000032   0068               LDR      R0,[R0, #+0]
   \   00000034   0100               MOVS     R1,R0
   \   00000036   C907               LSLS     R1,R1,#+31       ;; ZeroExtS R1,R1,#+31,#+31
   \   00000038   C90F               LSRS     R1,R1,#+31
   \   0000003A   0129               CMP      R1,#+1
   \   0000003C   28D1               BNE      ??UART02_IRQHandler_4
   \                     ??UART02_IRQHandler_5:
   \   0000003E   ....               LDR      R0,??DataTable4_6  ;; 0x40050018
   \   00000040   0068               LDR      R0,[R0, #+0]
   \   00000042   8021               MOVS     R1,#+128
   \   00000044   C901               LSLS     R1,R1,#+7        ;; #+16384
   \   00000046   0140               ANDS     R1,R1,R0
   \   00000048   0800               MOVS     R0,R1
   \   0000004A   800B               LSRS     R0,R0,#+14
   \   0000004C   0128               CMP      R0,#+1
   \   0000004E   F6D0               BEQ      ??UART02_IRQHandler_5
   \   00000050   6846               MOV      R0,SP
   \   00000052   ....               LDR      R1,??DataTable4_7  ;; 0x40050000
   \   00000054   0968               LDR      R1,[R1, #+0]
   \   00000056   0170               STRB     R1,[R0, #+0]
   \   00000058   6846               MOV      R0,SP
   \   0000005A   0178               LDRB     R1,[R0, #+0]
   \   0000005C   ....               ADR      R0,??DataTable4_8  ;; "%c "
   \   0000005E   ........           BL       printf
   \   00000062   6846               MOV      R0,SP
   \   00000064   0078               LDRB     R0,[R0, #+0]
   \   00000066   3028               CMP      R0,#+48
   \   00000068   02D1               BNE      ??UART02_IRQHandler_6
   \   0000006A   ....               LDR      R0,??DataTable4_9
   \   0000006C   0021               MOVS     R1,#+0
   \   0000006E   0160               STR      R1,[R0, #+0]
   \                     ??UART02_IRQHandler_6:
   \   00000070   ....               LDR      R0,??DataTable4_5
   \   00000072   0088               LDRH     R0,[R0, #+0]
   \   00000074   4028               CMP      R0,#+64
   \   00000076   DBD2               BCS      ??UART02_IRQHandler_1
   \   00000078   ....               LDR      R0,??DataTable4_4
   \   0000007A   0088               LDRH     R0,[R0, #+0]
   \   0000007C   ....               LDR      R1,??DataTable4_10
   \   0000007E   6A46               MOV      R2,SP
   \   00000080   1278               LDRB     R2,[R2, #+0]
   \   00000082   0A54               STRB     R2,[R1, R0]
   \   00000084   ....               LDR      R0,??DataTable4_4
   \   00000086   0088               LDRH     R0,[R0, #+0]
   \   00000088   3F28               CMP      R0,#+63
   \   0000008A   C7D1               BNE      ??UART02_IRQHandler_2
   \   0000008C   0020               MOVS     R0,#+0
   \   0000008E   C8E7               B        ??UART02_IRQHandler_3
     65          			}			
     66          		}
     67          		printf("\nTransmission Test:");
   \                     ??UART02_IRQHandler_4:
   \   00000090   ....               LDR      R0,??DataTable4_11
   \   00000092   ........           BL       printf
   \   00000096   2BE0               B        ??UART02_IRQHandler_7
     68          	}
     69          	else if(u32IntStatus & THREIE)
   \                     ??UART02_IRQHandler_0:
   \   00000098   8007               LSLS     R0,R0,#+30
   \   0000009A   29D5               BPL      ??UART02_IRQHandler_7
     70          	{   
     71          		   
     72                  uint16_t tmp;
     73                  tmp = comRtail;
   \   0000009C   ....               LDR      R0,??DataTable4_4
   \   0000009E   0088               LDRH     R0,[R0, #+0]
     74          		if(comRhead != tmp)
   \   000000A0   ....               LDR      R1,??DataTable4_12
   \   000000A2   0988               LDRH     R1,[R1, #+0]
   \   000000A4   80B2               UXTH     R0,R0
   \   000000A6   8142               CMP      R1,R0
   \   000000A8   22D0               BEQ      ??UART02_IRQHandler_7
     75          		{
     76          			bInChar[0] = comRbuf[comRhead];
   \   000000AA   6846               MOV      R0,SP
   \   000000AC   ....               LDR      R1,??DataTable4_12
   \   000000AE   0988               LDRH     R1,[R1, #+0]
   \   000000B0   ....               LDR      R2,??DataTable4_10
   \   000000B2   515C               LDRB     R1,[R2, R1]
   \   000000B4   0170               STRB     R1,[R0, #+0]
     77          			/* Wait Tx empty */
     78          			while (UART0->FSR.TX_EMPTY != 1);
   \                     ??UART02_IRQHandler_8:
   \   000000B6   ....               LDR      R0,??DataTable4_6  ;; 0x40050018
   \   000000B8   0068               LDR      R0,[R0, #+0]
   \   000000BA   8021               MOVS     R1,#+128
   \   000000BC   C903               LSLS     R1,R1,#+15       ;; #+4194304
   \   000000BE   0140               ANDS     R1,R1,R0
   \   000000C0   0800               MOVS     R0,R1
   \   000000C2   800D               LSRS     R0,R0,#+22
   \   000000C4   0128               CMP      R0,#+1
   \   000000C6   F6D1               BNE      ??UART02_IRQHandler_8
     79          			UART0->DATA = bInChar[0];						
   \   000000C8   ....               LDR      R0,??DataTable4_7  ;; 0x40050000
   \   000000CA   6946               MOV      R1,SP
   \   000000CC   0978               LDRB     R1,[R1, #+0]
   \   000000CE   0160               STR      R1,[R0, #+0]
     80          			comRhead = (comRhead == (RXBUFSIZE-1)) ? 0 : (comRhead+1);
   \   000000D0   ....               LDR      R0,??DataTable4_12
   \   000000D2   0088               LDRH     R0,[R0, #+0]
   \   000000D4   3F28               CMP      R0,#+63
   \   000000D6   01D1               BNE      ??UART02_IRQHandler_9
   \   000000D8   0020               MOVS     R0,#+0
   \   000000DA   02E0               B        ??UART02_IRQHandler_10
   \                     ??UART02_IRQHandler_9:
   \   000000DC   ....               LDR      R0,??DataTable4_12
   \   000000DE   0088               LDRH     R0,[R0, #+0]
   \   000000E0   401C               ADDS     R0,R0,#+1
   \                     ??UART02_IRQHandler_10:
   \   000000E2   ....               LDR      R1,??DataTable4_12
   \   000000E4   0880               STRH     R0,[R1, #+0]
     81          			comRbytes--;
   \   000000E6   ....               LDR      R0,??DataTable4_5
   \   000000E8   0088               LDRH     R0,[R0, #+0]
   \   000000EA   401E               SUBS     R0,R0,#+1
   \   000000EC   ....               LDR      R1,??DataTable4_5
   \   000000EE   0880               STRH     R0,[R1, #+0]
     82          		}
     83          	}
     84          }
   \                     ??UART02_IRQHandler_7:
   \   000000F0   01BD               POP      {R0,PC}          ;; return
     85          
     86          /*---------------------------------------------------------------------------------------------------------*/
     87          /* UART Test Sample 				                                                                       */
     88          /* Test Item					                                                                           */
     89          /* It sends the received data to HyperTerminal.														       */
     90          /*---------------------------------------------------------------------------------------------------------*/
     91          #if 0
     92          int32_t main()
     93          #else

   \                                 In section .text, align 2, keep-with-next
     94          int32_t vUART_Test(void)
     95          {
   \                     vUART_Test:
   \   00000000   80B5               PUSH     {R7,LR}
     96          	/* Set UART Pin. */
     97          	SYS->GPBMFP.UART0_RX = 1;
   \   00000002   ....               LDR      R0,??DataTable4_13  ;; 0x50000034
   \   00000004   0068               LDR      R0,[R0, #+0]
   \   00000006   0121               MOVS     R1,#+1
   \   00000008   0143               ORRS     R1,R1,R0
   \   0000000A   ....               LDR      R0,??DataTable4_13  ;; 0x50000034
   \   0000000C   0160               STR      R1,[R0, #+0]
     98          	SYS->GPBMFP.UART0_TX = 1;
   \   0000000E   ....               LDR      R0,??DataTable4_13  ;; 0x50000034
   \   00000010   0068               LDR      R0,[R0, #+0]
   \   00000012   0221               MOVS     R1,#+2
   \   00000014   0143               ORRS     R1,R1,R0
   \   00000016   ....               LDR      R0,??DataTable4_13  ;; 0x50000034
   \   00000018   0160               STR      R1,[R0, #+0]
     99          	SYS->GPBMFP.UART0_nRTS = 1;
   \   0000001A   ....               LDR      R0,??DataTable4_13  ;; 0x50000034
   \   0000001C   0068               LDR      R0,[R0, #+0]
   \   0000001E   0421               MOVS     R1,#+4
   \   00000020   0143               ORRS     R1,R1,R0
   \   00000022   ....               LDR      R0,??DataTable4_13  ;; 0x50000034
   \   00000024   0160               STR      R1,[R0, #+0]
    100          	SYS->GPBMFP.UART0_nCTS = 1;
   \   00000026   ....               LDR      R0,??DataTable4_13  ;; 0x50000034
   \   00000028   0068               LDR      R0,[R0, #+0]
   \   0000002A   0821               MOVS     R1,#+8
   \   0000002C   0143               ORRS     R1,R1,R0
   \   0000002E   ....               LDR      R0,??DataTable4_13  ;; 0x50000034
   \   00000030   0160               STR      R1,[R0, #+0]
    101          
    102          	/* Reset IP */
    103          	SYS->IPRSTC2.UART0_RST = 1;
   \   00000032   ....               LDR      R0,??DataTable4_14  ;; 0x5000000c
   \   00000034   0068               LDR      R0,[R0, #+0]
   \   00000036   8021               MOVS     R1,#+128
   \   00000038   4902               LSLS     R1,R1,#+9        ;; #+65536
   \   0000003A   0143               ORRS     R1,R1,R0
   \   0000003C   ....               LDR      R0,??DataTable4_14  ;; 0x5000000c
   \   0000003E   0160               STR      R1,[R0, #+0]
    104          	SYS->IPRSTC2.UART0_RST = 0;
   \   00000040   ....               LDR      R0,??DataTable4_14  ;; 0x5000000c
   \   00000042   0068               LDR      R0,[R0, #+0]
   \   00000044   ....               LDR      R1,??DataTable4_15  ;; 0xfffeffff
   \   00000046   0140               ANDS     R1,R1,R0
   \   00000048   ....               LDR      R0,??DataTable4_14  ;; 0x5000000c
   \   0000004A   0160               STR      R1,[R0, #+0]
    105          
    106          	/* Enable UART clock */
    107          	SYSCLK->APBCLK.UART0_EN = 1;
   \   0000004C   ....               LDR      R0,??DataTable4_16  ;; 0x50000208
   \   0000004E   0068               LDR      R0,[R0, #+0]
   \   00000050   8021               MOVS     R1,#+128
   \   00000052   4902               LSLS     R1,R1,#+9        ;; #+65536
   \   00000054   0143               ORRS     R1,R1,R0
   \   00000056   ....               LDR      R0,??DataTable4_16  ;; 0x50000208
   \   00000058   0160               STR      R1,[R0, #+0]
    108          
    109          	/* Select UART clock source */
    110              SYSCLK->CLKSEL1.UART_S = 0;
   \   0000005A   ....               LDR      R0,??DataTable4_17  ;; 0x50000214
   \   0000005C   0068               LDR      R0,[R0, #+0]
   \   0000005E   ....               LDR      R1,??DataTable4_18  ;; 0xfcffffff
   \   00000060   0140               ANDS     R1,R1,R0
   \   00000062   ....               LDR      R0,??DataTable4_17  ;; 0x50000214
   \   00000064   0160               STR      R1,[R0, #+0]
    111              SYSCLK->PWRCON.XTL12M_EN = 1;
   \   00000066   ....               LDR      R0,??DataTable4_19  ;; 0x50000200
   \   00000068   0068               LDR      R0,[R0, #+0]
   \   0000006A   0121               MOVS     R1,#+1
   \   0000006C   0143               ORRS     R1,R1,R0
   \   0000006E   ....               LDR      R0,??DataTable4_19  ;; 0x50000200
   \   00000070   0160               STR      R1,[R0, #+0]
    112              
    113          	/* Select UART clock source */
    114              SYSCLK->CLKSEL1.UART_S = 0;
   \   00000072   ....               LDR      R0,??DataTable4_17  ;; 0x50000214
   \   00000074   0068               LDR      R0,[R0, #+0]
   \   00000076   ....               LDR      R1,??DataTable4_18  ;; 0xfcffffff
   \   00000078   0140               ANDS     R1,R1,R0
   \   0000007A   ....               LDR      R0,??DataTable4_17  ;; 0x50000214
   \   0000007C   0160               STR      R1,[R0, #+0]
    115          
    116          	/* Tx FIFO Reset & Rx FIFO Reset & FIFO Mode Enable */
    117            	UART0->FCR.TFR = 1;
   \   0000007E   ....               LDR      R0,??DataTable4_20  ;; 0x40050008
   \   00000080   0068               LDR      R0,[R0, #+0]
   \   00000082   0421               MOVS     R1,#+4
   \   00000084   0143               ORRS     R1,R1,R0
   \   00000086   ....               LDR      R0,??DataTable4_20  ;; 0x40050008
   \   00000088   0160               STR      R1,[R0, #+0]
    118            	UART0->FCR.RFR = 1;
   \   0000008A   ....               LDR      R0,??DataTable4_20  ;; 0x40050008
   \   0000008C   0068               LDR      R0,[R0, #+0]
   \   0000008E   0221               MOVS     R1,#+2
   \   00000090   0143               ORRS     R1,R1,R0
   \   00000092   ....               LDR      R0,??DataTable4_20  ;; 0x40050008
   \   00000094   0160               STR      R1,[R0, #+0]
    119          
    120          	/* Set Rx Trigger Level */
    121          	UART0->FCR.RFITL = 0;  
   \   00000096   ....               LDR      R0,??DataTable4_20  ;; 0x40050008
   \   00000098   0068               LDR      R0,[R0, #+0]
   \   0000009A   F021               MOVS     R1,#+240
   \   0000009C   8843               BICS     R0,R0,R1
   \   0000009E   ....               LDR      R1,??DataTable4_20  ;; 0x40050008
   \   000000A0   0860               STR      R0,[R1, #+0]
    122          
    123          	/* Set Parity & Data bits & Stop bits */
    124          	UART0->LCR.SPE = 0;
   \   000000A2   ....               LDR      R0,??DataTable4_21  ;; 0x4005000c
   \   000000A4   0068               LDR      R0,[R0, #+0]
   \   000000A6   2021               MOVS     R1,#+32
   \   000000A8   8843               BICS     R0,R0,R1
   \   000000AA   ....               LDR      R1,??DataTable4_21  ;; 0x4005000c
   \   000000AC   0860               STR      R0,[R1, #+0]
    125          	UART0->LCR.EPE = 0;
   \   000000AE   ....               LDR      R0,??DataTable4_21  ;; 0x4005000c
   \   000000B0   0068               LDR      R0,[R0, #+0]
   \   000000B2   1021               MOVS     R1,#+16
   \   000000B4   8843               BICS     R0,R0,R1
   \   000000B6   ....               LDR      R1,??DataTable4_21  ;; 0x4005000c
   \   000000B8   0860               STR      R0,[R1, #+0]
    126          	UART0->LCR.PBE = 0;
   \   000000BA   ....               LDR      R0,??DataTable4_21  ;; 0x4005000c
   \   000000BC   0068               LDR      R0,[R0, #+0]
   \   000000BE   0821               MOVS     R1,#+8
   \   000000C0   8843               BICS     R0,R0,R1
   \   000000C2   ....               LDR      R1,??DataTable4_21  ;; 0x4005000c
   \   000000C4   0860               STR      R0,[R1, #+0]
    127          	
    128          	UART0->LCR.WLS = 3;
   \   000000C6   ....               LDR      R0,??DataTable4_21  ;; 0x4005000c
   \   000000C8   0068               LDR      R0,[R0, #+0]
   \   000000CA   0321               MOVS     R1,#+3
   \   000000CC   0143               ORRS     R1,R1,R0
   \   000000CE   ....               LDR      R0,??DataTable4_21  ;; 0x4005000c
   \   000000D0   0160               STR      R1,[R0, #+0]
    129          	UART0->LCR.NSB = 0;
   \   000000D2   ....               LDR      R0,??DataTable4_21  ;; 0x4005000c
   \   000000D4   0068               LDR      R0,[R0, #+0]
   \   000000D6   0421               MOVS     R1,#+4
   \   000000D8   8843               BICS     R0,R0,R1
   \   000000DA   ....               LDR      R1,??DataTable4_21  ;; 0x4005000c
   \   000000DC   0860               STR      R0,[R1, #+0]
    130          	
    131          	/* Set Time-Out */
    132          	UART0->TOR = 0;
   \   000000DE   ....               LDR      R0,??DataTable4_22  ;; 0x40050020
   \   000000E0   0021               MOVS     R1,#+0
   \   000000E2   0160               STR      R1,[R0, #+0]
    133          
    134          	/* Set baudrate 115200bps. */
    135          	UART0->BAUD.DIVX_EN = 1;
   \   000000E4   ....               LDR      R0,??DataTable4_23  ;; 0x40050024
   \   000000E6   0068               LDR      R0,[R0, #+0]
   \   000000E8   8021               MOVS     R1,#+128
   \   000000EA   8905               LSLS     R1,R1,#+22       ;; #+536870912
   \   000000EC   0143               ORRS     R1,R1,R0
   \   000000EE   ....               LDR      R0,??DataTable4_23  ;; 0x40050024
   \   000000F0   0160               STR      R1,[R0, #+0]
    136          	UART0->BAUD.DIVX1 = 1;
   \   000000F2   ....               LDR      R0,??DataTable4_23  ;; 0x40050024
   \   000000F4   0068               LDR      R0,[R0, #+0]
   \   000000F6   8021               MOVS     R1,#+128
   \   000000F8   4905               LSLS     R1,R1,#+21       ;; #+268435456
   \   000000FA   0143               ORRS     R1,R1,R0
   \   000000FC   ....               LDR      R0,??DataTable4_23  ;; 0x40050024
   \   000000FE   0160               STR      R1,[R0, #+0]
    137          	UART0->BAUD.DIVX = 15;
   \   00000100   ....               LDR      R0,??DataTable4_23  ;; 0x40050024
   \   00000102   0068               LDR      R0,[R0, #+0]
   \   00000104   F021               MOVS     R1,#+240
   \   00000106   0905               LSLS     R1,R1,#+20       ;; #+251658240
   \   00000108   0143               ORRS     R1,R1,R0
   \   0000010A   ....               LDR      R0,??DataTable4_23  ;; 0x40050024
   \   0000010C   0160               STR      R1,[R0, #+0]
    138          	UART0->BAUD.DIV = 102;
   \   0000010E   ....               LDR      R0,??DataTable4_23  ;; 0x40050024
   \   00000110   0068               LDR      R0,[R0, #+0]
   \   00000112   000C               LSRS     R0,R0,#+16
   \   00000114   0004               LSLS     R0,R0,#+16
   \   00000116   6621               MOVS     R1,#+102
   \   00000118   0143               ORRS     R1,R1,R0
   \   0000011A   ....               LDR      R0,??DataTable4_23  ;; 0x40050024
   \   0000011C   0160               STR      R1,[R0, #+0]
    139          
    140          	printf("\nUART Sample Demo. (Press '0' to exit)\n");
   \   0000011E   ....               LDR      R0,??DataTable4_24
   \   00000120   ........           BL       printf
    141          
    142          	/* Enable Interrupt */
    143          	UART0->IER.RDA_IEN = 1;	
   \   00000124   ....               LDR      R0,??DataTable4_25  ;; 0x40050004
   \   00000126   0068               LDR      R0,[R0, #+0]
   \   00000128   0121               MOVS     R1,#+1
   \   0000012A   0143               ORRS     R1,R1,R0
   \   0000012C   ....               LDR      R0,??DataTable4_25  ;; 0x40050004
   \   0000012E   0160               STR      R1,[R0, #+0]
    144          	UART0->IER.THRE_IEN = 1;
   \   00000130   ....               LDR      R0,??DataTable4_25  ;; 0x40050004
   \   00000132   0068               LDR      R0,[R0, #+0]
   \   00000134   0221               MOVS     R1,#+2
   \   00000136   0143               ORRS     R1,R1,R0
   \   00000138   ....               LDR      R0,??DataTable4_25  ;; 0x40050004
   \   0000013A   0160               STR      R1,[R0, #+0]
    145          	UART0->IER.RLS_IEN = 1;
   \   0000013C   ....               LDR      R0,??DataTable4_25  ;; 0x40050004
   \   0000013E   0068               LDR      R0,[R0, #+0]
   \   00000140   0421               MOVS     R1,#+4
   \   00000142   0143               ORRS     R1,R1,R0
   \   00000144   ....               LDR      R0,??DataTable4_25  ;; 0x40050004
   \   00000146   0160               STR      R1,[R0, #+0]
    146          	NVIC_EnableIRQ(UART0_IRQn);
   \   00000148   0C20               MOVS     R0,#+12
   \   0000014A   ........           BL       NVIC_EnableIRQ
    147          
    148          	while(g_bWait);	
   \                     ??vUART_Test_0:
   \   0000014E   ....               LDR      R0,??DataTable4_9
   \   00000150   0068               LDR      R0,[R0, #+0]
   \   00000152   0028               CMP      R0,#+0
   \   00000154   FBD1               BNE      ??vUART_Test_0
    149          		
    150          	/* Disable Interrupt */
    151          	UART0->IER.RDA_IEN = 0;	
   \   00000156   ....               LDR      R0,??DataTable4_25  ;; 0x40050004
   \   00000158   0068               LDR      R0,[R0, #+0]
   \   0000015A   0121               MOVS     R1,#+1
   \   0000015C   8843               BICS     R0,R0,R1
   \   0000015E   ....               LDR      R1,??DataTable4_25  ;; 0x40050004
   \   00000160   0860               STR      R0,[R1, #+0]
    152          	UART0->IER.THRE_IEN = 0;
   \   00000162   ....               LDR      R0,??DataTable4_25  ;; 0x40050004
   \   00000164   0068               LDR      R0,[R0, #+0]
   \   00000166   0221               MOVS     R1,#+2
   \   00000168   8843               BICS     R0,R0,R1
   \   0000016A   ....               LDR      R1,??DataTable4_25  ;; 0x40050004
   \   0000016C   0860               STR      R0,[R1, #+0]
    153          	UART0->IER.RLS_IEN = 0;
   \   0000016E   ....               LDR      R0,??DataTable4_25  ;; 0x40050004
   \   00000170   0068               LDR      R0,[R0, #+0]
   \   00000172   0421               MOVS     R1,#+4
   \   00000174   8843               BICS     R0,R0,R1
   \   00000176   ....               LDR      R1,??DataTable4_25  ;; 0x40050004
   \   00000178   0860               STR      R0,[R1, #+0]
    154          
    155          	/* Disable I & F bit */ 
    156          	NVIC_DisableIRQ (UART0_IRQn);		
   \   0000017A   0C20               MOVS     R0,#+12
   \   0000017C   ........           BL       NVIC_DisableIRQ
    157          	
    158          	printf("\nUART Sample Demo End.\n");
   \   00000180   ....               LDR      R0,??DataTable4_26
   \   00000182   ........           BL       printf
    159          	
    160          	return TRUE;
   \   00000186   0120               MOVS     R0,#+1
   \   00000188   02BD               POP      {R1,PC}          ;; return
    161          }	
    162          #endif
    163          

   \                                 In section .text, align 2, keep-with-next
    164          void vStartUARTTasks( unsigned portBASE_TYPE uxPriority )
    165          {
   \                     vStartUARTTasks:
   \   00000000   00B5               PUSH     {LR}
   \   00000002   85B0               SUB      SP,SP,#+20
    166          	xTaskCreate( vUARTTask, ( signed char * ) "UART", UARTStack_Size, NULL, uxPriority, ( xTaskHandle * ) NULL );
   \   00000004   0021               MOVS     R1,#+0
   \   00000006   0391               STR      R1,[SP, #+12]
   \   00000008   0021               MOVS     R1,#+0
   \   0000000A   0291               STR      R1,[SP, #+8]
   \   0000000C   0021               MOVS     R1,#+0
   \   0000000E   0191               STR      R1,[SP, #+4]
   \   00000010   0090               STR      R0,[SP, #+0]
   \   00000012   0023               MOVS     R3,#+0
   \   00000014   8022               MOVS     R2,#+128
   \   00000016   ....               LDR      R1,??DataTable4_27
   \   00000018   ....               LDR      R0,??DataTable4_28
   \   0000001A   ........           BL       xTaskGenericCreate
    167          }
   \   0000001E   05B0               ADD      SP,SP,#+20
   \   00000020   00BD               POP      {PC}             ;; return
    168          

   \                                 In section .text, align 2, keep-with-next
    169          static portTASK_FUNCTION( vUARTTask, pvParameters )
    170          {
   \                     vUARTTask:
   \   00000000   80B5               PUSH     {R7,LR}
    171          	/* The parameters are not used. */
    172          	( void ) pvParameters;
    173          
    174          	vUART_Test();
   \   00000002   ........           BL       vUART_Test
    175          	for(;;);
   \                     ??vUARTTask_0:
   \   00000006   FEE7               B        ??vUARTTask_0
    176          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     `?<Constant {255}>`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   00E100E0           DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   80E100E0           DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   1C000540           DC32     0x4005001c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   ........           DC32     `?<Constant "\\nInput:">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   ........           DC32     comRtail

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   ........           DC32     comRbytes

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   18000540           DC32     0x40050018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   00000540           DC32     0x40050000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   25632000           DC8      "%c "

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \   00000000   ........           DC32     g_bWait

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \   00000000   ........           DC32     comRbuf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_11:
   \   00000000   ........           DC32     `?<Constant "\\nTransmission Test:">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_12:
   \   00000000   ........           DC32     comRhead

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_13:
   \   00000000   34000050           DC32     0x50000034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_14:
   \   00000000   0C000050           DC32     0x5000000c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_15:
   \   00000000   FFFFFEFF           DC32     0xfffeffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_16:
   \   00000000   08020050           DC32     0x50000208

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_17:
   \   00000000   14020050           DC32     0x50000214

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_18:
   \   00000000   FFFFFFFC           DC32     0xfcffffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_19:
   \   00000000   00020050           DC32     0x50000200

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_20:
   \   00000000   08000540           DC32     0x40050008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_21:
   \   00000000   0C000540           DC32     0x4005000c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_22:
   \   00000000   20000540           DC32     0x40050020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_23:
   \   00000000   24000540           DC32     0x40050024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_24:
   \   00000000   ........           DC32     `?<Constant "\\nUART Sample Demo. (P...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_25:
   \   00000000   04000540           DC32     0x40050004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_26:
   \   00000000   ........           DC32     `?<Constant "\\nUART Sample Demo End.\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_27:
   \   00000000   ........           DC32     `?<Constant "UART">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_28:
   \   00000000   ........           DC32     vUARTTask

   \                                 In section .rodata, align 1
   \                     `?<Constant {255}>`:
   \   00000000   FF                 DC8 255

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\nInput:">`:
   \   00000000   0A496E707574       DC8 "\012Input:"
   \              3A00        

   \                                 In section .rodata, align 4
   \   00000000   25632000           DC8 "%c "

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\nTransmission Test:">`:
   \   00000000   0A5472616E73       DC8 "\012Transmission Test:"
   \              6D697373696F
   \              6E2054657374
   \              3A00        

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\nUART Sample Demo. (P...">`:
   \   00000000   0A5541525420       DC8 "\012UART Sample Demo. (Press '0' to exit)\012"
   \              53616D706C65
   \              2044656D6F2E
   \              202850726573
   \              732027302720
   \              746F20657869
   \              74290A00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\nUART Sample Demo End.\\n">`:
   \   00000000   0A5541525420       DC8 "\012UART Sample Demo End.\012"
   \              53616D706C65
   \              2044656D6F20
   \              456E642E0A00

   \                                 In section .rodata, align 4
   \                     `?<Constant "UART">`:
   \   00000000   5541525400         DC8 "UART"
   \   00000005   000000             DC8 0, 0, 0
    177          
    178          
    179          
    180          
    181          
    182          
    183          
    184          
    185          
    186          
    187          
    188          
    189          
    190          
    191          
    192          
    193          
    194          
    195          
    196          
    197          
    198          
    199          
    200          
    201          
    202          
    203          
    204          
    205          
    206          
    207          
    208          
    209          
    210          
    211          
    212          
    213          
    214          
    215          
    216          
    217          
    218          
    219          
    220          
    221          
    222          
    223          
    224          
    225          
    226          
    227          
    228          
    229          
    230          
    231          
    232          
    233          
    234          
    235          
    236          
    237          
    238          
    239          
    240          
    241          
    242          
    243          
    244          
    245          
    246          
    247          
    248          
    249          
    250          
    251          
    252          
    253          
    254          
    255          
    256          
    257          
    258          
    259          
    260          
    261          
    262          
    263          
    264          
    265          
    266          
    267          
    268          
    269          
    270          
    271          
    272          
    273          
    274          
    275          
    276          
    277          
    278          
    279          
    280          
    281          
    282          
    283          
    284          
    285          
    286          
    287          
    288          
    289          
    290          
    291          
    292          
    293          

   Maximum stack usage in bytes:

     Function          .cstack
     --------          -------
     NVIC_DisableIRQ        0
     NVIC_EnableIRQ         0
     UART02_IRQHandler      8
     vStartUARTTasks       24
     vUARTTask              8
     vUART_Test             8


   Section sizes:

     Function/Label                          Bytes
     --------------                          -----
     NVIC_EnableIRQ                            24
     NVIC_DisableIRQ                           24
     comRbuf                                   64
     comRbytes                                  2
     comRhead                                   2
     comRtail                                   2
     g_bWait                                    4
     UART02_IRQHandler                        242
     vUART_Test                               394
     vStartUARTTasks                           34
     vUARTTask                                  8
     ??DataTable3                               4
     ??DataTable4                               4
     ??DataTable4_1                             4
     ??DataTable4_2                             4
     ??DataTable4_3                             4
     ??DataTable4_4                             4
     ??DataTable4_5                             4
     ??DataTable4_6                             4
     ??DataTable4_7                             4
     ??DataTable4_8                             4
     ??DataTable4_9                             4
     ??DataTable4_10                            4
     ??DataTable4_11                            4
     ??DataTable4_12                            4
     ??DataTable4_13                            4
     ??DataTable4_14                            4
     ??DataTable4_15                            4
     ??DataTable4_16                            4
     ??DataTable4_17                            4
     ??DataTable4_18                            4
     ??DataTable4_19                            4
     ??DataTable4_20                            4
     ??DataTable4_21                            4
     ??DataTable4_22                            4
     ??DataTable4_23                            4
     ??DataTable4_24                            4
     ??DataTable4_25                            4
     ??DataTable4_26                            4
     ??DataTable4_27                            4
     ??DataTable4_28                            4
     ?<Constant {255}>                          1
     ?<Constant "\nInput:">                     8
     ?<Constant "%c ">                          4
     ?<Constant "\nTransmission Test:">        20
     ?<Constant "\nUART Sample Demo. (P...">   40
     ?<Constant "\nUART Sample Demo End.\n">   24
     ?<Constant "UART">                         8

 
  70 bytes in section .bss
   4 bytes in section .data
 105 bytes in section .rodata
 846 bytes in section .text
 
 846 bytes of CODE  memory
 105 bytes of CONST memory
  74 bytes of DATA  memory

Errors: none
Warnings: none
