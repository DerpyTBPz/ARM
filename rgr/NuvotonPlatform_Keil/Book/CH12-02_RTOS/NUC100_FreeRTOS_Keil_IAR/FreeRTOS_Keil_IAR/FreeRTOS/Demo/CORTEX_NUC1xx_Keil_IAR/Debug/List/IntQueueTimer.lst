###############################################################################
#                                                                             #
#                                                       06/Jul/2010  14:34:52 #
# IAR ANSI C/C++ Compiler V5.50.0.21878/W32 EVALUATION for ARM                #
# Copyright (C) 1999-2010 IAR Systems AB.                                     #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\IntQueueTimer.c                                        #
#    Command line =  E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\IntQueueTimer.c -D IAR_ARM_CM0 -lCN                    #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\Debug\List\ --diag_suppress Pe550,Pa082,Pa039 -o       #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\Debug\Obj\ --no_cse --no_unroll --no_inline            #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M0  #
#                    -e --fpu=None --dlib_config "D:\Program                  #
#                    Files\ARM\INC\DLib_Config_Full.h" -I                     #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\..\common\include\ -I E:\FreeRTOS_Keil_IAR\FreeRTOS\De #
#                    mo\CORTEX_NUC1xx_Keil_IAR\..\..\source\include\ -I       #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\ -I E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_K #
#                    eil_IAR\NUC1xxBSP\NuvotonPlatform_Keil\Include\ -I       #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\NUC1xxBSP\NuvotonPlatform_Keil\Include\Driver\ -I      #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\NUC1xxBSP\CMSIS\CM0\ -I E:\FreeRTOS_Keil_IAR\FreeRTOS\ #
#                    Demo\CORTEX_NUC1xx_Keil_IAR\User_Demo\include\ -I        #
#                    "D:\Program Files\ARM\INC\" -Ol                          #
#    List file    =  E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\Debug\List\IntQueueTimer.lst                           #
#    Object file  =  E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\Debug\Obj\IntQueueTimer.o                              #
#                                                                             #
#                                                                             #
###############################################################################

E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IAR\IntQueueTimer.c
      1          /*
      2          	FreeRTOS.org V5.2.0 - Copyright (C) 2003-2009 Richard Barry.
      3          
      4          	This file is part of the FreeRTOS.org distribution.
      5          
      6          	FreeRTOS.org is free software; you can redistribute it and/or modify it
      7          	under the terms of the GNU General Public License (version 2) as published
      8          	by the Free Software Foundation and modified by the FreeRTOS exception.
      9          
     10          	FreeRTOS.org is distributed in the hope that it will be useful,	but WITHOUT
     11          	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
     12          	FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
     13          	more details.
     14          
     15          	You should have received a copy of the GNU General Public License along
     16          	with FreeRTOS.org; if not, write to the Free Software Foundation, Inc., 59
     17          	Temple Place, Suite 330, Boston, MA  02111-1307  USA.
     18          
     19          	A special exception to the GPL is included to allow you to distribute a
     20          	combined work that includes FreeRTOS.org without being obliged to provide
     21          	the source code for any proprietary components.  See the licensing section
     22          	of http://www.FreeRTOS.org for full details.
     23          
     24          
     25          	***************************************************************************
     26          	*                                                                         *
     27          	* Get the FreeRTOS eBook!  See http://www.FreeRTOS.org/Documentation      *
     28          	*                                                                         *
     29          	* This is a concise, step by step, 'hands on' guide that describes both   *
     30          	* general multitasking concepts and FreeRTOS specifics. It presents and   *
     31          	* explains numerous examples that are written using the FreeRTOS API.     *
     32          	* Full source code for all the examples is provided in an accompanying    *
     33          	* .zip file.                                                              *
     34          	*                                                                         *
     35          	***************************************************************************
     36          
     37          	1 tab == 4 spaces!
     38          
     39          	Please ensure to read the configuration and relevant port sections of the
     40          	online documentation.
     41          
     42          	http://www.FreeRTOS.org - Documentation, latest information, license and
     43          	contact details.
     44          
     45          	http://www.SafeRTOS.com - A version that is certified for use in safety
     46          	critical systems.
     47          
     48          	http://www.OpenRTOS.com - Commercial support, development, porting,
     49          	licensing and training services.
     50          */
     51          
     52          #include <stdio.h>
     53          /* Scheduler includes. */
     54          #include "FreeRTOS.h"
     55          
     56          /* Demo includes. */
     57          #include "IntQueueTimer.h"
     58          #include "IntQueue.h"
     59          
     60          /* Library includes. */
     61          #include "DrvTimer.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __??Code16?? __code __interwork void NVIC_EnableIRQ(IRQn_Type)
   \                     NVIC_EnableIRQ:
   \   00000000   40B2               SXTB     R0,R0
   \   00000002   0100               MOVS     R1,R0
   \   00000004   4909               LSRS     R1,R1,#+5
   \   00000006   0422               MOVS     R2,#+4
   \   00000008   5143               MULS     R1,R2,R1
   \   0000000A   ....               LDR      R2,??DataTable4  ;; 0xe000e100
   \   0000000C   0123               MOVS     R3,#+1
   \   0000000E   C006               LSLS     R0,R0,#+27       ;; ZeroExtS R0,R0,#+27,#+27
   \   00000010   C00E               LSRS     R0,R0,#+27
   \   00000012   8340               LSLS     R3,R3,R0
   \   00000014   5350               STR      R3,[R2, R1]
   \   00000016   7047               BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __??Code16?? __code __interwork void NVIC_SetPriority(IRQn_Type, int32_t)
   \                     NVIC_SetPriority:
   \   00000000   F0B5               PUSH     {R4-R7,LR}
   \   00000002   0200               MOVS     R2,R0
   \   00000004   0B00               MOVS     R3,R1
   \   00000006   52B2               SXTB     R2,R2
   \   00000008   002A               CMP      R2,#+0
   \   0000000A   21D5               BPL      ??NVIC_SetPriority_0
   \   0000000C   52B2               SXTB     R2,R2
   \   0000000E   1007               LSLS     R0,R2,#+28       ;; ZeroExtS R0,R2,#+28,#+28
   \   00000010   000F               LSRS     R0,R0,#+28
   \   00000012   0838               SUBS     R0,R0,#+8
   \   00000014   8008               LSRS     R0,R0,#+2
   \   00000016   0421               MOVS     R1,#+4
   \   00000018   4843               MULS     R0,R1,R0
   \   0000001A   ....               LDR      R1,??DataTable4_1  ;; 0xe000ed1c
   \   0000001C   52B2               SXTB     R2,R2
   \   0000001E   1407               LSLS     R4,R2,#+28       ;; ZeroExtS R4,R2,#+28,#+28
   \   00000020   240F               LSRS     R4,R4,#+28
   \   00000022   083C               SUBS     R4,R4,#+8
   \   00000024   A408               LSRS     R4,R4,#+2
   \   00000026   0425               MOVS     R5,#+4
   \   00000028   6C43               MULS     R4,R5,R4
   \   0000002A   ....               LDR      R5,??DataTable4_1  ;; 0xe000ed1c
   \   0000002C   2C59               LDR      R4,[R5, R4]
   \   0000002E   FF25               MOVS     R5,#+255
   \   00000030   9607               LSLS     R6,R2,#+30       ;; ZeroExtS R6,R2,#+30,#+30
   \   00000032   B60F               LSRS     R6,R6,#+30
   \   00000034   0827               MOVS     R7,#+8
   \   00000036   7E43               MULS     R6,R7,R6
   \   00000038   B540               LSLS     R5,R5,R6
   \   0000003A   AC43               BICS     R4,R4,R5
   \   0000003C   9B01               LSLS     R3,R3,#+6
   \   0000003E   DBB2               UXTB     R3,R3
   \   00000040   9207               LSLS     R2,R2,#+30       ;; ZeroExtS R2,R2,#+30,#+30
   \   00000042   920F               LSRS     R2,R2,#+30
   \   00000044   0825               MOVS     R5,#+8
   \   00000046   6A43               MULS     R2,R5,R2
   \   00000048   9340               LSLS     R3,R3,R2
   \   0000004A   2343               ORRS     R3,R3,R4
   \   0000004C   0B50               STR      R3,[R1, R0]
   \   0000004E   1CE0               B        ??NVIC_SetPriority_1
   \                     ??NVIC_SetPriority_0:
   \   00000050   52B2               SXTB     R2,R2
   \   00000052   1000               MOVS     R0,R2
   \   00000054   8008               LSRS     R0,R0,#+2
   \   00000056   0421               MOVS     R1,#+4
   \   00000058   4843               MULS     R0,R1,R0
   \   0000005A   ....               LDR      R1,??DataTable4_2  ;; 0xe000e400
   \   0000005C   0858               LDR      R0,[R1, R0]
   \   0000005E   FF21               MOVS     R1,#+255
   \   00000060   9407               LSLS     R4,R2,#+30       ;; ZeroExtS R4,R2,#+30,#+30
   \   00000062   A40F               LSRS     R4,R4,#+30
   \   00000064   0825               MOVS     R5,#+8
   \   00000066   6C43               MULS     R4,R5,R4
   \   00000068   A140               LSLS     R1,R1,R4
   \   0000006A   8843               BICS     R0,R0,R1
   \   0000006C   9901               LSLS     R1,R3,#+6
   \   0000006E   C9B2               UXTB     R1,R1
   \   00000070   9307               LSLS     R3,R2,#+30       ;; ZeroExtS R3,R2,#+30,#+30
   \   00000072   9B0F               LSRS     R3,R3,#+30
   \   00000074   0824               MOVS     R4,#+8
   \   00000076   6343               MULS     R3,R4,R3
   \   00000078   9940               LSLS     R1,R1,R3
   \   0000007A   0143               ORRS     R1,R1,R0
   \   0000007C   52B2               SXTB     R2,R2
   \   0000007E   1000               MOVS     R0,R2
   \   00000080   8008               LSRS     R0,R0,#+2
   \   00000082   0422               MOVS     R2,#+4
   \   00000084   5043               MULS     R0,R2,R0
   \   00000086   ....               LDR      R2,??DataTable4_2  ;; 0xe000e400
   \   00000088   1150               STR      R1,[R2, R0]
   \                     ??NVIC_SetPriority_1:
   \   0000008A   F0BD               POP      {R4-R7,PC}       ;; return
     62          #include "NUC1xx.h"
     63          
     64          #define tmrTIMER_2_FREQUENCY	( 2000UL )
     65          #define tmrTIMER_3_FREQUENCY	( 2001UL )
     66          

   \                                 In section .text, align 2, keep-with-next
     67          void vInitialiseTimerForIntQueueTest( void )
     68          {
   \                     vInitialiseTimerForIntQueueTest:
   \   00000000   80B5               PUSH     {R7,LR}
     69          unsigned long ulFrequency;
     70          
     71          	/* Select HCLK as Timer2 clock source */  
     72          	SYSCLK->CLKSEL1.TMR2_S = 2; 
   \   00000002   ....               LDR      R0,??DataTable4_3  ;; 0x50000214
   \   00000004   0068               LDR      R0,[R0, #+0]
   \   00000006   ....               LDR      R1,??DataTable4_4  ;; 0xfff8ffff
   \   00000008   0140               ANDS     R1,R1,R0
   \   0000000A   8020               MOVS     R0,#+128
   \   0000000C   8002               LSLS     R0,R0,#+10       ;; #+131072
   \   0000000E   0843               ORRS     R0,R0,R1
   \   00000010   ....               LDR      R1,??DataTable4_3  ;; 0x50000214
   \   00000012   0860               STR      R0,[R1, #+0]
     73          	/* Select HCLK as Timer3 clock source */  
     74          	SYSCLK->CLKSEL1.TMR3_S = 2; 
   \   00000014   ....               LDR      R0,??DataTable4_3  ;; 0x50000214
   \   00000016   0068               LDR      R0,[R0, #+0]
   \   00000018   ....               LDR      R1,??DataTable4_5  ;; 0xff8fffff
   \   0000001A   0140               ANDS     R1,R1,R0
   \   0000001C   8020               MOVS     R0,#+128
   \   0000001E   8003               LSLS     R0,R0,#+14       ;; #+2097152
   \   00000020   0843               ORRS     R0,R0,R1
   \   00000022   ....               LDR      R1,??DataTable4_3  ;; 0x50000214
   \   00000024   0860               STR      R0,[R1, #+0]
     75          
     76          	/* Enable Timer2 clock source */
     77          	SYSCLK->APBCLK.TMR2_EN = 1;	
   \   00000026   ....               LDR      R0,??DataTable4_6  ;; 0x50000208
   \   00000028   0068               LDR      R0,[R0, #+0]
   \   0000002A   1021               MOVS     R1,#+16
   \   0000002C   0143               ORRS     R1,R1,R0
   \   0000002E   ....               LDR      R0,??DataTable4_6  ;; 0x50000208
   \   00000030   0160               STR      R1,[R0, #+0]
     78          	/* Enable Timer3 clock source */
     79          	SYSCLK->APBCLK.TMR3_EN = 1;	
   \   00000032   ....               LDR      R0,??DataTable4_6  ;; 0x50000208
   \   00000034   0068               LDR      R0,[R0, #+0]
   \   00000036   2021               MOVS     R1,#+32
   \   00000038   0143               ORRS     R1,R1,R0
   \   0000003A   ....               LDR      R0,??DataTable4_6  ;; 0x50000208
   \   0000003C   0160               STR      R1,[R0, #+0]
     80          
     81          	/* Reset IP TMR2 */
     82          	SYS->IPRSTC2.TMR2_RST = 1;
   \   0000003E   ....               LDR      R0,??DataTable4_7  ;; 0x5000000c
   \   00000040   0068               LDR      R0,[R0, #+0]
   \   00000042   1021               MOVS     R1,#+16
   \   00000044   0143               ORRS     R1,R1,R0
   \   00000046   ....               LDR      R0,??DataTable4_7  ;; 0x5000000c
   \   00000048   0160               STR      R1,[R0, #+0]
     83          	SYS->IPRSTC2.TMR2_RST = 0;
   \   0000004A   ....               LDR      R0,??DataTable4_7  ;; 0x5000000c
   \   0000004C   0068               LDR      R0,[R0, #+0]
   \   0000004E   1021               MOVS     R1,#+16
   \   00000050   8843               BICS     R0,R0,R1
   \   00000052   ....               LDR      R1,??DataTable4_7  ;; 0x5000000c
   \   00000054   0860               STR      R0,[R1, #+0]
     84          	/* Reset IP TMR3 */
     85          	SYS->IPRSTC2.TMR3_RST = 1;
   \   00000056   ....               LDR      R0,??DataTable4_7  ;; 0x5000000c
   \   00000058   0068               LDR      R0,[R0, #+0]
   \   0000005A   2021               MOVS     R1,#+32
   \   0000005C   0143               ORRS     R1,R1,R0
   \   0000005E   ....               LDR      R0,??DataTable4_7  ;; 0x5000000c
   \   00000060   0160               STR      R1,[R0, #+0]
     86          	SYS->IPRSTC2.TMR3_RST = 0;
   \   00000062   ....               LDR      R0,??DataTable4_7  ;; 0x5000000c
   \   00000064   0068               LDR      R0,[R0, #+0]
   \   00000066   2021               MOVS     R1,#+32
   \   00000068   8843               BICS     R0,R0,R1
   \   0000006A   ....               LDR      R1,??DataTable4_7  ;; 0x5000000c
   \   0000006C   0860               STR      R0,[R1, #+0]
     87          
     88          	/* Set timer2 Operation mode period mode */
     89          	TIMER2->TCSR.MODE = 1;
   \   0000006E   ....               LDR      R0,??DataTable4_8  ;; 0x40110000
   \   00000070   0068               LDR      R0,[R0, #+0]
   \   00000072   ....               LDR      R1,??DataTable4_9  ;; 0xe7ffffff
   \   00000074   0140               ANDS     R1,R1,R0
   \   00000076   8020               MOVS     R0,#+128
   \   00000078   0005               LSLS     R0,R0,#+20       ;; #+134217728
   \   0000007A   0843               ORRS     R0,R0,R1
   \   0000007C   ....               LDR      R1,??DataTable4_8  ;; 0x40110000
   \   0000007E   0860               STR      R0,[R1, #+0]
     90          	/* Set timer3 Operation mode period mode */
     91          	TIMER3->TCSR.MODE = 1;	
   \   00000080   ....               LDR      R0,??DataTable4_10  ;; 0x40110020
   \   00000082   0068               LDR      R0,[R0, #+0]
   \   00000084   ....               LDR      R1,??DataTable4_9  ;; 0xe7ffffff
   \   00000086   0140               ANDS     R1,R1,R0
   \   00000088   8020               MOVS     R0,#+128
   \   0000008A   0005               LSLS     R0,R0,#+20       ;; #+134217728
   \   0000008C   0843               ORRS     R0,R0,R1
   \   0000008E   ....               LDR      R1,??DataTable4_10  ;; 0x40110020
   \   00000090   0860               STR      R0,[R1, #+0]
     92          
     93          	/* Set the timer interrupts to be above the kernel.  The interrupts are
     94          	 assigned different priorities so they nest with each other. */
     95          	NVIC_SetPriority( TMR2_IRQn, 2 );
   \   00000092   0221               MOVS     R1,#+2
   \   00000094   0A20               MOVS     R0,#+10
   \   00000096   ........           BL       NVIC_SetPriority
     96          	NVIC_SetPriority( TMR3_IRQn, 1 );
   \   0000009A   0121               MOVS     R1,#+1
   \   0000009C   0B20               MOVS     R0,#+11
   \   0000009E   ........           BL       NVIC_SetPriority
     97          
     98          	/* Ensure interrupts do not start until the scheduler is running. */
     99          	portDISABLE_INTERRUPTS();
   \   000000A2   ........           BL       vPortSetInterruptMask
    100          
    101          	/* The rate at which the timers will interrupt. */
    102          	ulFrequency = configCPU_CLOCK_HZ / tmrTIMER_2_FREQUENCY;
   \   000000A6   ....               LDR      R0,??DataTable4_11  ;; 0x5dc0
    103          	/* Set Time out period = (Period of timer clock input) * (8-bit Prescale + 1) * (24-bit TCMP)*/
    104          	TIMER2->TCSR.PRESCALE = 0;
   \   000000A8   ....               LDR      R1,??DataTable4_8  ;; 0x40110000
   \   000000AA   0968               LDR      R1,[R1, #+0]
   \   000000AC   FF22               MOVS     R2,#+255
   \   000000AE   9143               BICS     R1,R1,R2
   \   000000B0   ....               LDR      R2,??DataTable4_8  ;; 0x40110000
   \   000000B2   1160               STR      R1,[R2, #+0]
    105          	TIMER2->TCMPR = ulFrequency;
   \   000000B4   ....               LDR      R1,??DataTable4_12  ;; 0x40110004
   \   000000B6   0860               STR      R0,[R1, #+0]
    106          	/* Enable timer2 interrupt */		
    107          	TIMER2->TCSR.IE = 1 ;
   \   000000B8   ....               LDR      R0,??DataTable4_8  ;; 0x40110000
   \   000000BA   0068               LDR      R0,[R0, #+0]
   \   000000BC   8021               MOVS     R1,#+128
   \   000000BE   8905               LSLS     R1,R1,#+22       ;; #+536870912
   \   000000C0   0143               ORRS     R1,R1,R0
   \   000000C2   ....               LDR      R0,??DataTable4_8  ;; 0x40110000
   \   000000C4   0160               STR      R1,[R0, #+0]
    108          	NVIC_EnableIRQ(TMR2_IRQn); 
   \   000000C6   0A20               MOVS     R0,#+10
   \   000000C8   ........           BL       NVIC_EnableIRQ
    109          	
    110          	/* The rate at which the timers will interrupt. */
    111          	ulFrequency = configCPU_CLOCK_HZ / tmrTIMER_3_FREQUENCY;   
   \   000000CC   ....               LDR      R0,??DataTable4_13  ;; 0x5db4
    112          	/* Set Time out period = (Period of timer clock input) * (8-bit Prescale + 1) * (24-bit TCMP)*/
    113          	TIMER3->TCSR.PRESCALE = 0;
   \   000000CE   ....               LDR      R1,??DataTable4_10  ;; 0x40110020
   \   000000D0   0968               LDR      R1,[R1, #+0]
   \   000000D2   FF22               MOVS     R2,#+255
   \   000000D4   9143               BICS     R1,R1,R2
   \   000000D6   ....               LDR      R2,??DataTable4_10  ;; 0x40110020
   \   000000D8   1160               STR      R1,[R2, #+0]
    114          	TIMER3->TCMPR = ulFrequency;
   \   000000DA   ....               LDR      R1,??DataTable4_14  ;; 0x40110024
   \   000000DC   0860               STR      R0,[R1, #+0]
    115          	/* Enable timer3 interrupt */		
    116          	TIMER3->TCSR.IE = 1 ;
   \   000000DE   ....               LDR      R0,??DataTable4_10  ;; 0x40110020
   \   000000E0   0068               LDR      R0,[R0, #+0]
   \   000000E2   8021               MOVS     R1,#+128
   \   000000E4   8905               LSLS     R1,R1,#+22       ;; #+536870912
   \   000000E6   0143               ORRS     R1,R1,R0
   \   000000E8   ....               LDR      R0,??DataTable4_10  ;; 0x40110020
   \   000000EA   0160               STR      R1,[R0, #+0]
    117          	NVIC_EnableIRQ(TMR3_IRQn);
   \   000000EC   0B20               MOVS     R0,#+11
   \   000000EE   ........           BL       NVIC_EnableIRQ
    118          
    119          	/* Reset timer2 counter */
    120          	TIMER2->TCSR.CRST = 1;	
   \   000000F2   ....               LDR      R0,??DataTable4_8  ;; 0x40110000
   \   000000F4   0068               LDR      R0,[R0, #+0]
   \   000000F6   8021               MOVS     R1,#+128
   \   000000F8   C904               LSLS     R1,R1,#+19       ;; #+67108864
   \   000000FA   0143               ORRS     R1,R1,R0
   \   000000FC   ....               LDR      R0,??DataTable4_8  ;; 0x40110000
   \   000000FE   0160               STR      R1,[R0, #+0]
    121          	/* Reset timer3 counter */
    122          	TIMER3->TCSR.CRST = 1;
   \   00000100   ....               LDR      R0,??DataTable4_10  ;; 0x40110020
   \   00000102   0068               LDR      R0,[R0, #+0]
   \   00000104   8021               MOVS     R1,#+128
   \   00000106   C904               LSLS     R1,R1,#+19       ;; #+67108864
   \   00000108   0143               ORRS     R1,R1,R0
   \   0000010A   ....               LDR      R0,??DataTable4_10  ;; 0x40110020
   \   0000010C   0160               STR      R1,[R0, #+0]
    123          
    124          	/* Enable Timer2 */					
    125          	TIMER2->TCSR.CEN = 1;		
   \   0000010E   ....               LDR      R0,??DataTable4_8  ;; 0x40110000
   \   00000110   0068               LDR      R0,[R0, #+0]
   \   00000112   8021               MOVS     R1,#+128
   \   00000114   C905               LSLS     R1,R1,#+23       ;; #+1073741824
   \   00000116   0143               ORRS     R1,R1,R0
   \   00000118   ....               LDR      R0,??DataTable4_8  ;; 0x40110000
   \   0000011A   0160               STR      R1,[R0, #+0]
    126          	/* Enable Timer3 */					
    127          	TIMER3->TCSR.CEN = 1;		
   \   0000011C   ....               LDR      R0,??DataTable4_10  ;; 0x40110020
   \   0000011E   0068               LDR      R0,[R0, #+0]
   \   00000120   8021               MOVS     R1,#+128
   \   00000122   C905               LSLS     R1,R1,#+23       ;; #+1073741824
   \   00000124   0143               ORRS     R1,R1,R0
   \   00000126   ....               LDR      R0,??DataTable4_10  ;; 0x40110020
   \   00000128   0160               STR      R1,[R0, #+0]
    128          }
   \   0000012A   01BD               POP      {R0,PC}          ;; return
    129          /*-----------------------------------------------------------*/
    130          

   \                                 In section .text, align 2, keep-with-next
    131          void TMR2_IRQHandler(void)
    132          {
   \                     TMR2_IRQHandler:
   \   00000000   80B5               PUSH     {R7,LR}
    133          	TIMER2->TISR.TIF =1;
   \   00000002   ....               LDR      R0,??DataTable4_15  ;; 0x40110008
   \   00000004   0068               LDR      R0,[R0, #+0]
   \   00000006   0121               MOVS     R1,#+1
   \   00000008   0143               ORRS     R1,R1,R0
   \   0000000A   ....               LDR      R0,??DataTable4_15  ;; 0x40110008
   \   0000000C   0160               STR      R1,[R0, #+0]
    134          	portEND_SWITCHING_ISR( xFirstTimerHandler() );  
   \   0000000E   ........           BL       xFirstTimerHandler
   \   00000012   0028               CMP      R0,#+0
   \   00000014   01D0               BEQ      ??TMR2_IRQHandler_0
   \   00000016   ........           BL       vPortYieldFromISR
    135          }
   \                     ??TMR2_IRQHandler_0:
   \   0000001A   01BD               POP      {R0,PC}          ;; return
    136          

   \                                 In section .text, align 2, keep-with-next
    137          void TMR3_IRQHandler(void)
    138          {
   \                     TMR3_IRQHandler:
   \   00000000   80B5               PUSH     {R7,LR}
    139          	TIMER3->TISR.TIF =1;
   \   00000002   ....               LDR      R0,??DataTable4_16  ;; 0x40110028
   \   00000004   0068               LDR      R0,[R0, #+0]
   \   00000006   0121               MOVS     R1,#+1
   \   00000008   0143               ORRS     R1,R1,R0
   \   0000000A   ....               LDR      R0,??DataTable4_16  ;; 0x40110028
   \   0000000C   0160               STR      R1,[R0, #+0]
    140          	portEND_SWITCHING_ISR( xSecondTimerHandler() );  
   \   0000000E   ........           BL       xSecondTimerHandler
   \   00000012   0028               CMP      R0,#+0
   \   00000014   01D0               BEQ      ??TMR3_IRQHandler_0
   \   00000016   ........           BL       vPortYieldFromISR
    141          }
   \                     ??TMR3_IRQHandler_0:
   \   0000001A   01BD               POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   00E100E0           DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   1CED00E0           DC32     0xe000ed1c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   00E400E0           DC32     0xe000e400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   14020050           DC32     0x50000214

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   FFFFF8FF           DC32     0xfff8ffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   FFFF8FFF           DC32     0xff8fffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   08020050           DC32     0x50000208

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0C000050           DC32     0x5000000c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   00001140           DC32     0x40110000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \   00000000   FFFFFFE7           DC32     0xe7ffffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \   00000000   20001140           DC32     0x40110020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_11:
   \   00000000   C05D0000           DC32     0x5dc0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_12:
   \   00000000   04001140           DC32     0x40110004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_13:
   \   00000000   B45D0000           DC32     0x5db4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_14:
   \   00000000   24001140           DC32     0x40110024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_15:
   \   00000000   08001140           DC32     0x40110008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_16:
   \   00000000   28001140           DC32     0x40110028
    142          
    143          

   Maximum stack usage in bytes:

     Function                       .cstack
     --------                       -------
     NVIC_EnableIRQ                      0
     NVIC_SetPriority                   20
     TMR2_IRQHandler                     8
     TMR3_IRQHandler                     8
     vInitialiseTimerForIntQueueTest
                                         8


   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     NVIC_EnableIRQ                   24
     NVIC_SetPriority                140
     vInitialiseTimerForIntQueueTest
                                     300
     TMR2_IRQHandler                  28
     TMR3_IRQHandler                  28
     ??DataTable4                      4
     ??DataTable4_1                    4
     ??DataTable4_2                    4
     ??DataTable4_3                    4
     ??DataTable4_4                    4
     ??DataTable4_5                    4
     ??DataTable4_6                    4
     ??DataTable4_7                    4
     ??DataTable4_8                    4
     ??DataTable4_9                    4
     ??DataTable4_10                   4
     ??DataTable4_11                   4
     ??DataTable4_12                   4
     ??DataTable4_13                   4
     ??DataTable4_14                   4
     ??DataTable4_15                   4
     ??DataTable4_16                   4

 
 588 bytes in section .text
 
 588 bytes of CODE memory

Errors: none
Warnings: none
