###############################################################################
#                                                                             #
#                                                       06/Jul/2010  14:34:54 #
# IAR ANSI C/C++ Compiler V5.50.0.21878/W32 EVALUATION for ARM                #
# Copyright (C) 1999-2010 IAR Systems AB.                                     #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\Common\Minimal\counts #
#                    em.c                                                     #
#    Command line =  E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\Common\Minimal\counts #
#                    em.c -D IAR_ARM_CM0 -lCN E:\FreeRTOS_Keil_IAR\FreeRTOS\D #
#                    emo\CORTEX_NUC1xx_Keil_IAR\Debug\List\ --diag_suppress   #
#                    Pe550,Pa082,Pa039 -o E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\ #
#                    CORTEX_NUC1xx_Keil_IAR\Debug\Obj\ --no_cse --no_unroll   #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M0  #
#                    -e --fpu=None --dlib_config "D:\Program                  #
#                    Files\ARM\INC\DLib_Config_Full.h" -I                     #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\..\common\include\ -I E:\FreeRTOS_Keil_IAR\FreeRTOS\De #
#                    mo\CORTEX_NUC1xx_Keil_IAR\..\..\source\include\ -I       #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\ -I E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_K #
#                    eil_IAR\NUC1xxBSP\NuvotonPlatform_Keil\Include\ -I       #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\NUC1xxBSP\NuvotonPlatform_Keil\Include\Driver\ -I      #
#                    E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\NUC1xxBSP\CMSIS\CM0\ -I E:\FreeRTOS_Keil_IAR\FreeRTOS\ #
#                    Demo\CORTEX_NUC1xx_Keil_IAR\User_Demo\include\ -I        #
#                    "D:\Program Files\ARM\INC\" -Ol                          #
#    List file    =  E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\Debug\List\countsem.lst                                #
#    Object file  =  E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\CORTEX_NUC1xx_Keil_IA #
#                    R\Debug\Obj\countsem.o                                   #
#                                                                             #
#                                                                             #
###############################################################################

E:\FreeRTOS_Keil_IAR\FreeRTOS\Demo\Common\Minimal\countsem.c
      1          /*
      2              FreeRTOS V6.0.5 - Copyright (C) 2010 Real Time Engineers Ltd.
      3          
      4              ***************************************************************************
      5              *                                                                         *
      6              * If you are:                                                             *
      7              *                                                                         *
      8              *    + New to FreeRTOS,                                                   *
      9              *    + Wanting to learn FreeRTOS or multitasking in general quickly       *
     10              *    + Looking for basic training,                                        *
     11              *    + Wanting to improve your FreeRTOS skills and productivity           *
     12              *                                                                         *
     13              * then take a look at the FreeRTOS eBook                                  *
     14              *                                                                         *
     15              *        "Using the FreeRTOS Real Time Kernel - a Practical Guide"        *
     16              *                  http://www.FreeRTOS.org/Documentation                  *
     17              *                                                                         *
     18              * A pdf reference manual is also available.  Both are usually delivered   *
     19              * to your inbox within 20 minutes to two hours when purchased between 8am *
     20              * and 8pm GMT (although please allow up to 24 hours in case of            *
     21              * exceptional circumstances).  Thank you for your support!                *
     22              *                                                                         *
     23              ***************************************************************************
     24          
     25              This file is part of the FreeRTOS distribution.
     26          
     27              FreeRTOS is free software; you can redistribute it and/or modify it under
     28              the terms of the GNU General Public License (version 2) as published by the
     29              Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
     30              ***NOTE*** The exception to the GPL is included to allow you to distribute
     31              a combined work that includes FreeRTOS without being obliged to provide the
     32              source code for proprietary components outside of the FreeRTOS kernel.
     33              FreeRTOS is distributed in the hope that it will be useful, but WITHOUT
     34              ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
     35              FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
     36              more details. You should have received a copy of the GNU General Public 
     37              License and the FreeRTOS license exception along with FreeRTOS; if not it 
     38              can be viewed here: http://www.freertos.org/a00114.html and also obtained 
     39              by writing to Richard Barry, contact details for whom are available on the
     40              FreeRTOS WEB site.
     41          
     42              1 tab == 4 spaces!
     43          
     44              http://www.FreeRTOS.org - Documentation, latest information, license and
     45              contact details.
     46          
     47              http://www.SafeRTOS.com - A version that is certified for use in safety
     48              critical systems.
     49          
     50              http://www.OpenRTOS.com - Commercial support, development, porting,
     51              licensing and training services.
     52          */
     53          
     54          
     55          /* 
     56           * Simple demonstration of the usage of counting semaphore.
     57           */
     58          
     59          /* Scheduler include files. */
     60          #include "FreeRTOS.h"
     61          #include "task.h"
     62          #include "semphr.h"
     63          
     64          /* Demo program include files. */
     65          #include "countsem.h"
     66          
     67          /* The maximum count value that the semaphore used for the demo can hold. */
     68          #define countMAX_COUNT_VALUE	( 200 )
     69          
     70          /* Constants used to indicate whether or not the semaphore should have been
     71          created with its maximum count value, or its minimum count value.  These 
     72          numbers are used to ensure that the pointers passed in as the task parameters
     73          are valid. */
     74          #define countSTART_AT_MAX_COUNT	( 0xaa )
     75          #define countSTART_AT_ZERO		( 0x55 )
     76          
     77          /* Two tasks are created for the test.  One uses a semaphore created with its
     78          count value set to the maximum, and one with the count value set to zero. */
     79          #define countNUM_TEST_TASKS		( 2 )
     80          #define countDONT_BLOCK			( 0 )
     81          
     82          /*-----------------------------------------------------------*/
     83          
     84          /* Flag that will be latched to pdTRUE should any unexpected behaviour be
     85          detected in any of the tasks. */

   \                                 In section .bss, align 4
     86          static volatile portBASE_TYPE xErrorDetected = pdFALSE;
   \                     xErrorDetected:
   \   00000000                      DS8 4
     87          
     88          /*-----------------------------------------------------------*/
     89          
     90          /*
     91           * The demo task.  This simply counts the semaphore up to its maximum value,
     92           * the counts it back down again.  The result of each semaphore 'give' and
     93           * 'take' is inspected, with an error being flagged if it is found not to be
     94           * the expected result.
     95           */
     96          static void prvCountingSemaphoreTask( void *pvParameters );
     97          
     98          /*
     99           * Utility function to increment the semaphore count value up from zero to
    100           * countMAX_COUNT_VALUE.
    101           */
    102          static void prvIncrementSemaphoreCount( xSemaphoreHandle xSemaphore, unsigned portBASE_TYPE *puxLoopCounter );
    103          
    104          /*
    105           * Utility function to decrement the semaphore count value up from 
    106           * countMAX_COUNT_VALUE to zero.
    107           */
    108          static void prvDecrementSemaphoreCount( xSemaphoreHandle xSemaphore, unsigned portBASE_TYPE *puxLoopCounter );
    109          
    110          /*-----------------------------------------------------------*/
    111          
    112          /* The structure that is passed into the task as the task parameter. */
    113          typedef struct COUNT_SEM_STRUCT
    114          {
    115          	/* The semaphore to be used for the demo. */
    116          	xSemaphoreHandle xSemaphore;
    117          
    118          	/* Set to countSTART_AT_MAX_COUNT if the semaphore should be created with
    119          	its count value set to its max count value, or countSTART_AT_ZERO if it
    120          	should have been created with its count value set to 0. */
    121          	unsigned portBASE_TYPE uxExpectedStartCount;	
    122          
    123          	/* Incremented on each cycle of the demo task.  Used to detect a stalled
    124          	task. */
    125          	unsigned portBASE_TYPE uxLoopCounter;			
    126          } xCountSemStruct;
    127          
    128          /* Two structures are defined, one is passed to each test task. */

   \                                 In section .bss, align 4
    129          static volatile xCountSemStruct xParameters[ countNUM_TEST_TASKS ];
   \                     xParameters:
   \   00000000                      DS8 24
    130          
    131          /*-----------------------------------------------------------*/
    132          

   \                                 In section .text, align 2, keep-with-next
    133          void vStartCountingSemaphoreTasks( void )
    134          {
   \                     vStartCountingSemaphoreTasks:
   \   00000000   00B5               PUSH     {LR}
   \   00000002   85B0               SUB      SP,SP,#+20
    135          	/* Create the semaphores that we are going to use for the test/demo.  The
    136          	first should be created such that it starts at its maximum count value,
    137          	the second should be created such that it starts with a count value of zero. */
    138          	xParameters[ 0 ].xSemaphore = xSemaphoreCreateCounting( countMAX_COUNT_VALUE, countMAX_COUNT_VALUE );
   \   00000004   C821               MOVS     R1,#+200
   \   00000006   C820               MOVS     R0,#+200
   \   00000008   ........           BL       xQueueCreateCountingSemaphore
   \   0000000C   ....               LDR      R1,??DataTable4
   \   0000000E   0860               STR      R0,[R1, #+0]
    139          	xParameters[ 0 ].uxExpectedStartCount = countSTART_AT_MAX_COUNT;
   \   00000010   ....               LDR      R0,??DataTable4
   \   00000012   AA21               MOVS     R1,#+170
   \   00000014   4160               STR      R1,[R0, #+4]
    140          	xParameters[ 0 ].uxLoopCounter = 0;
   \   00000016   ....               LDR      R0,??DataTable4
   \   00000018   0021               MOVS     R1,#+0
   \   0000001A   8160               STR      R1,[R0, #+8]
    141          
    142          	xParameters[ 1 ].xSemaphore = xSemaphoreCreateCounting( countMAX_COUNT_VALUE, 0 );
   \   0000001C   0021               MOVS     R1,#+0
   \   0000001E   C820               MOVS     R0,#+200
   \   00000020   ........           BL       xQueueCreateCountingSemaphore
   \   00000024   ....               LDR      R1,??DataTable4
   \   00000026   C860               STR      R0,[R1, #+12]
    143          	xParameters[ 1 ].uxExpectedStartCount = 0;
   \   00000028   ....               LDR      R0,??DataTable4
   \   0000002A   0021               MOVS     R1,#+0
   \   0000002C   0161               STR      R1,[R0, #+16]
    144          	xParameters[ 1 ].uxLoopCounter = 0;
   \   0000002E   ....               LDR      R0,??DataTable4
   \   00000030   0021               MOVS     R1,#+0
   \   00000032   4161               STR      R1,[R0, #+20]
    145          
    146          	/* vQueueAddToRegistry() adds the semaphore to the registry, if one is
    147          	in use.  The registry is provided as a means for kernel aware 
    148          	debuggers to locate semaphores and has no purpose if a kernel aware debugger
    149          	is not being used.  The call to vQueueAddToRegistry() will be removed
    150          	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is 
    151          	defined to be less than 1. */
    152          	vQueueAddToRegistry( ( xQueueHandle ) xParameters[ 0 ].xSemaphore, ( signed portCHAR * ) "Counting_Sem_1" );
    153          	vQueueAddToRegistry( ( xQueueHandle ) xParameters[ 1 ].xSemaphore, ( signed portCHAR * ) "Counting_Sem_2" );
    154          
    155          
    156          	/* Were the semaphores created? */
    157          	if( ( xParameters[ 0 ].xSemaphore != NULL ) || ( xParameters[ 1 ].xSemaphore != NULL ) )
   \   00000034   ....               LDR      R0,??DataTable4
   \   00000036   0068               LDR      R0,[R0, #+0]
   \   00000038   0028               CMP      R0,#+0
   \   0000003A   03D1               BNE      ??vStartCountingSemaphoreTasks_0
   \   0000003C   ....               LDR      R0,??DataTable4
   \   0000003E   C068               LDR      R0,[R0, #+12]
   \   00000040   0028               CMP      R0,#+0
   \   00000042   1CD0               BEQ      ??vStartCountingSemaphoreTasks_1
    158          	{
    159          		/* Create the demo tasks, passing in the semaphore to use as the parameter. */
    160          		xTaskCreate( prvCountingSemaphoreTask, ( signed portCHAR * ) "CNT1", configMINIMAL_STACK_SIZE, ( void * ) &( xParameters[ 0 ] ), tskIDLE_PRIORITY, NULL );
   \                     ??vStartCountingSemaphoreTasks_0:
   \   00000044   0020               MOVS     R0,#+0
   \   00000046   0390               STR      R0,[SP, #+12]
   \   00000048   0020               MOVS     R0,#+0
   \   0000004A   0290               STR      R0,[SP, #+8]
   \   0000004C   0020               MOVS     R0,#+0
   \   0000004E   0190               STR      R0,[SP, #+4]
   \   00000050   0020               MOVS     R0,#+0
   \   00000052   0090               STR      R0,[SP, #+0]
   \   00000054   ....               LDR      R3,??DataTable4
   \   00000056   8022               MOVS     R2,#+128
   \   00000058   ....               LDR      R1,??DataTable4_1
   \   0000005A   ....               LDR      R0,??DataTable4_2
   \   0000005C   ........           BL       xTaskGenericCreate
    161          		xTaskCreate( prvCountingSemaphoreTask, ( signed portCHAR * ) "CNT2", configMINIMAL_STACK_SIZE, ( void * ) &( xParameters[ 1 ] ), tskIDLE_PRIORITY, NULL );		
   \   00000060   0020               MOVS     R0,#+0
   \   00000062   0390               STR      R0,[SP, #+12]
   \   00000064   0020               MOVS     R0,#+0
   \   00000066   0290               STR      R0,[SP, #+8]
   \   00000068   0020               MOVS     R0,#+0
   \   0000006A   0190               STR      R0,[SP, #+4]
   \   0000006C   0020               MOVS     R0,#+0
   \   0000006E   0090               STR      R0,[SP, #+0]
   \   00000070   ....               LDR      R3,??DataTable4
   \   00000072   0C33               ADDS     R3,R3,#+12
   \   00000074   8022               MOVS     R2,#+128
   \   00000076   ....               LDR      R1,??DataTable4_3
   \   00000078   ....               LDR      R0,??DataTable4_2
   \   0000007A   ........           BL       xTaskGenericCreate
    162          	}
    163          }
   \                     ??vStartCountingSemaphoreTasks_1:
   \   0000007E   05B0               ADD      SP,SP,#+20
   \   00000080   00BD               POP      {PC}             ;; return
    164          /*-----------------------------------------------------------*/
    165          

   \                                 In section .text, align 2, keep-with-next
    166          static void prvDecrementSemaphoreCount( xSemaphoreHandle xSemaphore, unsigned portBASE_TYPE *puxLoopCounter )
    167          {
   \                     prvDecrementSemaphoreCount:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0500               MOVS     R5,R0
   \   00000004   0E00               MOVS     R6,R1
    168          unsigned portBASE_TYPE ux;
    169          
    170          	/* If the semaphore count is at its maximum then we should not be able to
    171          	'give' the semaphore. */
    172          	if( xSemaphoreGive( xSemaphore ) == pdPASS )
   \   00000006   0023               MOVS     R3,#+0
   \   00000008   0022               MOVS     R2,#+0
   \   0000000A   0021               MOVS     R1,#+0
   \   0000000C   2800               MOVS     R0,R5
   \   0000000E   ........           BL       xQueueGenericSend
   \   00000012   0128               CMP      R0,#+1
   \   00000014   02D1               BNE      ??prvDecrementSemaphoreCount_0
    173          	{
    174          		xErrorDetected = pdTRUE;
   \   00000016   ....               LDR      R0,??DataTable4_4
   \   00000018   0121               MOVS     R1,#+1
   \   0000001A   0160               STR      R1,[R0, #+0]
    175          	}
    176          
    177          	/* We should be able to 'take' the semaphore countMAX_COUNT_VALUE times. */
    178          	for( ux = 0; ux < countMAX_COUNT_VALUE; ux++ )
   \                     ??prvDecrementSemaphoreCount_0:
   \   0000001C   0024               MOVS     R4,#+0
   \   0000001E   0EE0               B        ??prvDecrementSemaphoreCount_1
    179          	{
    180          		if( xSemaphoreTake( xSemaphore, countDONT_BLOCK ) != pdPASS )
   \                     ??prvDecrementSemaphoreCount_2:
   \   00000020   0023               MOVS     R3,#+0
   \   00000022   0022               MOVS     R2,#+0
   \   00000024   0021               MOVS     R1,#+0
   \   00000026   2800               MOVS     R0,R5
   \   00000028   ........           BL       xQueueGenericReceive
   \   0000002C   0128               CMP      R0,#+1
   \   0000002E   02D0               BEQ      ??prvDecrementSemaphoreCount_3
    181          		{
    182          			/* We expected to be able to take the semaphore. */
    183          			xErrorDetected = pdTRUE;
   \   00000030   ....               LDR      R0,??DataTable4_4
   \   00000032   0121               MOVS     R1,#+1
   \   00000034   0160               STR      R1,[R0, #+0]
    184          		}
    185          
    186          		( *puxLoopCounter )++;
   \                     ??prvDecrementSemaphoreCount_3:
   \   00000036   3068               LDR      R0,[R6, #+0]
   \   00000038   401C               ADDS     R0,R0,#+1
   \   0000003A   3060               STR      R0,[R6, #+0]
    187          	}
   \   0000003C   641C               ADDS     R4,R4,#+1
   \                     ??prvDecrementSemaphoreCount_1:
   \   0000003E   C82C               CMP      R4,#+200
   \   00000040   EED3               BCC      ??prvDecrementSemaphoreCount_2
    188          
    189          	#if configUSE_PREEMPTION == 0
    190          		taskYIELD();
    191          	#endif
    192          
    193          	/* If the semaphore count is zero then we should not be able to	'take' 
    194          	the semaphore. */
    195          	if( xSemaphoreTake( xSemaphore, countDONT_BLOCK ) == pdPASS )
   \   00000042   0023               MOVS     R3,#+0
   \   00000044   0022               MOVS     R2,#+0
   \   00000046   0021               MOVS     R1,#+0
   \   00000048   2800               MOVS     R0,R5
   \   0000004A   ........           BL       xQueueGenericReceive
   \   0000004E   0128               CMP      R0,#+1
   \   00000050   02D1               BNE      ??prvDecrementSemaphoreCount_4
    196          	{
    197          		xErrorDetected = pdTRUE;
   \   00000052   ....               LDR      R0,??DataTable4_4
   \   00000054   0121               MOVS     R1,#+1
   \   00000056   0160               STR      R1,[R0, #+0]
    198          	}
    199          }
   \                     ??prvDecrementSemaphoreCount_4:
   \   00000058   70BD               POP      {R4-R6,PC}       ;; return
    200          /*-----------------------------------------------------------*/
    201          

   \                                 In section .text, align 2, keep-with-next
    202          static void prvIncrementSemaphoreCount( xSemaphoreHandle xSemaphore, unsigned portBASE_TYPE *puxLoopCounter )
    203          {
   \                     prvIncrementSemaphoreCount:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0500               MOVS     R5,R0
   \   00000004   0E00               MOVS     R6,R1
    204          unsigned portBASE_TYPE ux;
    205          
    206          	/* If the semaphore count is zero then we should not be able to	'take' 
    207          	the semaphore. */
    208          	if( xSemaphoreTake( xSemaphore, countDONT_BLOCK ) == pdPASS )
   \   00000006   0023               MOVS     R3,#+0
   \   00000008   0022               MOVS     R2,#+0
   \   0000000A   0021               MOVS     R1,#+0
   \   0000000C   2800               MOVS     R0,R5
   \   0000000E   ........           BL       xQueueGenericReceive
   \   00000012   0128               CMP      R0,#+1
   \   00000014   02D1               BNE      ??prvIncrementSemaphoreCount_0
    209          	{
    210          		xErrorDetected = pdTRUE;
   \   00000016   ....               LDR      R0,??DataTable4_4
   \   00000018   0121               MOVS     R1,#+1
   \   0000001A   0160               STR      R1,[R0, #+0]
    211          	}
    212          
    213          	/* We should be able to 'give' the semaphore countMAX_COUNT_VALUE times. */
    214          	for( ux = 0; ux < countMAX_COUNT_VALUE; ux++ )
   \                     ??prvIncrementSemaphoreCount_0:
   \   0000001C   0024               MOVS     R4,#+0
   \   0000001E   0EE0               B        ??prvIncrementSemaphoreCount_1
    215          	{
    216          		if( xSemaphoreGive( xSemaphore ) != pdPASS )
   \                     ??prvIncrementSemaphoreCount_2:
   \   00000020   0023               MOVS     R3,#+0
   \   00000022   0022               MOVS     R2,#+0
   \   00000024   0021               MOVS     R1,#+0
   \   00000026   2800               MOVS     R0,R5
   \   00000028   ........           BL       xQueueGenericSend
   \   0000002C   0128               CMP      R0,#+1
   \   0000002E   02D0               BEQ      ??prvIncrementSemaphoreCount_3
    217          		{
    218          			/* We expected to be able to take the semaphore. */
    219          			xErrorDetected = pdTRUE;
   \   00000030   ....               LDR      R0,??DataTable4_4
   \   00000032   0121               MOVS     R1,#+1
   \   00000034   0160               STR      R1,[R0, #+0]
    220          		}
    221          
    222          		( *puxLoopCounter )++;
   \                     ??prvIncrementSemaphoreCount_3:
   \   00000036   3068               LDR      R0,[R6, #+0]
   \   00000038   401C               ADDS     R0,R0,#+1
   \   0000003A   3060               STR      R0,[R6, #+0]
    223          	}
   \   0000003C   641C               ADDS     R4,R4,#+1
   \                     ??prvIncrementSemaphoreCount_1:
   \   0000003E   C82C               CMP      R4,#+200
   \   00000040   EED3               BCC      ??prvIncrementSemaphoreCount_2
    224          
    225          	#if configUSE_PREEMPTION == 0
    226          		taskYIELD();
    227          	#endif
    228          
    229          	/* If the semaphore count is at its maximum then we should not be able to
    230          	'give' the semaphore. */
    231          	if( xSemaphoreGive( xSemaphore ) == pdPASS )
   \   00000042   0023               MOVS     R3,#+0
   \   00000044   0022               MOVS     R2,#+0
   \   00000046   0021               MOVS     R1,#+0
   \   00000048   2800               MOVS     R0,R5
   \   0000004A   ........           BL       xQueueGenericSend
   \   0000004E   0128               CMP      R0,#+1
   \   00000050   02D1               BNE      ??prvIncrementSemaphoreCount_4
    232          	{
    233          		xErrorDetected = pdTRUE;
   \   00000052   ....               LDR      R0,??DataTable4_4
   \   00000054   0121               MOVS     R1,#+1
   \   00000056   0160               STR      R1,[R0, #+0]
    234          	}
    235          }
   \                     ??prvIncrementSemaphoreCount_4:
   \   00000058   70BD               POP      {R4-R6,PC}       ;; return
    236          /*-----------------------------------------------------------*/
    237          

   \                                 In section .text, align 2, keep-with-next
    238          static void prvCountingSemaphoreTask( void *pvParameters )
    239          {
   \                     prvCountingSemaphoreTask:
   \   00000000   10B5               PUSH     {R4,LR}
    240          xCountSemStruct *pxParameter;
    241          
    242          	#ifdef USE_STDIO
    243          	void vPrintDisplayMessage( const portCHAR * const * ppcMessageToSend );
    244          	
    245          		const portCHAR * const pcTaskStartMsg = "Counting semaphore demo started.\r\n";
    246          
    247          		/* Queue a message for printing to say the task has started. */
    248          		vPrintDisplayMessage( &pcTaskStartMsg );
    249          	#endif
    250          
    251          	/* The semaphore to be used was passed as the parameter. */
    252          	pxParameter = ( xCountSemStruct * ) pvParameters;
   \   00000002   0400               MOVS     R4,R0
    253          
    254          	/* Did we expect to find the semaphore already at its max count value, or
    255          	at zero? */
    256          	if( pxParameter->uxExpectedStartCount == countSTART_AT_MAX_COUNT )
   \   00000004   6068               LDR      R0,[R4, #+4]
   \   00000006   AA28               CMP      R0,#+170
   \   00000008   04D1               BNE      ??prvCountingSemaphoreTask_0
    257          	{
    258          		prvDecrementSemaphoreCount( pxParameter->xSemaphore, &( pxParameter->uxLoopCounter ) );
   \   0000000A   2100               MOVS     R1,R4
   \   0000000C   0831               ADDS     R1,R1,#+8
   \   0000000E   2068               LDR      R0,[R4, #+0]
   \   00000010   ........           BL       prvDecrementSemaphoreCount
    259          	}
    260          
    261          	/* Now we expect the semaphore count to be 0, so this time there is an
    262          	error if we can take the semaphore. */
    263          	if( xSemaphoreTake( pxParameter->xSemaphore, 0 ) == pdPASS )
   \                     ??prvCountingSemaphoreTask_0:
   \   00000014   0023               MOVS     R3,#+0
   \   00000016   0022               MOVS     R2,#+0
   \   00000018   0021               MOVS     R1,#+0
   \   0000001A   2068               LDR      R0,[R4, #+0]
   \   0000001C   ........           BL       xQueueGenericReceive
   \   00000020   0128               CMP      R0,#+1
   \   00000022   02D1               BNE      ??prvCountingSemaphoreTask_1
    264          	{
    265          		xErrorDetected = pdTRUE;
   \   00000024   ....               LDR      R0,??DataTable4_4
   \   00000026   0121               MOVS     R1,#+1
   \   00000028   0160               STR      R1,[R0, #+0]
    266          	}
    267          
    268          	for( ;; )
    269          	{
    270          		prvIncrementSemaphoreCount( pxParameter->xSemaphore, &( pxParameter->uxLoopCounter ) );
   \                     ??prvCountingSemaphoreTask_1:
   \   0000002A   2100               MOVS     R1,R4
   \   0000002C   0831               ADDS     R1,R1,#+8
   \   0000002E   2068               LDR      R0,[R4, #+0]
   \   00000030   ........           BL       prvIncrementSemaphoreCount
    271          		prvDecrementSemaphoreCount( pxParameter->xSemaphore, &( pxParameter->uxLoopCounter ) );
   \   00000034   2100               MOVS     R1,R4
   \   00000036   0831               ADDS     R1,R1,#+8
   \   00000038   2068               LDR      R0,[R4, #+0]
   \   0000003A   ........           BL       prvDecrementSemaphoreCount
   \   0000003E   F4E7               B        ??prvCountingSemaphoreTask_1
    272          	}
    273          }
    274          /*-----------------------------------------------------------*/
    275          

   \                                 In section .text, align 2, keep-with-next
    276          portBASE_TYPE xAreCountingSemaphoreTasksStillRunning( void )
    277          {
   \                     xAreCountingSemaphoreTasksStillRunning:
   \   00000000   00B5               PUSH     {LR}
    278          static unsigned portBASE_TYPE uxLastCount0 = 0, uxLastCount1 = 0;
    279          portBASE_TYPE xReturn = pdPASS;
   \   00000002   0120               MOVS     R0,#+1
    280          
    281          	/* Return fail if any 'give' or 'take' did not result in the expected
    282          	behaviour. */
    283          	if( xErrorDetected != pdFALSE )
   \   00000004   ....               LDR      R1,??DataTable4_4
   \   00000006   0968               LDR      R1,[R1, #+0]
   \   00000008   0029               CMP      R1,#+0
   \   0000000A   00D0               BEQ      ??xAreCountingSemaphoreTasksStillRunning_0
    284          	{
    285          		xReturn = pdFAIL;
   \   0000000C   0020               MOVS     R0,#+0
    286          	}
    287          
    288          	/* Return fail if either task is not still incrementing its loop counter. */
    289          	if( uxLastCount0 == xParameters[ 0 ].uxLoopCounter )
   \                     ??xAreCountingSemaphoreTasksStillRunning_0:
   \   0000000E   ....               LDR      R1,??DataTable4_5
   \   00000010   0968               LDR      R1,[R1, #+0]
   \   00000012   ....               LDR      R2,??DataTable4
   \   00000014   9268               LDR      R2,[R2, #+8]
   \   00000016   9142               CMP      R1,R2
   \   00000018   01D1               BNE      ??xAreCountingSemaphoreTasksStillRunning_1
    290          	{
    291          		xReturn = pdFAIL;
   \   0000001A   0020               MOVS     R0,#+0
   \   0000001C   03E0               B        ??xAreCountingSemaphoreTasksStillRunning_2
    292          	}
    293          	else
    294          	{
    295          		uxLastCount0 = xParameters[ 0 ].uxLoopCounter;
   \                     ??xAreCountingSemaphoreTasksStillRunning_1:
   \   0000001E   ....               LDR      R1,??DataTable4
   \   00000020   8968               LDR      R1,[R1, #+8]
   \   00000022   ....               LDR      R2,??DataTable4_5
   \   00000024   1160               STR      R1,[R2, #+0]
    296          	}
    297          
    298          	if( uxLastCount1 == xParameters[ 1 ].uxLoopCounter )
   \                     ??xAreCountingSemaphoreTasksStillRunning_2:
   \   00000026   ....               LDR      R1,??DataTable4_6
   \   00000028   0968               LDR      R1,[R1, #+0]
   \   0000002A   ....               LDR      R2,??DataTable4
   \   0000002C   5269               LDR      R2,[R2, #+20]
   \   0000002E   9142               CMP      R1,R2
   \   00000030   01D1               BNE      ??xAreCountingSemaphoreTasksStillRunning_3
    299          	{
    300          		xReturn = pdFAIL;
   \   00000032   0020               MOVS     R0,#+0
   \   00000034   03E0               B        ??xAreCountingSemaphoreTasksStillRunning_4
    301          	}
    302          	else
    303          	{
    304          		uxLastCount1 = xParameters[ 1 ].uxLoopCounter;
   \                     ??xAreCountingSemaphoreTasksStillRunning_3:
   \   00000036   ....               LDR      R1,??DataTable4
   \   00000038   4969               LDR      R1,[R1, #+20]
   \   0000003A   ....               LDR      R2,??DataTable4_6
   \   0000003C   1160               STR      R1,[R2, #+0]
    305          	}
    306          
    307          	return xReturn;
   \                     ??xAreCountingSemaphoreTasksStillRunning_4:
   \   0000003E   00BD               POP      {PC}             ;; return
    308          }

   \                                 In section .bss, align 4
   \                     ??uxLastCount0:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??uxLastCount1:
   \   00000000                      DS8 4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     xParameters

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   ........           DC32     `?<Constant "CNT1">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   ........           DC32     prvCountingSemaphoreTask

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   ........           DC32     `?<Constant "CNT2">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   ........           DC32     xErrorDetected

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   ........           DC32     ??uxLastCount0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   ........           DC32     ??uxLastCount1

   \                                 In section .rodata, align 4
   \                     `?<Constant "CNT1">`:
   \   00000000   434E543100         DC8 "CNT1"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "CNT2">`:
   \   00000000   434E543200         DC8 "CNT2"
   \   00000005   000000             DC8 0, 0, 0
    309          
    310          

   Maximum stack usage in bytes:

     Function                       .cstack
     --------                       -------
     prvCountingSemaphoreTask            8
     prvDecrementSemaphoreCount         16
     prvIncrementSemaphoreCount         16
     vStartCountingSemaphoreTasks       24
     xAreCountingSemaphoreTasksStillRunning
                                         4


   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     xErrorDetected                    4
     xParameters                      24
     vStartCountingSemaphoreTasks    130
     prvDecrementSemaphoreCount       90
     prvIncrementSemaphoreCount       90
     prvCountingSemaphoreTask         64
     xAreCountingSemaphoreTasksStillRunning
                                      64
     uxLastCount0                      4
     uxLastCount1                      4
     ??DataTable4                      4
     ??DataTable4_1                    4
     ??DataTable4_2                    4
     ??DataTable4_3                    4
     ??DataTable4_4                    4
     ??DataTable4_5                    4
     ??DataTable4_6                    4
     ?<Constant "CNT1">                8
     ?<Constant "CNT2">                8

 
  36 bytes in section .bss
  16 bytes in section .rodata
 466 bytes in section .text
 
 466 bytes of CODE  memory
  16 bytes of CONST memory
  36 bytes of DATA  memory

Errors: none
Warnings: none
